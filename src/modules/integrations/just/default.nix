# This largely inspired by the use of freeformType in
# https://github.com/cachix/git-hooks.nix/blob/master/modules/hooks.nix
# as well as https://github.com/juspay/just-flake/tree/main
{ pkgs, lib, config, ... }:

let
  inherit (lib) types mkOption mkEnableOption attrsets;
  inherit (import ./utils.nix { inherit lib pkgs; }) recipeModule recipeType;

  version = lib.fileContents ./../../latest-version;

  # Returns a list of all the entries in a folder
  listEntries = path:
    map (name: path + "/${name}") (builtins.attrNames (builtins.readDir path));


in
{

  imports = [{
    options.just.recipes = mkOption {
      type = types.submoduleWith {
        modules = [{ freeformType = types.attrsOf recipeType; }];
        specialArgs = { inherit pkgs; };
      };
      default = { };
    };
  }]
  ++ (listEntries ./recipes);

  options.just = {
    enable = mkEnableOption "the just command runner";

    package = mkOption {
      type = types.package;
      default = pkgs.just;
      defaultText = lib.literalExpression "pkgs.just";
      description = "The just package to use.";
    };

    commonFileName = mkOption {
      type = types.str;
      default = "just-flake.just";
      description = ''
        The name of the common justfile generated by this module.
      '';
    };

  };

  config = lib.mkIf config.just.enable {

    packages = [
      config.just.package
    ];

    enterShell =
      let
        commonJustfile = pkgs.writeTextFile {
          name = "justfile";
          text =
            lib.concatStringsSep "\n"
              (lib.mapAttrsToList (name: recipe: recipe.outputs.justfile) config.just.recipes);
        };
      in
      ''
        ln -sf ${builtins.toString commonJustfile} ./${config.just.commonFileName}

        echo
        echo "https://devenv.sh (version ${version}): Fast, Declarative, Reproducible, and Composable Developer Environments ðŸ¦¾ðŸ¦¾"
        echo
        echo "Run 'just <recipe>' to get started"
        just --list
      '';
  };
}
