# This largely inspired by the use of freeformType in
# https://github.com/cachix/git-hooks.nix/blob/master/modules/hooks.nix
# as well as https://github.com/juspay/just-flake/tree/main
{ pkgs, lib, config, ... }:

let
  inherit (lib) types mkOption mkEnableOption;
  inherit (import ./utils.nix { inherit pkgs; }) mkCmdArgs;

  version = lib.fileContents ./../../latest-version;

  recipeModule = {
    imports = [ ./recipe-module.nix ];
    config._module.args = { inherit pkgs; };
  };
  recipeType = types.submodule recipeModule;

  devenvScriptRecipes = lib.genAttrs (builtins.attrNames config.scripts) (name:
    let
      script = config.scripts.${name};
    in
    mkOption {
      description = script.description;
      type = types.submodule {
        imports = [ recipeModule ];
      };
    });

in
{

  imports = [{
    options.just.recipes = mkOption {
      type = types.submoduleWith {
        modules = [{ freeformType = types.attrsOf recipeType; }];
        specialArgs = { inherit pkgs; };
      };
      default = { };
    };
  }];

  options.just = {
    enable = mkEnableOption "the just command runner";

    package = mkOption {
      type = types.package;
      default = pkgs.just;
      defaultText = lib.literalExpression "pkgs.just";
      description = "The just package to use.";
    };

    commonFileName = mkOption {
      type = types.str;
      default = "just-flake.just";
      description = ''
        The name of the common justfile generated by this module.
      '';
    };


    recipes = lib.recursiveUpdate
      devenvScriptRecipes
      ({
        # PLEASE keep this sorted alphabetically.
        convco = mkOption {
          description = "Add the 'changelog' target calling convco";
          type = types.submodule {
            imports = [ recipeModule ];
            options.settings = {
              file-name =
                mkOption {
                  type = types.str;
                  description = lib.mdDoc "The name of the file to output the chaneglog to.";
                  default = "CHANGELOG.md";
                };
            };
          };
        };
        rust = mkOption {
          description = "Add 'w' and 'test' targets for running cargo";
          type = types.submodule { imports = [ recipeModule ]; };
        };
        treefmt = mkOption {
          description = "Add the 'fmt' target to format source tree using treefmt";
          type = types.submodule { imports = [ recipeModule ]; };
        };
        up = mkOption {
          description = "Starts processes in foreground. See http://devenv.sh/processes";
          type = types.submodule { imports = [ recipeModule ]; };
        };
        version = mkOption {
          description = "Display devenv version";
          type = types.submodule { imports = [ recipeModule ]; };
        };
      });
  };

  config = lib.mkIf config.just.enable {

    packages = [
      config.just.package
    ];

    # NOTE: At somepoint, we may want to add `settings` options to some of these recipes.
    just.recipes = lib.recursiveUpdate
      (lib.mapAttrs (_: lib.mapAttrs (_: lib.mkDefault)) {
        convco = {
          package = pkgs.convco;
          justfile =
            let
              binPath = lib.getExe config.just.recipes.convco.package;
              fileName = config.just.recipes.convco.settings.file-name;
            in
            ''
              # Generate ${fileName} using recent commits
              changelog:
                ${binPath} changelog -p "" > ${fileName}
            '';
        };
        rust = {
          justfile = ''
            # Compile and watch the project
            w:
              cargo watch

            # Run and watch 'cargo test'
            test:
              cargo watch -s "cargo test"
          '';
        };
        treefmt = {
          justfile = ''
            # Auto-format the source tree using treefmt
            fmt:
              treefmt
          '';
        };
        up = {
          enable = true;
          justfile = ''
            # Starts processes in foreground. See http://devenv.sh/processes
            up:
              devenv up
          '';
        };
        version = {
          enable = true;
          justfile = ''
            # Display devenv version
            version:
              devenv version
          '';
        };
      })

      #this uses the devenv Scripts to create Just recipes.
      (lib.genAttrs (builtins.attrNames config.scripts) (name:
        let
          script = config.scripts.${name};
        in
        {
          enable = script.just.enable;
          justfile = ''
            #${script.description}
            ${name}:
              ${name}
          '';
        }));


    enterShell =
      let
        commonJustfile = pkgs.writeTextFile {
          name = "justfile";
          text =
            lib.concatStringsSep "\n"
              (lib.mapAttrsToList (name: recipe: recipe.outputs.justfile) config.just.recipes);
        };
      in
      ''
        ln -sf ${builtins.toString commonJustfile} ./${config.just.commonFileName}

        echo
        echo "https://devenv.sh (version ${version}): Fast, Declarative, Reproducible, and Composable Developer Environments ðŸ¦¾ðŸ¦¾"
        echo
        echo "Run 'just <recipe>' to get started"
        just --list
      '';
  };
}
