{"android.abis": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/android.nix"], "default": "[\n  \"arm64-v8a\"\n  \"x86_64\"\n]", "description": "The Android ABIs to install.\nBy default, the arm64-v8a and x86_64 ABIs are installed.\n", "loc": ["android", "abis"], "readOnly": false, "type": "list of string"}, "android.android-studio.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/android.nix"], "default": "false", "description": "Whether to enable the installation of Android Studio.", "example": "true", "loc": ["android", "android-studio", "enable"], "readOnly": false, "type": "boolean"}, "android.android-studio.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/android.nix"], "default": "pkgs.android-studio", "description": "The Android Studio package to use.\nBy default, the Android Studio package from nixpkgs is used.\n", "loc": ["android", "android-studio", "package"], "readOnly": false, "type": "package"}, "android.buildTools.version": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/android.nix"], "default": "[\n  \"34.0.0\"\n]", "description": "The version of the Android build tools to install.\nBy default, version 30.0.3 is installed or [ \"33.0.2\" \"30.0.3\" ] if flutter is enabled.\n", "loc": ["android", "buildTools", "version"], "readOnly": false, "type": "list of string"}, "android.cmake.version": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/android.nix"], "default": "[\n  \"3.22.1\"\n]", "description": "The CMake versions to install for Android.\nBy default, version 3.22.1 is installed.\n", "loc": ["android", "cmake", "version"], "readOnly": false, "type": "list of string"}, "android.cmdLineTools.version": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/android.nix"], "default": "\"11.0\"", "description": "The version of the Android command line tools to install.\nBy default, version 11.0 is installed or 8.0 if flutter is enabled.\n", "loc": ["android", "cmdLineTools", "version"], "readOnly": false, "type": "string"}, "android.emulator.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/android.nix"], "default": "true", "description": "Whether to include the Android Emulator.\nBy default, the emulator is included.\n", "loc": ["android", "emulator", "enable"], "readOnly": false, "type": "boolean"}, "android.emulator.version": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/android.nix"], "default": "\"34.1.9\"", "description": "The version of the Android Emulator to install.\nBy default, version 34.1.9 is installed.\n", "loc": ["android", "emulator", "version"], "readOnly": false, "type": "string"}, "android.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/android.nix"], "default": "false", "description": "Whether to enable tools for Android Development.", "example": "true", "loc": ["android", "enable"], "readOnly": false, "type": "boolean"}, "android.extraLicenses": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/android.nix"], "default": "[\n  \"android-sdk-preview-license\"\n  \"android-googletv-license\"\n  \"android-sdk-arm-dbt-license\"\n  \"google-gdk-license\"\n  \"intel-android-extra-license\"\n  \"intel-android-sysimage-license\"\n  \"mips-android-sysimage-license\"\n]", "description": "The additional Android licenses to accept.\nBy default, several standard licenses are accepted.\n", "loc": ["android", "extraLicenses"], "readOnly": false, "type": "list of string"}, "android.extras": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/android.nix"], "default": "[\n  \"extras;google;gcm\"\n]", "description": "The Android extras to install.\nBy default, the Google Cloud Messaging (GCM) extra is installed.\n", "loc": ["android", "extras"], "readOnly": false, "type": "list of string"}, "android.flutter.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/android.nix"], "default": "false", "description": "Whether to include the Flutter tools.\n", "loc": ["android", "flutter", "enable"], "readOnly": false, "type": "boolean"}, "android.flutter.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/android.nix"], "default": "pkgs.flutter", "description": "The Flutter package to use.\nBy default, the Flutter package from nixpkgs is used.\n", "loc": ["android", "flutter", "package"], "readOnly": false, "type": "package"}, "android.googleAPIs.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/android.nix"], "default": "true", "description": "Whether to use the Google APIs.\nBy default, the Google APIs are used.\n", "loc": ["android", "googleAPIs", "enable"], "readOnly": false, "type": "boolean"}, "android.googleTVAddOns.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/android.nix"], "default": "true", "description": "Whether to use the Google TV Add-Ons.\nBy default, the Google TV Add-Ons are used.\n", "loc": ["android", "googleTVAddOns", "enable"], "readOnly": false, "type": "boolean"}, "android.ndk.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/android.nix"], "default": "true", "description": "Whether to include the Android NDK (Native Development Kit).\nBy default, the NDK is included.\n", "loc": ["android", "ndk", "enable"], "readOnly": false, "type": "boolean"}, "android.ndk.version": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/android.nix"], "default": "[\n  \"26.1.10909125\"\n]", "description": "The version of the Android NDK (Native Development Kit) to install.\nBy default, version 26.1.10909125 is installed.\n", "loc": ["android", "ndk", "version"], "readOnly": false, "type": "list of string"}, "android.platformTools.version": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/android.nix"], "default": "\"34.0.5\"", "description": "The version of the Android platform tools to install.\nBy default, version 34.0.5 is installed or 34.0.5 if flutter is enabled.\n", "loc": ["android", "platformTools", "version"], "readOnly": false, "type": "string"}, "android.platforms.version": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/android.nix"], "default": "[\n  \"32\"\n  \"34\"\n]", "description": "The Android platform versions to install.\nBy default, versions 32 and 34 are installed.\n", "loc": ["android", "platforms", "version"], "readOnly": false, "type": "list of string"}, "android.reactNative.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/android.nix"], "default": "false", "description": "Whether to include the React Native tools.\n", "loc": ["android", "reactNative", "enable"], "readOnly": false, "type": "boolean"}, "android.sources.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/android.nix"], "default": "false", "description": "Whether to include the Android sources.\nBy default, the sources are not included.\n", "loc": ["android", "sources", "enable"], "readOnly": false, "type": "boolean"}, "android.systemImageTypes": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/android.nix"], "default": "[\n  \"google_apis_playstore\"\n]", "description": "The Android system image types to install.\nBy default, the google_apis_playstore system image is installed.\n", "loc": ["android", "systemImageTypes"], "readOnly": false, "type": "list of string"}, "android.systemImages.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/android.nix"], "default": "true", "description": "Whether to include the Android system images.\nBy default, the system images are included.\n", "loc": ["android", "systemImages", "enable"], "readOnly": false, "type": "boolean"}, "android.tools.version": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/android.nix"], "default": "\"26.1.1\"", "description": "The version of the Android SDK tools to install.\nBy default, version 26.1.1 is installed.\n", "loc": ["android", "tools", "version"], "readOnly": false, "type": "string"}, "aws-vault.awscliWrapper": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/aws-vault.nix"], "default": "pkgs", "description": "Attribute set of packages including awscli2", "loc": ["aws-vault", "awscliWrapper"], "readOnly": false, "type": "submodule"}, "aws-vault.awscliWrapper.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/aws-vault.nix"], "default": "false", "description": "Whether to enable Wraps awscli2 binary as `aws-vault exec <profile> -- aws <args>`.\n.", "example": "true", "loc": ["aws-vault", "awscliWrapper", "enable"], "readOnly": false, "type": "boolean"}, "aws-vault.awscliWrapper.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/aws-vault.nix"], "default": "pkgs.awscli2", "description": "The awscli2 package to use.", "loc": ["aws-vault", "awscliWrapper", "package"], "readOnly": false, "type": "package"}, "aws-vault.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/aws-vault.nix"], "default": "false", "description": "Whether to enable aws-vault integration.", "example": "true", "loc": ["aws-vault", "enable"], "readOnly": false, "type": "boolean"}, "aws-vault.opentofuWrapper": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/aws-vault.nix"], "default": "pkgs", "description": "Attribute set of packages including opentofu", "loc": ["aws-vault", "opentofuWrapper"], "readOnly": false, "type": "submodule"}, "aws-vault.opentofuWrapper.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/aws-vault.nix"], "default": "false", "description": "Whether to enable Wraps opentofu binary as `aws-vault exec <profile> -- opentofu <args>`.\n.", "example": "true", "loc": ["aws-vault", "opentofuWrapper", "enable"], "readOnly": false, "type": "boolean"}, "aws-vault.opentofuWrapper.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/aws-vault.nix"], "default": "pkgs.opentofu", "description": "The opentofu package to use.", "loc": ["aws-vault", "opentofuWrapper", "package"], "readOnly": false, "type": "package"}, "aws-vault.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/aws-vault.nix"], "default": "pkgs.aws-vault", "description": "The aws-vault package to use.", "loc": ["aws-vault", "package"], "readOnly": false, "type": "package"}, "aws-vault.profile": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/aws-vault.nix"], "description": "The profile name passed to `aws-vault exec`.\n", "loc": ["aws-vault", "profile"], "readOnly": false, "type": "string"}, "aws-vault.terraformWrapper": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/aws-vault.nix"], "default": "pkgs", "description": "Attribute set of packages including terraform", "loc": ["aws-vault", "terraformWrapper"], "readOnly": false, "type": "submodule"}, "aws-vault.terraformWrapper.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/aws-vault.nix"], "default": "false", "description": "Whether to enable Wraps terraform binary as `aws-vault exec <profile> -- terraform <args>`.\n.", "example": "true", "loc": ["aws-vault", "terraformWrapper", "enable"], "readOnly": false, "type": "boolean"}, "aws-vault.terraformWrapper.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/aws-vault.nix"], "default": "pkgs.terraform", "description": "The terraform package to use.", "loc": ["aws-vault", "terraformWrapper", "package"], "readOnly": false, "type": "package"}, "cachix.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/cachix.nix"], "default": "true", "description": "Whether to enable Cachix integration.", "loc": ["cachix", "enable"], "readOnly": false, "type": "boolean"}, "cachix.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/cachix.nix"], "default": "pkgs.cachix", "description": "The cachix package to use.", "example": "inputs.devenv.inputs.cachix.packages.${pkgs.stdenv.system}.cachix", "loc": ["cachix", "package"], "readOnly": false, "type": "package"}, "cachix.pull": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/cachix.nix"], "default": "[ ]", "description": "What caches to pull from.", "loc": ["cachix", "pull"], "readOnly": false, "type": "list of string"}, "cachix.push": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/cachix.nix"], "default": "null", "description": "What cache to push to. Automatically also adds it to the list of caches to pull from.", "loc": ["cachix", "push"], "readOnly": false, "type": "null or string"}, "certificates": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/mkcert.nix"], "default": "[ ]", "description": "List of domains to generate certificates for.", "example": "[\n  \"example.com\"\n  \"*.example.com\"\n]", "loc": ["certificates"], "readOnly": false, "type": "list of string"}, "container.isBuilding": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/containers.nix"], "default": "false", "description": "Set to true when the environment is building a container.", "loc": ["container", "isBuilding"], "readOnly": false, "type": "boolean"}, "containers": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/containers.nix"], "default": "{ }", "description": "Container specifications that can be built, copied and ran using `devenv container`.", "loc": ["containers"], "readOnly": false, "type": "attribute set of (submodule)"}, "containers.<name>.copyToRoot": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/containers.nix"], "default": "self", "description": "Add a path to the container. Defaults to the whole git repo.", "loc": ["containers", "<name>", "copyToRoot"], "readOnly": false, "type": "path or list of path"}, "containers.<name>.defaultCopyArgs": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/containers.nix"], "default": "[ ]", "description": "Default arguments to pass to `skopeo copy`.\nYou can override them by passing arguments to the script.\n", "loc": ["containers", "<name>", "defaultCopyArgs"], "readOnly": false, "type": "list of string"}, "containers.<name>.enableLayerDeduplication": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/containers.nix"], "default": "true", "description": "Whether to enable layer deduplication using the approach described at https://blog.eigenvalue.net/2023-nix2container-everything-once/\n.", "example": "true", "loc": ["containers", "<name>", "enableLayerDeduplication"], "readOnly": false, "type": "boolean"}, "containers.<name>.entrypoint": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/containers.nix"], "default": "[ entrypoint ]", "description": "Entrypoint of the container.", "loc": ["containers", "<name>", "entrypoint"], "readOnly": false, "type": "list of anything"}, "containers.<name>.isBuilding": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/containers.nix"], "default": "false", "description": "Set to true when the environment is building this container.", "loc": ["containers", "<name>", "isBuilding"], "readOnly": false, "type": "boolean"}, "containers.<name>.layers": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/containers.nix"], "default": "[ ]", "description": "The layers to create.", "loc": ["containers", "<name>", "layers"], "readOnly": false, "type": "list of (submodule)"}, "containers.<name>.layers.*.copyToRoot": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/containers.nix"], "default": "[ ]", "description": "A list of derivations copied to the image root directory.\n\nStore path prefixes ``/nix/store/hash-path`` are removed in order to relocate them to the image ``/``.\n", "loc": ["containers", "<name>", "layers", "*", "copyToRoot"], "readOnly": false, "type": "list of package"}, "containers.<name>.layers.*.deps": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/containers.nix"], "default": "[ ]", "description": "A list of store paths to include in the layer.", "loc": ["containers", "<name>", "layers", "*", "deps"], "readOnly": false, "type": "list of package"}, "containers.<name>.layers.*.ignore": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/containers.nix"], "default": "null", "description": "A store path to ignore when building the layer. This is mainly useful to ignore the configuration file from the container layer.\n", "loc": ["containers", "<name>", "layers", "*", "ignore"], "readOnly": false, "type": "null or path in the Nix store"}, "containers.<name>.layers.*.maxLayers": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/containers.nix"], "default": "1", "description": "The maximum number of layers to create.", "loc": ["containers", "<name>", "layers", "*", "maxLayers"], "readOnly": false, "type": "signed integer"}, "containers.<name>.layers.*.perms": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/containers.nix"], "default": "[ ]", "description": "A list of file permissions which are set when the tar layer is created.\n\nThese permissions are not written to the Nix store.\n", "loc": ["containers", "<name>", "layers", "*", "perms"], "readOnly": false, "type": "list of (submodule)"}, "containers.<name>.layers.*.perms.*.gid": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/containers.nix"], "default": "null", "description": "The group ID to apply to all of the files matched by the ``regex``.", "example": "\"1000\"", "loc": ["containers", "<name>", "layers", "*", "perms", "*", "gid"], "readOnly": false, "type": "null or signed integer"}, "containers.<name>.layers.*.perms.*.gname": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/containers.nix"], "default": "null", "description": "The group name to apply to all of the files matched by the ``regex``.", "example": "\"root\"", "loc": ["containers", "<name>", "layers", "*", "perms", "*", "gname"], "readOnly": false, "type": "null or string"}, "containers.<name>.layers.*.perms.*.mode": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/containers.nix"], "default": "null", "description": "The numeric permissions mode to apply to all of the files matched by the ``regex``.", "example": "\"644\"", "loc": ["containers", "<name>", "layers", "*", "perms", "*", "mode"], "readOnly": false, "type": "null or string"}, "containers.<name>.layers.*.perms.*.path": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/containers.nix"], "description": "A store path.", "loc": ["containers", "<name>", "layers", "*", "perms", "*", "path"], "readOnly": false, "type": "path in the Nix store"}, "containers.<name>.layers.*.perms.*.regex": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/containers.nix"], "default": "null", "description": "A regex pattern to select files or directories to apply the ``mode`` to.", "example": "\".*\"", "loc": ["containers", "<name>", "layers", "*", "perms", "*", "regex"], "readOnly": false, "type": "null or string"}, "containers.<name>.layers.*.perms.*.uid": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/containers.nix"], "default": "null", "description": "The user ID to apply to all of the files matched by the ``regex``.", "example": "\"1000\"", "loc": ["containers", "<name>", "layers", "*", "perms", "*", "uid"], "readOnly": false, "type": "null or signed integer"}, "containers.<name>.layers.*.perms.*.uname": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/containers.nix"], "default": "null", "description": "The user name to apply to all of the files matched by the ``regex``.", "example": "\"root\"", "loc": ["containers", "<name>", "layers", "*", "perms", "*", "uname"], "readOnly": false, "type": "null or string"}, "containers.<name>.layers.*.reproducible": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/containers.nix"], "default": "true", "description": "Whether the layer should be reproducible.", "loc": ["containers", "<name>", "layers", "*", "reproducible"], "readOnly": false, "type": "boolean"}, "containers.<name>.maxLayers": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/containers.nix"], "default": "1", "description": "Maximum number of container layers created.", "loc": ["containers", "<name>", "maxLayers"], "readOnly": false, "type": "null or signed integer"}, "containers.<name>.name": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/containers.nix"], "default": "\"top-level name or containers.mycontainer.name\"", "description": "Name of the container.", "loc": ["containers", "<name>", "name"], "readOnly": false, "type": "null or string"}, "containers.<name>.registry": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/containers.nix"], "default": "\"docker-daemon:\"", "description": "Registry to push the container to.", "loc": ["containers", "<name>", "registry"], "readOnly": false, "type": "null or string"}, "containers.<name>.startupCommand": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/containers.nix"], "default": "null", "description": "Command to run in the container.", "loc": ["containers", "<name>", "startupCommand"], "readOnly": false, "type": "null or string or package"}, "containers.<name>.version": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/containers.nix"], "default": "\"latest\"", "description": "Version/tag of the container.", "loc": ["containers", "<name>", "version"], "readOnly": false, "type": "null or string"}, "delta.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/delta.nix"], "default": "false", "description": "Integrate delta into git: https://dandavison.github.io/delta/.", "loc": ["delta", "enable"], "readOnly": false, "type": "boolean"}, "devcontainer.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/devcontainer.nix"], "default": "false", "description": "Whether to enable generation .devcontainer.json for devenv integration.", "example": "true", "loc": ["devcontainer", "enable"], "readOnly": false, "type": "boolean"}, "devcontainer.settings": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/devcontainer.nix"], "default": "{ }", "description": "Devcontainer settings.\n", "loc": ["devcontainer", "settings"], "readOnly": false, "type": "JSON value"}, "devcontainer.settings.customizations.vscode.extensions": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/devcontainer.nix"], "default": "[\n  \"mkhl.direnv\"\n]", "description": "List of preinstalled VSCode extensions.\n", "loc": ["devcontainer", "settings", "customizations", "vscode", "extensions"], "readOnly": false, "type": "list of string"}, "devcontainer.settings.image": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/devcontainer.nix"], "default": "\"ghcr.io/cachix/devenv:latest\"", "description": "The name of an image in a container registry.\n", "loc": ["devcontainer", "settings", "image"], "readOnly": false, "type": "string"}, "devcontainer.settings.overrideCommand": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/devcontainer.nix"], "default": "false", "description": "Override the default command.\n", "loc": ["devcontainer", "settings", "overrideCommand"], "readOnly": false, "type": "anything"}, "devcontainer.settings.updateContentCommand": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/devcontainer.nix"], "default": "\"devenv test\"", "description": "Command to run after container creation.\n", "loc": ["devcontainer", "settings", "updateContentCommand"], "readOnly": false, "type": "anything"}, "devenv.debug": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/debug.nix"], "default": "false", "description": "Whether to enable debug mode of devenv enterShell script.", "example": "true", "loc": ["devenv", "debug"], "readOnly": false, "type": "boolean"}, "devenv.flakesIntegration": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/update-check.nix"], "default": "`true` when devenv is invoked via the flake integration; `false` otherwise.", "description": "Tells if devenv is being imported by a flake.nix file\n", "loc": ["devenv", "flakesIntegration"], "readOnly": false, "type": "boolean"}, "devenv.isTesting": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/tests.nix"], "default": "false", "description": "Whether the environment is being used for testing.", "loc": ["devenv", "isTesting"], "readOnly": false, "type": "boolean"}, "devenv.latestVersion": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/update-check.nix"], "default": "\"1.3.1\"", "description": "The latest version of devenv.\n", "loc": ["devenv", "latestVersion"], "readOnly": false, "type": "string"}, "devenv.warnOnNewVersion": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/update-check.nix"], "default": "true", "description": "Whether to warn when a new version of devenv is available.\n", "loc": ["devenv", "warnOnNewVersion"], "readOnly": false, "type": "boolean"}, "difftastic.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/difftastic.nix"], "default": "false", "description": "Integrate difftastic into git: https://difftastic.wilfred.me.uk/.", "loc": ["difftastic", "enable"], "readOnly": false, "type": "boolean"}, "dotenv.disableHint": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/dotenv.nix"], "default": "false", "description": "Disable the hint that are printed when the dotenv module is not enabled, but .env is present.", "loc": ["dotenv", "disableHint"], "readOnly": false, "type": "boolean"}, "dotenv.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/dotenv.nix"], "default": "false", "description": "Whether to enable .env integration, doesn't support comments or multiline values..", "example": "true", "loc": ["dotenv", "enable"], "readOnly": false, "type": "boolean"}, "dotenv.filename": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/dotenv.nix"], "default": "\".env\"", "description": "The name of the dotenv file to load, or a list of dotenv files to load in order of precedence.", "loc": ["dotenv", "filename"], "readOnly": false, "type": "string or list of string"}, "enterShell": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/top-level.nix"], "default": "\"\"", "description": "Bash code to execute when entering the shell.", "loc": ["enterShell"], "readOnly": false, "type": "strings concatenated with \"\\n\""}, "enterTest": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/tests.nix"], "description": "Bash code to execute to run the test.", "loc": ["enterTest"], "readOnly": false, "type": "strings concatenated with \"\\n\""}, "env": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/top-level.nix"], "default": "{ }", "description": "Environment variables to be exposed inside the developer environment.", "loc": ["env"], "readOnly": false, "type": "lazy attribute set of anything"}, "files": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/files.nix"], "default": "{ }", "description": "A set of files that will be linked into devenv root.", "loc": ["files"], "readOnly": false, "type": "attribute set of (submodule)"}, "files.<name>.executable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/files.nix"], "default": "false", "description": "Make the file executable", "loc": ["files", "<name>", "executable"], "readOnly": false, "type": "boolean"}, "files.<name>.ini": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/files.nix"], "default": "null", "description": "ini contents", "loc": ["files", "<name>", "ini"], "readOnly": false, "type": "null or (attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string)))"}, "files.<name>.json": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/files.nix"], "default": "null", "description": "json contents", "loc": ["files", "<name>", "json"], "readOnly": false, "type": "null or JSON value"}, "files.<name>.text": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/files.nix"], "default": "null", "description": "text contents", "loc": ["files", "<name>", "text"], "readOnly": false, "type": "null or string"}, "files.<name>.toml": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/files.nix"], "default": "null", "description": "toml contents", "loc": ["files", "<name>", "toml"], "readOnly": false, "type": "null or TOML value"}, "files.<name>.yaml": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/files.nix"], "default": "null", "description": "yaml contents", "loc": ["files", "<name>", "yaml"], "readOnly": false, "type": "null or YAML value"}, "git-hooks": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/git-hooks.nix"], "default": "{ }", "description": "Integration with https://github.com/cachix/git-hooks.nix", "loc": ["git-hooks"], "readOnly": false, "type": "submodule"}, "git-hooks.addGcRoot": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/pre-commit.nix"], "default": "true", "description": "Whether to add the generated pre-commit-config.yaml to the garbage collector roots.\nThis prevents Nix from garbage-collecting the tools used by hooks.\n", "loc": ["git-hooks", "addGcRoot"], "readOnly": false, "type": "boolean"}, "git-hooks.default_stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/pre-commit.nix"], "default": "[\n  \"pre-commit\"\n]", "description": "A configuration wide option for the stages property.\nInstalls hooks to the defined stages.\nSee [https://pre-commit.com/#confining-hooks-to-run-at-certain-stages](https://pre-commit.com/#confining-hooks-to-run-at-certain-stages).\n", "loc": ["git-hooks", "default_stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.enabledPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/pre-commit.nix"], "default": "[ ]", "description": "All packages provided by hooks that are enabled.\n\nUseful for including into the developer environment.\n", "loc": ["git-hooks", "enabledPackages"], "readOnly": false, "type": "list of unspecified value"}, "git-hooks.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/pre-commit.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.gitPackage": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/pre-commit.nix"], "default": "pkgs.gitMinimal\n", "description": "The `git` package to use.\n", "loc": ["git-hooks", "gitPackage"], "readOnly": false, "type": "package"}, "git-hooks.hooks": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix", "/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/pre-commit.nix"], "default": "{ }", "description": "The hook definitions.\n\nYou can both specify your own hooks here and you can enable predefined hooks.\n\nExample of enabling a predefined hook:\n\n```nix\nhooks.nixpkgs-fmt.enable = true;\n```\n\nExample of a custom hook:\n\n```nix\nhooks.my-tool = {\n  enable = true;\n  name = \"my-tool\";\n  description = \"Run MyTool on all files in the project\";\n  files = \"\\\\.mtl$\";\n  entry = \"${pkgs.my-tool}/bin/mytoolctl\";\n};\n```\n\nThe predefined hooks are:\n\n**`actionlint`**\n\nStatic checker for GitHub Actions workflow files\n\n\n**`alejandra`**\n\nThe Uncompromising Nix Code Formatter\n\n\n**`annex`**\n\nRuns the git-annex hook for large file support\n\n\n**`ansible-lint`**\n\nAnsible linter\n\n\n**`autoflake`**\n\nRemove unused imports and variables from Python code\n\n\n**`bats`**\n\nRun bash unit tests\n\n\n**`beautysh`**\n\nFormat shell files\n\n\n**`biome`**\n\nA toolchain for web projects, aimed to provide functionalities to maintain them\n\n\n**`black`**\n\nThe uncompromising Python code formatter\n\n\n**`cabal-fmt`**\n\nFormat Cabal files\n\n\n**`cabal-gild`**\n\nFormat Cabal files\n\n\n**`cabal2nix`**\n\nRun `cabal2nix` on all `*.cabal` files to generate corresponding `default.nix` files\n\n\n**`cargo-check`**\n\nCheck the cargo package for errors\n\n\n**`check-added-large-files`**\n\nPrevent very large files to be committed (e.g. binaries).\n\n\n**`check-builtin-literals`**\n\nRequire literal syntax when initializing empty or zero builtin types in Python.\n\n\n**`check-case-conflicts`**\n\nCheck for files that would conflict in case-insensitive filesystems.\n\n\n**`check-docstring-first`**\n\nCheck that all docstrings appear above the code.\n\n\n**`check-executables-have-shebangs`**\n\nEnsure that all non-binary executables have shebangs.\n\n\n**`check-json`**\n\nCheck syntax of JSON files.\n\n\n**`check-merge-conflicts`**\n\nCheck for files that contain merge conflict strings.\n\n\n**`check-python`**\n\nCheck syntax of Python file by parsing Python abstract syntax tree.\n\n\n**`check-shebang-scripts-are-executable`**\n\nEnsure that all (non-binary) files with a shebang are executable.\n\n\n**`check-symlinks`**\n\nFind broken symlinks.\n\n\n**`check-toml`**\n\nCheck syntax of TOML files.\n\n\n**`check-vcs-permalinks`**\n\nEnsure that links to VCS websites are permalinks.\n\n\n**`check-xml`**\n\nCheck syntax of XML files.\n\n\n**`check-yaml`**\n\nCheck syntax of YAML files.\n\n\n**`checkmake`**\n\nExperimental linter/analyzer for Makefiles\n\n\n**`chktex`**\n\nLaTeX semantic checker\n\n\n**`clang-format`**\n\nFormat your code using `clang-format`.\n\n\n**`clang-tidy`**\n\nStatic analyzer for C++ code.\n\n\n**`clippy`**\n\nLint Rust code.\n\n\n**`cljfmt`**\n\nA tool for formatting Clojure code.\n\n\n**`cmake-format`**\n\nA tool for formatting CMake-files.\n\n\n**`commitizen`**\n\nCheck whether the current commit message follows committing rules.\n\n\n\n**`conform`**\n\nPolicy enforcement for commits.\n\n\n**`convco`**\n\n\n\n\n**`credo`**\n\nRuns a static code analysis using Credo\n\n\n**`crystal`**\n\nA tool that automatically formats Crystal source code\n\n\n**`cspell`**\n\nA Spell Checker for Code\n\n\n**`deadnix`**\n\nScan Nix files for dead code (unused variable bindings).\n\n\n**`denofmt`**\n\nAuto-format JavaScript, TypeScript, Markdown, and JSON files.\n\n\n**`denolint`**\n\nLint JavaScript/TypeScript source code.\n\n\n**`detect-aws-credentials`**\n\nDetect AWS credentials from the AWS cli credentials file.\n\n\n**`detect-private-keys`**\n\nDetect the presence of private keys.\n\n\n**`dhall-format`**\n\nDhall code formatter.\n\n\n**`dialyzer`**\n\nRuns a static code analysis using Dialyzer\n\n\n**`dune-fmt`**\n\nRuns Dune's formatters on the code tree.\n\n\n**`dune-opam-sync`**\n\nCheck that Dune-generated OPAM files are in sync.\n\n\n**`eclint`**\n\nEditorConfig linter written in Go.\n\n\n**`editorconfig-checker`**\n\nVerify that the files are in harmony with the `.editorconfig`.\n\n\n**`elm-format`**\n\nFormat Elm files.\n\n\n**`elm-review`**\n\nAnalyzes Elm projects, to help find mistakes before your users find them.\n\n\n**`elm-test`**\n\nRun unit tests and fuzz tests for Elm code.\n\n\n**`end-of-file-fixer`**\n\nEnsures that a file is either empty, or ends with a single newline.\n\n\n**`eslint`**\n\nFind and fix problems in your JavaScript code.\n\n\n**`fix-byte-order-marker`**\n\nRemove UTF-8 byte order marker.\n\n\n**`fix-encoding-pragma`**\n\nAdds # -*- coding: utf-8 -*- to the top of Python files.'\n\n\n**`flake-checker`**\n\nRun health checks on your flake-powered Nix projects.\n\n\n**`flake8`**\n\nCheck the style and quality of Python files.\n\n\n**`flynt`**\n\nCLI tool to convert a python project's %-formatted strings to f-strings.\n\n\n**`forbid-new-submodules`**\n\nPrevent addition of new Git submodules.\n\n\n**`fourmolu`**\n\nHaskell code prettifier.\n\n\n**`fprettify`**\n\nAuto-formatter for modern Fortran code.\n\n\n**`gofmt`**\n\nA tool that automatically formats Go source code\n\n\n**`golangci-lint`**\n\nFast linters runner for Go.\n\n\n**`golines`**\n\nA golang formatter that fixes long lines\n\n\n**`gotest`**\n\nRun go tests\n\n\n**`govet`**\n\nChecks correctness of Go programs.\n\n\n**`gptcommit`**\n\nGenerate a commit message using GPT3.\n\n\n**`hadolint`**\n\nDockerfile linter, validate inline bash.\n\n\n**`headache`**\n\nLightweight tool for managing headers in source code files.\n\n\n**`hindent`**\n\nHaskell code prettifier.\n\n\n**`hlint`**\n\nHLint gives suggestions on how to improve your source code.\n\n\n**`hpack`**\n\n`hpack` converts package definitions in the hpack format (`package.yaml`) to Cabal files.\n\n\n**`html-tidy`**\n\nHTML linter.\n\n\n**`hunspell`**\n\nSpell checker and morphological analyzer.\n\n\n**`isort`**\n\nA Python utility / library to sort imports.\n\n\n**`juliaformatter`**\n\nRun JuliaFormatter.jl against Julia source files\n\n\n**`lacheck`**\n\nA consistency checker for LaTeX documents.\n\n\n**`latexindent`**\n\nPerl script to add indentation to LaTeX files.\n\n\n**`lua-ls`**\n\nUses the lua-language-server CLI to statically type-check and lint Lua code.\n\n\n**`luacheck`**\n\nA tool for linting and static analysis of Lua code.\n\n\n**`lychee`**\n\nA fast, async, stream-based link checker that finds broken hyperlinks and mail addresses inside Markdown, HTML, reStructuredText, or any other text file or website.\n\n\n**`markdownlint`**\n\nStyle checker and linter for markdown files.\n\n\n**`mdl`**\n\nA tool to check markdown files and flag style issues.\n\n\n**`mdsh`**\n\nMarkdown shell pre-processor.\n\n\n**`mix-format`**\n\nRuns the built-in Elixir syntax formatter\n\n\n**`mix-test`**\n\nRuns the built-in Elixir test framework\n\n\n**`mixed-line-endings`**\n\nResolve mixed line endings.\n\n\n**`mkdocs-linkcheck`**\n\nValidate links associated with markdown-based, statically generated websites.\n\n\n**`mypy`**\n\nStatic type checker for Python\n\n\n**`name-tests-test`**\n\nVerify that Python test files are named correctly.\n\n\n**`nil`**\n\nIncremental analysis assistant for writing in Nix.\n\n\n**`nixfmt`**\n\nDeprecated Nix code prettifier. Use nixfmt-classic.\n\n\n**`nixfmt-classic`**\n\nNix code prettifier (classic).\n\n\n**`nixfmt-rfc-style`**\n\nNix code prettifier (RFC 166 style).\n\n\n**`nixpkgs-fmt`**\n\nNix code prettifier.\n\n\n**`no-commit-to-branch`**\n\nDisallow committing to certain branch/branches.\n\n\n**`ocp-indent`**\n\nA tool to indent OCaml code.\n\n\n**`opam-lint`**\n\nOCaml package manager configuration checker.\n\n\n**`ormolu`**\n\nHaskell code prettifier.\n\n\n**`php-cs-fixer`**\n\nLint PHP files.\n\n\n**`phpcbf`**\n\nLint PHP files.\n\n\n**`phpcs`**\n\nLint PHP files.\n\n\n**`phpstan`**\n\nStatic Analysis of PHP files.\n\n\n**`poetry-check`**\n\nCheck the Poetry config for errors\n\n\n**`poetry-lock`**\n\nUpdate the Poetry lock file\n\n\n**`pre-commit-hook-ensure-sops`**\n\n\n\n\n**`prettier`**\n\nOpinionated multi-language code formatter.\n\n\n**`pretty-format-json`**\n\nFormats JSON files.\n\n\n**`psalm`**\n\nStatic Analysis of PHP files.\n\n\n**`purs-tidy`**\n\nFormat purescript files.\n\n\n**`purty`**\n\nFormat purescript files.\n\n\n**`pylint`**\n\nLint Python files.\n\n\n**`pyright`**\n\nStatic type checker for Python\n\n\n**`python-debug-statements`**\n\nCheck for debugger imports and py37+ `breakpoint()` calls in python source.\n\n\n**`pyupgrade`**\n\nAutomatically upgrade syntax for newer versions.\n\n\n**`reuse`**\n\nreuse is a tool for compliance with the REUSE recommendations.\n\n\n**`revive`**\n\nA linter for Go source code.\n\n\n**`ripsecrets`**\n\nPrevent committing secret keys into your source code\n\n\n**`rome`**\n\n\n\n\n**`ruff`**\n\nAn extremely fast Python linter, written in Rust.\n\n\n**`ruff-format`**\n\nAn extremely fast Python code formatter, written in Rust.\n\n\n**`rustfmt`**\n\nFormat Rust code.\n\n\n**`shellcheck`**\n\nFormat shell files.\n\n\n**`shfmt`**\n\nFormat shell files.\n\n\n**`single-quoted-strings`**\n\nReplace double quoted strings with single quoted strings.\n\n\n**`sort-file-contents`**\n\nSort the lines in specified files (defaults to alphabetical).\n\n\n**`sort-requirements-txt`**\n\nSort requirements in requirements.txt and constraints.txt files.\n\n\n**`sort-simple-yaml`**\n\nSort simple YAML files which consist only of top-level keys, preserving comments and blocks.\n\n\n**`staticcheck`**\n\nState of the art linter for the Go programming language\n\n\n**`statix`**\n\nLints and suggestions for the Nix programming language.\n\n\n**`stylish-haskell`**\n\nA simple Haskell code prettifier\n\n\n**`stylua`**\n\nAn Opinionated Lua Code Formatter.\n\n\n**`tagref`**\n\nHave tagref check all references and tags.\n\n\n\n**`taplo`**\n\nFormat TOML files with taplo fmt\n\n\n**`terraform-format`**\n\nFormat terraform (`.tf`) files.\n\n\n**`terraform-validate`**\n\nValidates terraform configuration files (`.tf`).\n\n\n**`tflint`**\n\nA Pluggable Terraform Linter.\n\n\n**`topiary`**\n\nA universal formatter engine within the Tree-sitter ecosystem, with support for many languages.\n\n\n**`treefmt`**\n\nOne CLI to format the code tree.\n\n\n**`trim-trailing-whitespace`**\n\nTrim trailing whitespace.\n\n\n**`trufflehog`**\n\nSecrets scanner\n\n\n**`typos`**\n\nSource code spell checker\n\n\n**`typstfmt`**\n\nformat typst\n\n\n**`typstyle`**\n\nBeautiful and reliable typst code formatter\n\n\n**`vale`**\n\nA markup-aware linter for prose built with speed and extensibility in mind.\n\n\n**`yamlfmt`**\n\nFormatter for YAML files.\n\n\n**`yamllint`**\n\nLinter for YAML files.\n\n\n**`zprint`**\n\nBeautifully format Clojure and Clojurescript source code and s-expressions.\n\n\n", "loc": ["git-hooks", "hooks"], "readOnly": false, "type": "attribute set of (submodule)"}, "git-hooks.hooks.<name>.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "<name>", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.<name>.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "<name>", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.<name>.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "<name>", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.<name>.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "<name>", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.<name>.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "<name>", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.<name>.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "<name>", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.<name>.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "<name>", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.<name>.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "<name>", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.<name>.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "<name>", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.<name>.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "<name>", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.<name>.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "<name>", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.<name>.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "<name>", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.<name>.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "<name>", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.<name>.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "<name>", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.<name>.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "<name>", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.<name>.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "<name>", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.<name>.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "<name>", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.<name>.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "<name>", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.<name>.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "<name>", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.<name>.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "<name>", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.<name>.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "<name>", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.<name>.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "<name>", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.<name>.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "<name>", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.alejandra": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "alejandra hook", "loc": ["git-hooks", "hooks", "alejandra"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.alejandra.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "alejandra", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.alejandra.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "alejandra", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.alejandra.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "alejandra", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.alejandra.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "alejandra", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.alejandra.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "alejandra", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.alejandra.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "alejandra", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.alejandra.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "alejandra", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.alejandra.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "alejandra", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.alejandra.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "alejandra", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.alejandra.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "alejandra", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.alejandra.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "alejandra", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.alejandra.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "alejandra", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.alejandra.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "alejandra", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.alejandra.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "alejandra", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.alejandra.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "alejandra", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.alejandra.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "alejandra", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.alejandra.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "alejandra", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.alejandra.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "alejandra", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.alejandra.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "alejandra", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.alejandra.settings.check": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Check if the input is already formatted and disable writing in-place the modified content", "example": "true", "loc": ["git-hooks", "hooks", "alejandra", "settings", "check"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.alejandra.settings.exclude": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "Files or directories to exclude from formatting.", "example": "[\n  \"flake.nix\"\n  \"./templates\"\n]", "loc": ["git-hooks", "hooks", "alejandra", "settings", "exclude"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.alejandra.settings.threads": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "null", "description": "Number of formatting threads to spawn.", "example": "8", "loc": ["git-hooks", "hooks", "alejandra", "settings", "threads"], "readOnly": false, "type": "null or signed integer"}, "git-hooks.hooks.alejandra.settings.verbosity": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"normal\"", "description": "Whether informational messages or all messages should be hidden or not.", "example": "\"quiet\"", "loc": ["git-hooks", "hooks", "alejandra", "settings", "verbosity"], "readOnly": false, "type": "one of \"normal\", \"quiet\", \"silent\""}, "git-hooks.hooks.alejandra.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "alejandra", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.alejandra.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "alejandra", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.alejandra.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "alejandra", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.alejandra.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "alejandra", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.ansible-lint": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "ansible-lint hook", "loc": ["git-hooks", "hooks", "ansible-lint"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.ansible-lint.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "ansible-lint", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.ansible-lint.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "ansible-lint", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.ansible-lint.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "ansible-lint", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.ansible-lint.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "ansible-lint", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.ansible-lint.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "ansible-lint", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.ansible-lint.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "ansible-lint", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.ansible-lint.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "ansible-lint", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.ansible-lint.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "ansible-lint", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.ansible-lint.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "ansible-lint", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.ansible-lint.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "ansible-lint", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.ansible-lint.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "ansible-lint", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.ansible-lint.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "ansible-lint", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.ansible-lint.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "ansible-lint", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.ansible-lint.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "ansible-lint", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.ansible-lint.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "ansible-lint", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.ansible-lint.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "ansible-lint", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.ansible-lint.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "ansible-lint", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.ansible-lint.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "ansible-lint", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.ansible-lint.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "ansible-lint", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.ansible-lint.settings.configPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Path to the YAML configuration file.", "loc": ["git-hooks", "hooks", "ansible-lint", "settings", "configPath"], "readOnly": false, "type": "string"}, "git-hooks.hooks.ansible-lint.settings.subdir": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Path to the Ansible subdirectory.", "loc": ["git-hooks", "hooks", "ansible-lint", "settings", "subdir"], "readOnly": false, "type": "string"}, "git-hooks.hooks.ansible-lint.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "ansible-lint", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.ansible-lint.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "ansible-lint", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.ansible-lint.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "ansible-lint", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.ansible-lint.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "ansible-lint", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.autoflake": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "autoflake hook", "loc": ["git-hooks", "hooks", "autoflake"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.autoflake.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "autoflake", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.autoflake.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "autoflake", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.autoflake.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "autoflake", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.autoflake.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "autoflake", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.autoflake.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "autoflake", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.autoflake.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "autoflake", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.autoflake.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "autoflake", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.autoflake.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "autoflake", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.autoflake.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "autoflake", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.autoflake.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "autoflake", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.autoflake.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "autoflake", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.autoflake.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "autoflake", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.autoflake.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "autoflake", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.autoflake.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "autoflake", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.autoflake.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "autoflake", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.autoflake.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "autoflake", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.autoflake.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "autoflake", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.autoflake.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "autoflake", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.autoflake.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "autoflake", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.autoflake.settings.binPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"${tools.autoflake}/bin/autoflake\"\n", "description": "Path to autoflake binary.", "loc": ["git-hooks", "hooks", "autoflake", "settings", "binPath"], "readOnly": false, "type": "null or string"}, "git-hooks.hooks.autoflake.settings.flags": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"--in-place --expand-star-imports --remove-duplicate-keys --remove-unused-variables\"", "description": "Flags passed to autoflake.", "loc": ["git-hooks", "hooks", "autoflake", "settings", "flags"], "readOnly": false, "type": "string"}, "git-hooks.hooks.autoflake.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "autoflake", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.autoflake.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "autoflake", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.autoflake.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "autoflake", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.autoflake.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "autoflake", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.biome": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "biome hook", "loc": ["git-hooks", "hooks", "biome"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.biome.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "biome", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.biome.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "biome", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.biome.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "biome", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.biome.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "biome", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.biome.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "biome", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.biome.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "biome", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.biome.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "biome", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.biome.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "biome", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.biome.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "biome", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.biome.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "biome", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.biome.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "biome", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.biome.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "biome", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.biome.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "biome", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.biome.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "biome", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.biome.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "biome", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.biome.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "biome", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.biome.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "biome", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.biome.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "biome", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.biome.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "biome", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.biome.settings.binPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "null", "description": "`biome` binary path. E.g. if you want to use the `biome` in `node_modules`, use `./node_modules/.bin/biome`.", "loc": ["git-hooks", "hooks", "biome", "settings", "binPath"], "readOnly": false, "type": "null or path"}, "git-hooks.hooks.biome.settings.configPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Path to the configuration JSON file", "loc": ["git-hooks", "hooks", "biome", "settings", "configPath"], "readOnly": false, "type": "string"}, "git-hooks.hooks.biome.settings.write": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "true", "description": "Whether to edit files inplace.", "loc": ["git-hooks", "hooks", "biome", "settings", "write"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.biome.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "biome", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.biome.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "biome", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.biome.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "biome", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.biome.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "biome", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.black": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "black hook", "loc": ["git-hooks", "hooks", "black"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.black.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "black", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.black.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "black", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.black.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "black", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.black.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "black", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.black.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "black", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.black.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "black", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.black.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "black", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.black.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "black", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.black.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "black", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.black.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "black", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.black.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "black", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.black.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "black", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.black.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "black", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.black.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "black", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.black.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "black", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.black.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "black", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.black.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "black", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.black.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "black", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.black.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "black", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.black.settings.flags": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Flags passed to black. See all available [here](https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#command-line-options).", "example": "\"--skip-magic-trailing-comma\"", "loc": ["git-hooks", "hooks", "black", "settings", "flags"], "readOnly": false, "type": "string"}, "git-hooks.hooks.black.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "black", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.black.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "black", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.black.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "black", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.black.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "black", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.clippy": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "clippy hook", "loc": ["git-hooks", "hooks", "clippy"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.clippy.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "clippy", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.clippy.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "clippy", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.clippy.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "clippy", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.clippy.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "clippy", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.clippy.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "clippy", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.clippy.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "clippy", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.clippy.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "clippy", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.clippy.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "clippy", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.clippy.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "clippy", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.clippy.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "clippy", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.clippy.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "clippy", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.clippy.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "clippy", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.clippy.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "clippy", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.clippy.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "clippy", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.clippy.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "clippy", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.clippy.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "clippy", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.clippy.packageOverrides.cargo": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "The cargo package to use", "loc": ["git-hooks", "hooks", "clippy", "packageOverrides", "cargo"], "readOnly": false, "type": "package"}, "git-hooks.hooks.clippy.packageOverrides.clippy": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "The clippy package to use", "loc": ["git-hooks", "hooks", "clippy", "packageOverrides", "clippy"], "readOnly": false, "type": "package"}, "git-hooks.hooks.clippy.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "clippy", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.clippy.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "clippy", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.clippy.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "clippy", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.clippy.settings.allFeatures": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Run clippy with --all-features", "loc": ["git-hooks", "hooks", "clippy", "settings", "allFeatures"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.clippy.settings.denyWarnings": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Fail when warnings are present", "loc": ["git-hooks", "hooks", "clippy", "settings", "denyWarnings"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.clippy.settings.extraArgs": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Additional arguments to pass to clippy", "loc": ["git-hooks", "hooks", "clippy", "settings", "extraArgs"], "readOnly": false, "type": "string"}, "git-hooks.hooks.clippy.settings.offline": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "true", "description": "Run clippy offline", "loc": ["git-hooks", "hooks", "clippy", "settings", "offline"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.clippy.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "clippy", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.clippy.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "clippy", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.clippy.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "clippy", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.clippy.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "clippy", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.cmake-format": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "cmake-format hook", "loc": ["git-hooks", "hooks", "cmake-format"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.cmake-format.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "cmake-format", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.cmake-format.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "cmake-format", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.cmake-format.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "cmake-format", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.cmake-format.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "cmake-format", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.cmake-format.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "cmake-format", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.cmake-format.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "cmake-format", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.cmake-format.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "cmake-format", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.cmake-format.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "cmake-format", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.cmake-format.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "cmake-format", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.cmake-format.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "cmake-format", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.cmake-format.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "cmake-format", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.cmake-format.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "cmake-format", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.cmake-format.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "cmake-format", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.cmake-format.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "cmake-format", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.cmake-format.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "cmake-format", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.cmake-format.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "cmake-format", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.cmake-format.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "cmake-format", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.cmake-format.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "cmake-format", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.cmake-format.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "cmake-format", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.cmake-format.settings.configPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Path to the configuration file (.json,.python,.yaml)", "example": "\".cmake-format.json\"", "loc": ["git-hooks", "hooks", "cmake-format", "settings", "configPath"], "readOnly": false, "type": "string"}, "git-hooks.hooks.cmake-format.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "cmake-format", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.cmake-format.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "cmake-format", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.cmake-format.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "cmake-format", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.cmake-format.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "cmake-format", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.credo": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "credo hook", "loc": ["git-hooks", "hooks", "credo"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.credo.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "credo", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.credo.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "credo", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.credo.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "credo", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.credo.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "credo", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.credo.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "credo", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.credo.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "credo", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.credo.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "credo", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.credo.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "credo", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.credo.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "credo", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.credo.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "credo", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.credo.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "credo", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.credo.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "credo", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.credo.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "credo", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.credo.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "credo", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.credo.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "credo", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.credo.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "credo", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.credo.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "credo", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.credo.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "credo", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.credo.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "credo", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.credo.settings.strict": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "true", "description": "Whether to auto-promote the changes.", "loc": ["git-hooks", "hooks", "credo", "settings", "strict"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.credo.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "credo", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.credo.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "credo", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.credo.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "credo", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.credo.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "credo", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.deadnix": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "deadnix hook", "loc": ["git-hooks", "hooks", "deadnix"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.deadnix.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "deadnix", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.deadnix.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "deadnix", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.deadnix.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "deadnix", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.deadnix.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "deadnix", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.deadnix.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "deadnix", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.deadnix.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "deadnix", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.deadnix.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "deadnix", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.deadnix.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "deadnix", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.deadnix.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "deadnix", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.deadnix.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "deadnix", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.deadnix.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "deadnix", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.deadnix.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "deadnix", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.deadnix.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "deadnix", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.deadnix.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "deadnix", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.deadnix.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "deadnix", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.deadnix.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "deadnix", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.deadnix.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "deadnix", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.deadnix.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "deadnix", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.deadnix.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "deadnix", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.deadnix.settings.edit": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Remove unused code and write to source file.", "loc": ["git-hooks", "hooks", "deadnix", "settings", "edit"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.deadnix.settings.exclude": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "Files to exclude from analysis.", "loc": ["git-hooks", "hooks", "deadnix", "settings", "exclude"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.deadnix.settings.hidden": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Recurse into hidden subdirectories and process hidden .*.nix files.", "loc": ["git-hooks", "hooks", "deadnix", "settings", "hidden"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.deadnix.settings.noLambdaArg": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Don't check lambda parameter arguments.", "loc": ["git-hooks", "hooks", "deadnix", "settings", "noLambdaArg"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.deadnix.settings.noLambdaPatternNames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Don't check lambda pattern names (don't break nixpkgs `callPackage`).", "loc": ["git-hooks", "hooks", "deadnix", "settings", "noLambdaPatternNames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.deadnix.settings.noUnderscore": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Don't check any bindings that start with a `_`.", "loc": ["git-hooks", "hooks", "deadnix", "settings", "noUnderscore"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.deadnix.settings.quiet": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Don't print a dead code report.", "loc": ["git-hooks", "hooks", "deadnix", "settings", "quiet"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.deadnix.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "deadnix", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.deadnix.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "deadnix", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.deadnix.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "deadnix", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.deadnix.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "deadnix", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.denofmt": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "denofmt hook", "loc": ["git-hooks", "hooks", "denofmt"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.denofmt.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "denofmt", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.denofmt.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "denofmt", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.denofmt.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "denofmt", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.denofmt.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "denofmt", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.denofmt.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "denofmt", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.denofmt.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "denofmt", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.denofmt.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "denofmt", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.denofmt.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "denofmt", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.denofmt.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "denofmt", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.denofmt.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "denofmt", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.denofmt.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "denofmt", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.denofmt.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "denofmt", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.denofmt.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "denofmt", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.denofmt.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "denofmt", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.denofmt.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "denofmt", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.denofmt.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "denofmt", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.denofmt.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "denofmt", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.denofmt.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "denofmt", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.denofmt.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "denofmt", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.denofmt.settings.configPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Path to the configuration JSON file", "loc": ["git-hooks", "hooks", "denofmt", "settings", "configPath"], "readOnly": false, "type": "string"}, "git-hooks.hooks.denofmt.settings.write": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "true", "description": "Whether to edit files inplace.", "loc": ["git-hooks", "hooks", "denofmt", "settings", "write"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.denofmt.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "denofmt", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.denofmt.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "denofmt", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.denofmt.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "denofmt", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.denofmt.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "denofmt", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.denolint": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "denolint hook", "loc": ["git-hooks", "hooks", "denolint"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.denolint.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "denolint", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.denolint.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "denolint", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.denolint.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "denolint", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.denolint.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "denolint", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.denolint.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "denolint", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.denolint.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "denolint", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.denolint.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "denolint", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.denolint.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "denolint", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.denolint.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "denolint", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.denolint.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "denolint", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.denolint.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "denolint", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.denolint.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "denolint", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.denolint.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "denolint", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.denolint.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "denolint", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.denolint.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "denolint", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.denolint.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "denolint", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.denolint.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "denolint", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.denolint.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "denolint", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.denolint.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "denolint", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.denolint.settings.configPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Path to the configuration JSON file", "loc": ["git-hooks", "hooks", "denolint", "settings", "configPath"], "readOnly": false, "type": "string"}, "git-hooks.hooks.denolint.settings.format": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"default\"", "description": "Output format.", "loc": ["git-hooks", "hooks", "denolint", "settings", "format"], "readOnly": false, "type": "one of \"default\", \"compact\", \"json\""}, "git-hooks.hooks.denolint.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "denolint", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.denolint.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "denolint", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.denolint.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "denolint", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.denolint.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "denolint", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.dune-fmt": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "dune-fmt hook", "loc": ["git-hooks", "hooks", "dune-fmt"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.dune-fmt.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "dune-fmt", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.dune-fmt.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "dune-fmt", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.dune-fmt.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "dune-fmt", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.dune-fmt.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "dune-fmt", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.dune-fmt.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "dune-fmt", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.dune-fmt.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "dune-fmt", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.dune-fmt.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "dune-fmt", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.dune-fmt.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "dune-fmt", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.dune-fmt.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "dune-fmt", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.dune-fmt.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "dune-fmt", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.dune-fmt.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "dune-fmt", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.dune-fmt.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "dune-fmt", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.dune-fmt.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "dune-fmt", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.dune-fmt.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "dune-fmt", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.dune-fmt.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "dune-fmt", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.dune-fmt.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "dune-fmt", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.dune-fmt.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "dune-fmt", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.dune-fmt.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "dune-fmt", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.dune-fmt.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "dune-fmt", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.dune-fmt.settings.auto-promote": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "true", "description": "Whether to auto-promote the changes.", "loc": ["git-hooks", "hooks", "dune-fmt", "settings", "auto-promote"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.dune-fmt.settings.extraRuntimeInputs": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "Extra runtimeInputs to add to the environment, eg. `ocamlformat`.", "loc": ["git-hooks", "hooks", "dune-fmt", "settings", "extraRuntimeInputs"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.dune-fmt.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "dune-fmt", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.dune-fmt.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "dune-fmt", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.dune-fmt.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "dune-fmt", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.dune-fmt.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "dune-fmt", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.eclint": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "eclint hook", "loc": ["git-hooks", "hooks", "eclint"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.eclint.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "eclint", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.eclint.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "eclint", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.eclint.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "eclint", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.eclint.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "eclint", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.eclint.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "eclint", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.eclint.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "eclint", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.eclint.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "eclint", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.eclint.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "eclint", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.eclint.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "eclint", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.eclint.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "eclint", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.eclint.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "eclint", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.eclint.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "eclint", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.eclint.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "eclint", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.eclint.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "eclint", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.eclint.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "eclint", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.eclint.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "eclint", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.eclint.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "eclint", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.eclint.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "eclint", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.eclint.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "eclint", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.eclint.settings.color": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"auto\"", "description": "When to generate colored output.", "loc": ["git-hooks", "hooks", "eclint", "settings", "color"], "readOnly": false, "type": "one of \"auto\", \"always\", \"never\""}, "git-hooks.hooks.eclint.settings.exclude": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "Filter to exclude files.", "loc": ["git-hooks", "hooks", "eclint", "settings", "exclude"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.eclint.settings.fix": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Modify files in place rather than showing the errors.", "loc": ["git-hooks", "hooks", "eclint", "settings", "fix"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.eclint.settings.summary": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Only show number of errors per file.", "loc": ["git-hooks", "hooks", "eclint", "settings", "summary"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.eclint.settings.verbosity": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "0", "description": "Log level verbosity", "loc": ["git-hooks", "hooks", "eclint", "settings", "verbosity"], "readOnly": false, "type": "one of 0, 1, 2, 3, 4"}, "git-hooks.hooks.eclint.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "eclint", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.eclint.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "eclint", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.eclint.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "eclint", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.eclint.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "eclint", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.eslint": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "eslint hook", "loc": ["git-hooks", "hooks", "eslint"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.eslint.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "eslint", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.eslint.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "eslint", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.eslint.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "eslint", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.eslint.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "eslint", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.eslint.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "eslint", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.eslint.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "eslint", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.eslint.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "eslint", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.eslint.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "eslint", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.eslint.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "eslint", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.eslint.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "eslint", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.eslint.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "eslint", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.eslint.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "eslint", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.eslint.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "eslint", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.eslint.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "eslint", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.eslint.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "eslint", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.eslint.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "eslint", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.eslint.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "eslint", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.eslint.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "eslint", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.eslint.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "eslint", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.eslint.settings.binPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "${tools.eslint}/bin/eslint", "description": "`eslint` binary path. E.g. if you want to use the `eslint` in `node_modules`, use `./node_modules/.bin/eslint`.", "loc": ["git-hooks", "hooks", "eslint", "settings", "binPath"], "readOnly": false, "type": "null or path"}, "git-hooks.hooks.eslint.settings.extensions": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\\\\.js$\"", "description": "The pattern of files to run on, see [https://pre-commit.com/#hooks-files](https://pre-commit.com/#hooks-files).", "loc": ["git-hooks", "hooks", "eslint", "settings", "extensions"], "readOnly": false, "type": "string"}, "git-hooks.hooks.eslint.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "eslint", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.eslint.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "eslint", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.eslint.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "eslint", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.eslint.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "eslint", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.flake8": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "flake8 hook", "loc": ["git-hooks", "hooks", "flake8"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.flake8.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "flake8", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.flake8.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "flake8", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.flake8.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "flake8", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.flake8.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "flake8", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.flake8.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "flake8", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.flake8.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "flake8", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.flake8.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "flake8", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.flake8.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "flake8", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.flake8.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "flake8", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.flake8.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "flake8", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.flake8.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "flake8", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.flake8.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "flake8", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.flake8.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "flake8", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.flake8.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "flake8", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.flake8.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "flake8", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.flake8.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "flake8", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.flake8.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "flake8", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.flake8.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "flake8", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.flake8.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "flake8", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.flake8.settings.binPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"${tools.flake8}/bin/flake8\"\n", "description": "flake8 binary path. Should be used to specify flake8 binary from your Nix-managed Python environment.", "loc": ["git-hooks", "hooks", "flake8", "settings", "binPath"], "readOnly": false, "type": "null or string"}, "git-hooks.hooks.flake8.settings.extendIgnore": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "List of additional ignore codes", "example": "[\n  \"E501\"\n]", "loc": ["git-hooks", "hooks", "flake8", "settings", "extendIgnore"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.flake8.settings.format": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"default\"", "description": "Output format.", "loc": ["git-hooks", "hooks", "flake8", "settings", "format"], "readOnly": false, "type": "string"}, "git-hooks.hooks.flake8.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "flake8", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.flake8.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "flake8", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.flake8.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "flake8", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.flake8.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "flake8", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.flynt": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "flynt hook", "loc": ["git-hooks", "hooks", "flynt"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.flynt.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "flynt", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.flynt.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "flynt", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.flynt.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "flynt", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.flynt.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "flynt", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.flynt.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "flynt", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.flynt.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "flynt", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.flynt.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "flynt", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.flynt.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "flynt", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.flynt.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "flynt", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.flynt.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "flynt", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.flynt.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "flynt", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.flynt.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "flynt", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.flynt.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "flynt", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.flynt.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "flynt", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.flynt.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "flynt", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.flynt.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "flynt", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.flynt.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "flynt", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.flynt.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "flynt", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.flynt.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "flynt", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.flynt.settings.aggressive": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Include conversions with potentially changed behavior.", "loc": ["git-hooks", "hooks", "flynt", "settings", "aggressive"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.flynt.settings.binPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "null", "description": "flynt binary path. Can be used to specify the flynt binary from an existing Python environment.", "loc": ["git-hooks", "hooks", "flynt", "settings", "binPath"], "readOnly": false, "type": "null or string"}, "git-hooks.hooks.flynt.settings.dry-run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Do not change files in-place and print diff instead.", "loc": ["git-hooks", "hooks", "flynt", "settings", "dry-run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.flynt.settings.exclude": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "Ignore files with given strings in their absolute path.", "loc": ["git-hooks", "hooks", "flynt", "settings", "exclude"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.flynt.settings.fail-on-change": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "true", "description": "Fail when diff is not empty (for linting purposes).", "loc": ["git-hooks", "hooks", "flynt", "settings", "fail-on-change"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.flynt.settings.line-length": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "null", "description": "Convert expressions spanning multiple lines, only if the resulting single line will fit into this line length limit.", "loc": ["git-hooks", "hooks", "flynt", "settings", "line-length"], "readOnly": false, "type": "null or signed integer"}, "git-hooks.hooks.flynt.settings.no-multiline": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Convert only single line expressions.", "loc": ["git-hooks", "hooks", "flynt", "settings", "no-multiline"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.flynt.settings.quiet": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Run without output.", "loc": ["git-hooks", "hooks", "flynt", "settings", "quiet"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.flynt.settings.string": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Interpret the input as a Python code snippet and print the converted version.", "loc": ["git-hooks", "hooks", "flynt", "settings", "string"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.flynt.settings.transform-concats": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Replace string concatenations with f-strings.", "loc": ["git-hooks", "hooks", "flynt", "settings", "transform-concats"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.flynt.settings.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Run with verbose output.", "loc": ["git-hooks", "hooks", "flynt", "settings", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.flynt.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "flynt", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.flynt.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "flynt", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.flynt.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "flynt", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.flynt.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "flynt", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.golines": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "golines hook", "loc": ["git-hooks", "hooks", "golines"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.golines.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "golines", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.golines.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "golines", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.golines.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "golines", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.golines.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "golines", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.golines.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "golines", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.golines.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "golines", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.golines.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "golines", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.golines.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "golines", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.golines.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "golines", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.golines.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "golines", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.golines.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "golines", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.golines.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "golines", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.golines.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "golines", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.golines.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "golines", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.golines.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "golines", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.golines.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "golines", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.golines.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "golines", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.golines.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "golines", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.golines.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "golines", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.golines.settings.flags": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Flags passed to golines. See all available [here](https://github.com/segmentio/golines?tab=readme-ov-file#options)", "example": "\"-m 120\"", "loc": ["git-hooks", "hooks", "golines", "settings", "flags"], "readOnly": false, "type": "string"}, "git-hooks.hooks.golines.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "golines", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.golines.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "golines", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.golines.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "golines", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.golines.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "golines", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.headache": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "headache hook", "loc": ["git-hooks", "hooks", "headache"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.headache.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "headache", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.headache.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "headache", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.headache.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "headache", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.headache.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "headache", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.headache.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "headache", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.headache.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "headache", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.headache.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "headache", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.headache.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "headache", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.headache.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "headache", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.headache.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "headache", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.headache.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "headache", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.headache.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "headache", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.headache.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "headache", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.headache.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "headache", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.headache.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "headache", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.headache.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "headache", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.headache.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "headache", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.headache.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "headache", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.headache.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "headache", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.headache.settings.header-file": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\".header\"", "description": "Path to the header file.", "loc": ["git-hooks", "hooks", "headache", "settings", "header-file"], "readOnly": false, "type": "string"}, "git-hooks.hooks.headache.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "headache", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.headache.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "headache", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.headache.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "headache", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.headache.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "headache", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.hlint": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "hlint hook", "loc": ["git-hooks", "hooks", "hlint"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.hlint.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "hlint", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.hlint.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "hlint", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.hlint.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "hlint", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.hlint.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "hlint", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.hlint.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "hlint", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.hlint.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "hlint", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.hlint.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "hlint", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.hlint.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "hlint", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.hlint.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "hlint", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.hlint.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "hlint", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.hlint.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "hlint", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.hlint.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "hlint", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.hlint.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "hlint", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.hlint.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "hlint", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.hlint.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "hlint", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.hlint.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "hlint", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.hlint.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "hlint", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.hlint.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "hlint", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.hlint.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "hlint", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.hlint.settings.hintFile": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "null", "description": "Path to hlint.yaml. By default, hlint searches for .hlint.yaml in the project root.", "loc": ["git-hooks", "hooks", "hlint", "settings", "hintFile"], "readOnly": false, "type": "null or path"}, "git-hooks.hooks.hlint.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "hlint", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.hlint.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "hlint", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.hlint.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "hlint", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.hlint.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "hlint", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.hpack": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "hpack hook", "loc": ["git-hooks", "hooks", "hpack"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.hpack.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "hpack", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.hpack.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "hpack", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.hpack.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "hpack", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.hpack.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "hpack", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.hpack.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "hpack", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.hpack.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "hpack", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.hpack.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "hpack", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.hpack.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "hpack", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.hpack.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "hpack", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.hpack.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "hpack", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.hpack.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "hpack", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.hpack.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "hpack", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.hpack.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "hpack", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.hpack.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "hpack", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.hpack.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "hpack", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.hpack.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "hpack", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.hpack.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "hpack", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.hpack.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "hpack", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.hpack.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "hpack", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.hpack.settings.silent": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Whether generation should be silent.", "loc": ["git-hooks", "hooks", "hpack", "settings", "silent"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.hpack.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "hpack", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.hpack.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "hpack", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.hpack.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "hpack", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.hpack.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "hpack", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.isort": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "isort hook", "loc": ["git-hooks", "hooks", "isort"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.isort.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "isort", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.isort.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "isort", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.isort.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "isort", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.isort.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "isort", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.isort.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "isort", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.isort.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "isort", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.isort.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "isort", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.isort.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "isort", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.isort.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "isort", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.isort.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "isort", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.isort.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "isort", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.isort.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "isort", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.isort.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "isort", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.isort.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "isort", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.isort.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "isort", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.isort.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "isort", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.isort.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "isort", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.isort.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "isort", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.isort.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "isort", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.isort.settings.flags": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Flags passed to isort. See all available [here](https://pycqa.github.io/isort/docs/configuration/options.html).", "loc": ["git-hooks", "hooks", "isort", "settings", "flags"], "readOnly": false, "type": "string"}, "git-hooks.hooks.isort.settings.profile": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Built-in profiles to allow easy interoperability with common projects and code styles.", "loc": ["git-hooks", "hooks", "isort", "settings", "profile"], "readOnly": false, "type": "one of \"\", \"black\", \"django\", \"pycharm\", \"google\", \"open_stack\", \"plone\", \"attrs\", \"hug\", \"wemake\", \"appnexus\""}, "git-hooks.hooks.isort.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "isort", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.isort.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "isort", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.isort.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "isort", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.isort.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "isort", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.lacheck": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "lacheck hook", "loc": ["git-hooks", "hooks", "lacheck"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.lacheck.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "lacheck", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.lacheck.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "lacheck", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.lacheck.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "lacheck", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.lacheck.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "lacheck", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.lacheck.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "lacheck", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.lacheck.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "lacheck", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.lacheck.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "lacheck", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.lacheck.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "lacheck", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.lacheck.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "lacheck", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.lacheck.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "lacheck", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.lacheck.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "lacheck", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.lacheck.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "lacheck", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.lacheck.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "lacheck", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.lacheck.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "lacheck", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.lacheck.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "lacheck", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.lacheck.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "lacheck", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.lacheck.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "lacheck", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.lacheck.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "lacheck", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.lacheck.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "lacheck", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.lacheck.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "lacheck", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.lacheck.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "lacheck", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.lacheck.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "lacheck", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.lacheck.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "lacheck", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.latexindent": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "latexindent hook", "loc": ["git-hooks", "hooks", "latexindent"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.latexindent.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "latexindent", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.latexindent.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "latexindent", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.latexindent.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "latexindent", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.latexindent.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "latexindent", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.latexindent.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "latexindent", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.latexindent.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "latexindent", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.latexindent.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "latexindent", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.latexindent.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "latexindent", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.latexindent.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "latexindent", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.latexindent.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "latexindent", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.latexindent.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "latexindent", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.latexindent.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "latexindent", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.latexindent.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "latexindent", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.latexindent.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "latexindent", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.latexindent.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "latexindent", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.latexindent.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "latexindent", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.latexindent.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "latexindent", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.latexindent.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "latexindent", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.latexindent.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "latexindent", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.latexindent.settings.flags": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"--local --silent --overwriteIfDifferent\"", "description": "Flags passed to latexindent. See available flags [here](https://latexindentpl.readthedocs.io/en/latest/sec-how-to-use.html#from-the-command-line)", "loc": ["git-hooks", "hooks", "latexindent", "settings", "flags"], "readOnly": false, "type": "string"}, "git-hooks.hooks.latexindent.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "latexindent", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.latexindent.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "latexindent", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.latexindent.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "latexindent", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.latexindent.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "latexindent", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.lua-ls": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "lua-ls hook", "loc": ["git-hooks", "hooks", "lua-ls"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.lua-ls.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "lua-ls", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.lua-ls.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "lua-ls", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.lua-ls.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "lua-ls", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.lua-ls.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "lua-ls", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.lua-ls.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "lua-ls", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.lua-ls.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "lua-ls", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.lua-ls.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "lua-ls", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.lua-ls.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "lua-ls", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.lua-ls.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "lua-ls", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.lua-ls.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "lua-ls", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.lua-ls.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "lua-ls", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.lua-ls.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "lua-ls", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.lua-ls.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "lua-ls", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.lua-ls.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "lua-ls", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.lua-ls.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "lua-ls", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.lua-ls.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "lua-ls", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.lua-ls.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "lua-ls", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.lua-ls.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "lua-ls", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.lua-ls.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "lua-ls", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.lua-ls.settings.checklevel": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"Warning\"", "description": "The diagnostic check level", "loc": ["git-hooks", "hooks", "lua-ls", "settings", "checklevel"], "readOnly": false, "type": "one of \"Error\", \"Warning\", \"Information\", \"Hint\""}, "git-hooks.hooks.lua-ls.settings.configuration": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "{ }", "description": "See https://github.com/LuaLS/lua-language-server/wiki/Configuration-File#luarcjson", "loc": ["git-hooks", "hooks", "lua-ls", "settings", "configuration"], "readOnly": false, "type": "attribute set"}, "git-hooks.hooks.lua-ls.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "lua-ls", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.lua-ls.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "lua-ls", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.lua-ls.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "lua-ls", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.lua-ls.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "lua-ls", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.lychee": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "lychee hook", "loc": ["git-hooks", "hooks", "lychee"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.lychee.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "lychee", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.lychee.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "lychee", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.lychee.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "lychee", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.lychee.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "lychee", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.lychee.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "lychee", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.lychee.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "lychee", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.lychee.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "lychee", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.lychee.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "lychee", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.lychee.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "lychee", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.lychee.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "lychee", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.lychee.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "lychee", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.lychee.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "lychee", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.lychee.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "lychee", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.lychee.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "lychee", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.lychee.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "lychee", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.lychee.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "lychee", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.lychee.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "lychee", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.lychee.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "lychee", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.lychee.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "lychee", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.lychee.settings.configPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Path to the config file.", "loc": ["git-hooks", "hooks", "lychee", "settings", "configPath"], "readOnly": false, "type": "string"}, "git-hooks.hooks.lychee.settings.flags": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Flags passed to lychee. See all available [here](https://lychee.cli.rs/#/usage/cli).", "loc": ["git-hooks", "hooks", "lychee", "settings", "flags"], "readOnly": false, "type": "string"}, "git-hooks.hooks.lychee.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "lychee", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.lychee.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "lychee", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.lychee.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "lychee", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.lychee.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "lychee", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.markdownlint": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "markdownlint hook", "loc": ["git-hooks", "hooks", "markdownlint"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.markdownlint.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "markdownlint", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.markdownlint.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "markdownlint", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.markdownlint.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "markdownlint", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.markdownlint.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "markdownlint", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.markdownlint.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "markdownlint", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.markdownlint.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "markdownlint", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.markdownlint.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "markdownlint", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.markdownlint.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "markdownlint", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.markdownlint.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "markdownlint", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.markdownlint.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "markdownlint", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.markdownlint.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "markdownlint", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.markdownlint.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "markdownlint", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.markdownlint.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "markdownlint", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.markdownlint.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "markdownlint", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.markdownlint.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "markdownlint", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.markdownlint.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "markdownlint", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.markdownlint.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "markdownlint", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.markdownlint.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "markdownlint", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.markdownlint.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "markdownlint", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.markdownlint.settings.configuration": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "{ }", "description": "See https://github.com/DavidAnson/markdownlint/blob/main/schema/.markdownlint.jsonc", "loc": ["git-hooks", "hooks", "markdownlint", "settings", "configuration"], "readOnly": false, "type": "attribute set"}, "git-hooks.hooks.markdownlint.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "markdownlint", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.markdownlint.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "markdownlint", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.markdownlint.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "markdownlint", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.markdownlint.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "markdownlint", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.mdl": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "mdl hook", "loc": ["git-hooks", "hooks", "mdl"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.mdl.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "mdl", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.mdl.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "mdl", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.mdl.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "mdl", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.mdl.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "mdl", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.mdl.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "mdl", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.mdl.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "mdl", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.mdl.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "mdl", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.mdl.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "mdl", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.mdl.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "mdl", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.mdl.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "mdl", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.mdl.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "mdl", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.mdl.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "mdl", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.mdl.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "mdl", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.mdl.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "mdl", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.mdl.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "mdl", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.mdl.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "mdl", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.mdl.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "mdl", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.mdl.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "mdl", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.mdl.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "mdl", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.mdl.settings.configPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "The configuration file to use.", "loc": ["git-hooks", "hooks", "mdl", "settings", "configPath"], "readOnly": false, "type": "string"}, "git-hooks.hooks.mdl.settings.git-recurse": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Only process files known to git when given a directory.", "loc": ["git-hooks", "hooks", "mdl", "settings", "git-recurse"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.mdl.settings.ignore-front-matter": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Ignore YAML front matter.", "loc": ["git-hooks", "hooks", "mdl", "settings", "ignore-front-matter"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.mdl.settings.json": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Format output as JSON.", "loc": ["git-hooks", "hooks", "mdl", "settings", "json"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.mdl.settings.rules": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "Markdown rules to use for linting. Per default all rules are processed.", "loc": ["git-hooks", "hooks", "mdl", "settings", "rules"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.mdl.settings.rulesets": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "Specify additional ruleset files to load.", "loc": ["git-hooks", "hooks", "mdl", "settings", "rulesets"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.mdl.settings.show-aliases": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Show rule alias instead of rule ID when viewing rules.", "loc": ["git-hooks", "hooks", "mdl", "settings", "show-aliases"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.mdl.settings.skip-default-ruleset": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Do not load the default markdownlint ruleset. Use this option if you only want to load custom rulesets.", "loc": ["git-hooks", "hooks", "mdl", "settings", "skip-default-ruleset"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.mdl.settings.style": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"default\"", "description": "Select which style mdl uses.", "loc": ["git-hooks", "hooks", "mdl", "settings", "style"], "readOnly": false, "type": "string"}, "git-hooks.hooks.mdl.settings.tags": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "Markdown rules to use for linting containing the given tags. Per default all rules are processed.", "loc": ["git-hooks", "hooks", "mdl", "settings", "tags"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.mdl.settings.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Increase verbosity.", "loc": ["git-hooks", "hooks", "mdl", "settings", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.mdl.settings.warnings": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Show Kramdown warnings.", "loc": ["git-hooks", "hooks", "mdl", "settings", "warnings"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.mdl.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "mdl", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.mdl.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "mdl", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.mdl.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "mdl", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.mdl.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "mdl", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.mkdocs-linkcheck": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "mkdocs-linkcheck hook", "loc": ["git-hooks", "hooks", "mkdocs-linkcheck"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.mkdocs-linkcheck.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "mkdocs-linkcheck", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.mkdocs-linkcheck.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "mkdocs-linkcheck", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.mkdocs-linkcheck.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "mkdocs-linkcheck", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.mkdocs-linkcheck.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "mkdocs-linkcheck", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.mkdocs-linkcheck.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "mkdocs-linkcheck", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.mkdocs-linkcheck.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "mkdocs-linkcheck", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.mkdocs-linkcheck.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "mkdocs-linkcheck", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.mkdocs-linkcheck.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "mkdocs-linkcheck", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.mkdocs-linkcheck.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "mkdocs-linkcheck", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.mkdocs-linkcheck.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "mkdocs-linkcheck", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.mkdocs-linkcheck.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "mkdocs-linkcheck", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.mkdocs-linkcheck.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "mkdocs-linkcheck", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.mkdocs-linkcheck.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "mkdocs-linkcheck", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.mkdocs-linkcheck.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "mkdocs-linkcheck", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.mkdocs-linkcheck.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "mkdocs-linkcheck", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.mkdocs-linkcheck.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "mkdocs-linkcheck", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.mkdocs-linkcheck.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "mkdocs-linkcheck", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.mkdocs-linkcheck.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "mkdocs-linkcheck", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.mkdocs-linkcheck.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "mkdocs-linkcheck", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.mkdocs-linkcheck.settings.binPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"${tools.mkdocs-linkcheck}/bin/mkdocs-linkcheck\"\n", "description": "mkdocs-linkcheck binary path. Should be used to specify the mkdocs-linkcheck binary from your Nix-managed Python environment.", "loc": ["git-hooks", "hooks", "mkdocs-linkcheck", "settings", "binPath"], "readOnly": false, "type": "null or path"}, "git-hooks.hooks.mkdocs-linkcheck.settings.extension": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "File extension to scan for.", "loc": ["git-hooks", "hooks", "mkdocs-linkcheck", "settings", "extension"], "readOnly": false, "type": "string"}, "git-hooks.hooks.mkdocs-linkcheck.settings.local-only": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Whether to only check local links.", "loc": ["git-hooks", "hooks", "mkdocs-linkcheck", "settings", "local-only"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.mkdocs-linkcheck.settings.method": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"get\"", "description": "HTTP method to use when checking external links.", "loc": ["git-hooks", "hooks", "mkdocs-linkcheck", "settings", "method"], "readOnly": false, "type": "one of \"get\", \"head\""}, "git-hooks.hooks.mkdocs-linkcheck.settings.path": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Path to check", "loc": ["git-hooks", "hooks", "mkdocs-linkcheck", "settings", "path"], "readOnly": false, "type": "string"}, "git-hooks.hooks.mkdocs-linkcheck.settings.recurse": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Whether to recurse directories under path.", "loc": ["git-hooks", "hooks", "mkdocs-linkcheck", "settings", "recurse"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.mkdocs-linkcheck.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "mkdocs-linkcheck", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.mkdocs-linkcheck.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "mkdocs-linkcheck", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.mkdocs-linkcheck.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "mkdocs-linkcheck", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.mkdocs-linkcheck.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "mkdocs-linkcheck", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.mypy": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "mypy hook", "loc": ["git-hooks", "hooks", "mypy"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.mypy.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "mypy", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.mypy.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "mypy", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.mypy.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "mypy", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.mypy.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "mypy", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.mypy.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "mypy", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.mypy.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "mypy", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.mypy.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "mypy", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.mypy.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "mypy", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.mypy.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "mypy", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.mypy.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "mypy", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.mypy.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "mypy", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.mypy.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "mypy", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.mypy.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "mypy", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.mypy.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "mypy", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.mypy.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "mypy", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.mypy.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "mypy", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.mypy.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "mypy", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.mypy.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "mypy", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.mypy.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "mypy", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.mypy.settings.binPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"${tools.mypy}/bin/mypy\"\n", "description": "Mypy binary path. Should be used to specify the mypy executable in an environment containing your typing stubs.", "loc": ["git-hooks", "hooks", "mypy", "settings", "binPath"], "readOnly": false, "type": "null or string"}, "git-hooks.hooks.mypy.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "mypy", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.mypy.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "mypy", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.mypy.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "mypy", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.mypy.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "mypy", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.nixfmt-classic": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "nixfmt (classic) hook", "loc": ["git-hooks", "hooks", "nixfmt-classic"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.nixfmt-classic.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "nixfmt-classic", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.nixfmt-classic.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "nixfmt-classic", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.nixfmt-classic.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "nixfmt-classic", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.nixfmt-classic.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "nixfmt-classic", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.nixfmt-classic.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "nixfmt-classic", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.nixfmt-classic.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "nixfmt-classic", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.nixfmt-classic.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "nixfmt-classic", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.nixfmt-classic.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "nixfmt-classic", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.nixfmt-classic.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "nixfmt-classic", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.nixfmt-classic.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "nixfmt-classic", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.nixfmt-classic.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "nixfmt-classic", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.nixfmt-classic.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "nixfmt-classic", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.nixfmt-classic.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "nixfmt-classic", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.nixfmt-classic.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "nixfmt-classic", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.nixfmt-classic.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "nixfmt-classic", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.nixfmt-classic.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "nixfmt-classic", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.nixfmt-classic.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "nixfmt-classic", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.nixfmt-classic.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "nixfmt-classic", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.nixfmt-classic.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "nixfmt-classic", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.nixfmt-classic.settings.width": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "null", "description": "Line width.", "loc": ["git-hooks", "hooks", "nixfmt-classic", "settings", "width"], "readOnly": false, "type": "null or signed integer"}, "git-hooks.hooks.nixfmt-classic.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "nixfmt-classic", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.nixfmt-classic.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "nixfmt-classic", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.nixfmt-classic.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "nixfmt-classic", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.nixfmt-classic.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "nixfmt-classic", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.nixfmt-rfc-style": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "nixfmt (RFC 166 style) hook", "loc": ["git-hooks", "hooks", "nixfmt-rfc-style"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.nixfmt-rfc-style.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "nixfmt-rfc-style", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.nixfmt-rfc-style.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "nixfmt-rfc-style", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.nixfmt-rfc-style.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "nixfmt-rfc-style", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.nixfmt-rfc-style.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "nixfmt-rfc-style", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.nixfmt-rfc-style.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "nixfmt-rfc-style", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.nixfmt-rfc-style.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "nixfmt-rfc-style", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.nixfmt-rfc-style.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "nixfmt-rfc-style", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.nixfmt-rfc-style.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "nixfmt-rfc-style", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.nixfmt-rfc-style.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "nixfmt-rfc-style", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.nixfmt-rfc-style.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "nixfmt-rfc-style", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.nixfmt-rfc-style.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "nixfmt-rfc-style", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.nixfmt-rfc-style.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "nixfmt-rfc-style", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.nixfmt-rfc-style.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "nixfmt-rfc-style", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.nixfmt-rfc-style.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "nixfmt-rfc-style", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.nixfmt-rfc-style.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "nixfmt-rfc-style", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.nixfmt-rfc-style.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "nixfmt-rfc-style", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.nixfmt-rfc-style.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "nixfmt-rfc-style", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.nixfmt-rfc-style.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "nixfmt-rfc-style", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.nixfmt-rfc-style.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "nixfmt-rfc-style", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.nixfmt-rfc-style.settings.width": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "null", "description": "Line width.", "loc": ["git-hooks", "hooks", "nixfmt-rfc-style", "settings", "width"], "readOnly": false, "type": "null or signed integer"}, "git-hooks.hooks.nixfmt-rfc-style.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "nixfmt-rfc-style", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.nixfmt-rfc-style.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "nixfmt-rfc-style", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.nixfmt-rfc-style.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "nixfmt-rfc-style", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.nixfmt-rfc-style.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "nixfmt-rfc-style", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.no-commit-to-branch": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "no-commit-to-branch-hook", "loc": ["git-hooks", "hooks", "no-commit-to-branch"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.no-commit-to-branch.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "no-commit-to-branch", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.no-commit-to-branch.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "no-commit-to-branch", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.no-commit-to-branch.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "no-commit-to-branch", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.no-commit-to-branch.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "no-commit-to-branch", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.no-commit-to-branch.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "no-commit-to-branch", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.no-commit-to-branch.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "no-commit-to-branch", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.no-commit-to-branch.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "no-commit-to-branch", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.no-commit-to-branch.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "no-commit-to-branch", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.no-commit-to-branch.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "no-commit-to-branch", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.no-commit-to-branch.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "no-commit-to-branch", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.no-commit-to-branch.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "no-commit-to-branch", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.no-commit-to-branch.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "no-commit-to-branch", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.no-commit-to-branch.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "no-commit-to-branch", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.no-commit-to-branch.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "no-commit-to-branch", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.no-commit-to-branch.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "no-commit-to-branch", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.no-commit-to-branch.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "no-commit-to-branch", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.no-commit-to-branch.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "no-commit-to-branch", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.no-commit-to-branch.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "no-commit-to-branch", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.no-commit-to-branch.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "no-commit-to-branch", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.no-commit-to-branch.settings.branch": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[\n  \"main\"\n]", "description": "Branches to disallow commits to.", "example": "[\n  \"main\"\n  \"master\"\n]", "loc": ["git-hooks", "hooks", "no-commit-to-branch", "settings", "branch"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.no-commit-to-branch.settings.pattern": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "RegEx patterns for branch names to disallow commits to.", "example": "[\n  \"ma.*\"\n]", "loc": ["git-hooks", "hooks", "no-commit-to-branch", "settings", "pattern"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.no-commit-to-branch.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "no-commit-to-branch", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.no-commit-to-branch.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "no-commit-to-branch", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.no-commit-to-branch.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "no-commit-to-branch", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.no-commit-to-branch.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "no-commit-to-branch", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.ormolu": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "ormolu hook", "loc": ["git-hooks", "hooks", "ormolu"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.ormolu.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "ormolu", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.ormolu.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "ormolu", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.ormolu.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "ormolu", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.ormolu.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "ormolu", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.ormolu.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "ormolu", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.ormolu.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "ormolu", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.ormolu.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "ormolu", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.ormolu.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "ormolu", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.ormolu.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "ormolu", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.ormolu.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "ormolu", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.ormolu.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "ormolu", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.ormolu.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "ormolu", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.ormolu.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "ormolu", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.ormolu.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "ormolu", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.ormolu.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "ormolu", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.ormolu.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "ormolu", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.ormolu.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "ormolu", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.ormolu.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "ormolu", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.ormolu.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "ormolu", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.ormolu.settings.cabalDefaultExtensions": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Use `default-extensions` from `.cabal` files.", "loc": ["git-hooks", "hooks", "ormolu", "settings", "cabalDefaultExtensions"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.ormolu.settings.defaultExtensions": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "Haskell language extensions to enable.", "loc": ["git-hooks", "hooks", "ormolu", "settings", "defaultExtensions"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.ormolu.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "ormolu", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.ormolu.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "ormolu", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.ormolu.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "ormolu", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.ormolu.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "ormolu", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.php-cs-fixer": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "php-cs-fixer hook", "loc": ["git-hooks", "hooks", "php-cs-fixer"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.php-cs-fixer.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "php-cs-fixer", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.php-cs-fixer.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "php-cs-fixer", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.php-cs-fixer.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "php-cs-fixer", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.php-cs-fixer.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "php-cs-fixer", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.php-cs-fixer.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "php-cs-fixer", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.php-cs-fixer.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "php-cs-fixer", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.php-cs-fixer.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "php-cs-fixer", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.php-cs-fixer.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "php-cs-fixer", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.php-cs-fixer.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "php-cs-fixer", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.php-cs-fixer.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "php-cs-fixer", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.php-cs-fixer.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "php-cs-fixer", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.php-cs-fixer.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "php-cs-fixer", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.php-cs-fixer.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "php-cs-fixer", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.php-cs-fixer.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "php-cs-fixer", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.php-cs-fixer.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "php-cs-fixer", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.php-cs-fixer.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "php-cs-fixer", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.php-cs-fixer.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "php-cs-fixer", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.php-cs-fixer.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "php-cs-fixer", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.php-cs-fixer.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "php-cs-fixer", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.php-cs-fixer.settings.binPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"${tools.php-cs-fixer}/bin/php-cs-fixer\"\n", "description": "PHP-CS-Fixer binary path.", "loc": ["git-hooks", "hooks", "php-cs-fixer", "settings", "binPath"], "readOnly": false, "type": "null or string"}, "git-hooks.hooks.php-cs-fixer.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "php-cs-fixer", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.php-cs-fixer.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "php-cs-fixer", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.php-cs-fixer.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "php-cs-fixer", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.php-cs-fixer.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "php-cs-fixer", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.phpcbf": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "phpcbf hook", "loc": ["git-hooks", "hooks", "phpcbf"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.phpcbf.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "phpcbf", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.phpcbf.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "phpcbf", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.phpcbf.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "phpcbf", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.phpcbf.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "phpcbf", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.phpcbf.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "phpcbf", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.phpcbf.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "phpcbf", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.phpcbf.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "phpcbf", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.phpcbf.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "phpcbf", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.phpcbf.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "phpcbf", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.phpcbf.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "phpcbf", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.phpcbf.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "phpcbf", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.phpcbf.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "phpcbf", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.phpcbf.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "phpcbf", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.phpcbf.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "phpcbf", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.phpcbf.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "phpcbf", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.phpcbf.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "phpcbf", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.phpcbf.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "phpcbf", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.phpcbf.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "phpcbf", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.phpcbf.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "phpcbf", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.phpcbf.settings.binPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"${tools.phpcbf}/bin/phpcbf\"\n", "description": "PHP_CodeSniffer binary path.", "loc": ["git-hooks", "hooks", "phpcbf", "settings", "binPath"], "readOnly": false, "type": "null or string"}, "git-hooks.hooks.phpcbf.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "phpcbf", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.phpcbf.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "phpcbf", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.phpcbf.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "phpcbf", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.phpcbf.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "phpcbf", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.phpcs": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "phpcs hook", "loc": ["git-hooks", "hooks", "phpcs"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.phpcs.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "phpcs", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.phpcs.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "phpcs", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.phpcs.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "phpcs", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.phpcs.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "phpcs", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.phpcs.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "phpcs", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.phpcs.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "phpcs", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.phpcs.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "phpcs", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.phpcs.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "phpcs", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.phpcs.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "phpcs", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.phpcs.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "phpcs", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.phpcs.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "phpcs", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.phpcs.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "phpcs", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.phpcs.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "phpcs", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.phpcs.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "phpcs", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.phpcs.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "phpcs", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.phpcs.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "phpcs", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.phpcs.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "phpcs", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.phpcs.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "phpcs", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.phpcs.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "phpcs", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.phpcs.settings.binPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"${tools.phpcs}/bin/phpcs\"\n", "description": "PHP_CodeSniffer binary path.", "loc": ["git-hooks", "hooks", "phpcs", "settings", "binPath"], "readOnly": false, "type": "null or string"}, "git-hooks.hooks.phpcs.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "phpcs", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.phpcs.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "phpcs", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.phpcs.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "phpcs", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.phpcs.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "phpcs", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.phpstan": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "phpstan hook", "loc": ["git-hooks", "hooks", "phpstan"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.phpstan.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "phpstan", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.phpstan.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "phpstan", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.phpstan.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "phpstan", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.phpstan.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "phpstan", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.phpstan.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "phpstan", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.phpstan.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "phpstan", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.phpstan.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "phpstan", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.phpstan.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "phpstan", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.phpstan.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "phpstan", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.phpstan.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "phpstan", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.phpstan.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "phpstan", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.phpstan.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "phpstan", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.phpstan.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "phpstan", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.phpstan.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "phpstan", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.phpstan.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "phpstan", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.phpstan.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "phpstan", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.phpstan.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "phpstan", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.phpstan.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "phpstan", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.phpstan.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "phpstan", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.phpstan.settings.binPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"${tools.phpstan}/bin/phpstan\"\n", "description": "PHPStan binary path.", "loc": ["git-hooks", "hooks", "phpstan", "settings", "binPath"], "readOnly": false, "type": "null or string"}, "git-hooks.hooks.phpstan.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "phpstan", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.phpstan.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "phpstan", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.phpstan.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "phpstan", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.phpstan.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "phpstan", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.prettier": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "prettier hook", "loc": ["git-hooks", "hooks", "prettier"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.prettier.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "prettier", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.prettier.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "prettier", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.prettier.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "prettier", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.prettier.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "prettier", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.prettier.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "prettier", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.prettier.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "prettier", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.prettier.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "prettier", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.prettier.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "prettier", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.prettier.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "prettier", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.prettier.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "prettier", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.prettier.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "prettier", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.prettier.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "prettier", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.prettier.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "prettier", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.prettier.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "prettier", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.prettier.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "prettier", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.prettier.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "prettier", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.prettier.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "prettier", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.prettier.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "prettier", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.prettier.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "prettier", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.prettier.settings.allow-parens": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"always\"", "description": "Include parentheses around a sole arrow function parameter.", "loc": ["git-hooks", "hooks", "prettier", "settings", "allow-parens"], "readOnly": false, "type": "one of \"always\", \"avoid\""}, "git-hooks.hooks.prettier.settings.binPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"${tools.prettier}/bin/prettier\"\n", "description": "`prettier` binary path. E.g. if you want to use the `prettier` in `node_modules`, use `./node_modules/.bin/prettier`.", "loc": ["git-hooks", "hooks", "prettier", "settings", "binPath"], "readOnly": false, "type": "null or path"}, "git-hooks.hooks.prettier.settings.bracket-same-line": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Put > of opening tags on the last line instead of on a new line.", "loc": ["git-hooks", "hooks", "prettier", "settings", "bracket-same-line"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.prettier.settings.cache": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Only format changed files.", "loc": ["git-hooks", "hooks", "prettier", "settings", "cache"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.prettier.settings.cache-location": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"./node_modules/.cache/prettier/.prettier-cache\"", "description": "Path to the cache file location used by `--cache` flag.", "loc": ["git-hooks", "hooks", "prettier", "settings", "cache-location"], "readOnly": false, "type": "string"}, "git-hooks.hooks.prettier.settings.cache-strategy": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "null", "description": "Strategy for the cache to use for detecting changed files.", "loc": ["git-hooks", "hooks", "prettier", "settings", "cache-strategy"], "readOnly": false, "type": "null or one of \"metadata\", \"content\""}, "git-hooks.hooks.prettier.settings.check": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Output a human-friendly message and a list of unformatted files, if any.", "loc": ["git-hooks", "hooks", "prettier", "settings", "check"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.prettier.settings.color": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "true", "description": "Colorize error messages.", "loc": ["git-hooks", "hooks", "prettier", "settings", "color"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.prettier.settings.config-precedence": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"cli-override\"", "description": "Defines how config file should be evaluated in combination of CLI options.", "loc": ["git-hooks", "hooks", "prettier", "settings", "config-precedence"], "readOnly": false, "type": "one of \"cli-override\", \"file-override\", \"prefer-file\""}, "git-hooks.hooks.prettier.settings.configPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Path to a Prettier configuration file (.prettierrc, package.json, prettier.config.js).", "loc": ["git-hooks", "hooks", "prettier", "settings", "configPath"], "readOnly": false, "type": "string"}, "git-hooks.hooks.prettier.settings.embedded-language-formatting": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"auto\"", "description": "Control how Prettier formats quoted code embedded in the file.", "loc": ["git-hooks", "hooks", "prettier", "settings", "embedded-language-formatting"], "readOnly": false, "type": "one of \"auto\", \"off\""}, "git-hooks.hooks.prettier.settings.end-of-line": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"lf\"", "description": "Which end of line characters to apply.", "loc": ["git-hooks", "hooks", "prettier", "settings", "end-of-line"], "readOnly": false, "type": "one of \"lf\", \"crlf\", \"cr\", \"auto\""}, "git-hooks.hooks.prettier.settings.html-whitespace-sensitivity": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"css\"", "description": "How to handle whitespaces in HTML.", "loc": ["git-hooks", "hooks", "prettier", "settings", "html-whitespace-sensitivity"], "readOnly": false, "type": "one of \"css\", \"strict\", \"ignore\""}, "git-hooks.hooks.prettier.settings.ignore-path": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "Path to a file containing patterns that describe files to ignore.\n                By default, prettier looks for `./.gitignore` and `./.prettierignore`.\n                Multiple values are accepted.", "loc": ["git-hooks", "hooks", "prettier", "settings", "ignore-path"], "readOnly": false, "type": "list of path"}, "git-hooks.hooks.prettier.settings.ignore-unknown": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "true", "description": "Ignore unknown files.", "loc": ["git-hooks", "hooks", "prettier", "settings", "ignore-unknown"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.prettier.settings.insert-pragma": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Insert @format pragma into file's first docblock comment.", "loc": ["git-hooks", "hooks", "prettier", "settings", "insert-pragma"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.prettier.settings.jsx-single-quote": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Use single quotes in JSX.", "loc": ["git-hooks", "hooks", "prettier", "settings", "jsx-single-quote"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.prettier.settings.list-different": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "true", "description": "Print the filenames of files that are different from Prettier formatting.", "loc": ["git-hooks", "hooks", "prettier", "settings", "list-different"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.prettier.settings.log-level": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"log\"", "description": "What level of logs to report.", "example": "\"debug\"", "loc": ["git-hooks", "hooks", "prettier", "settings", "log-level"], "readOnly": false, "type": "one of \"silent\", \"error\", \"warn\", \"log\", \"debug\""}, "git-hooks.hooks.prettier.settings.no-bracket-spacing": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Do not print spaces between brackets.", "loc": ["git-hooks", "hooks", "prettier", "settings", "no-bracket-spacing"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.prettier.settings.no-config": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Do not look for a configuration file.", "loc": ["git-hooks", "hooks", "prettier", "settings", "no-config"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.prettier.settings.no-editorconfig": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Don't take .editorconfig into account when parsing configuration.", "loc": ["git-hooks", "hooks", "prettier", "settings", "no-editorconfig"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.prettier.settings.no-error-on-unmatched-pattern": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Prevent errors when pattern is unmatched.", "loc": ["git-hooks", "hooks", "prettier", "settings", "no-error-on-unmatched-pattern"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.prettier.settings.no-semi": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Do not print semicolons, except at the beginning of lines which may need them.", "loc": ["git-hooks", "hooks", "prettier", "settings", "no-semi"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.prettier.settings.parser": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Which parser to use.", "loc": ["git-hooks", "hooks", "prettier", "settings", "parser"], "readOnly": false, "type": "one of \"\", \"flow\", \"babel\", \"babel-flow\", \"babel-ts\", \"typescript\", \"acorn\", \"espree\", \"meriyah\", \"css\", \"less\", \"scss\", \"json\", \"json5\", \"json-stringify\", \"graphql\", \"markdown\", \"mdx\", \"vue\", \"yaml\", \"glimmer\", \"html\", \"angular\", \"lwc\""}, "git-hooks.hooks.prettier.settings.plugins": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "Add plugins from paths.", "loc": ["git-hooks", "hooks", "prettier", "settings", "plugins"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.prettier.settings.print-width": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "80", "description": "Line length that the printer will wrap on.", "loc": ["git-hooks", "hooks", "prettier", "settings", "print-width"], "readOnly": false, "type": "signed integer"}, "git-hooks.hooks.prettier.settings.prose-wrap": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"preserve\"", "description": "When to or if at all hard wrap prose to print width.", "loc": ["git-hooks", "hooks", "prettier", "settings", "prose-wrap"], "readOnly": false, "type": "one of \"always\", \"never\", \"preserve\""}, "git-hooks.hooks.prettier.settings.quote-props": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"as-needed\"", "description": "Change when properties in objects are quoted.", "loc": ["git-hooks", "hooks", "prettier", "settings", "quote-props"], "readOnly": false, "type": "one of \"as-needed\", \"consistent\", \"preserve\""}, "git-hooks.hooks.prettier.settings.require-pragma": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Require either '@prettier' or '@format' to be present in the file's first docblock comment.", "loc": ["git-hooks", "hooks", "prettier", "settings", "require-pragma"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.prettier.settings.single-attribute-per-line": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Enforce single attribute per line in HTML, Vue andJSX.", "loc": ["git-hooks", "hooks", "prettier", "settings", "single-attribute-per-line"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.prettier.settings.single-quote": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Number of spaces per indentation-level.", "loc": ["git-hooks", "hooks", "prettier", "settings", "single-quote"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.prettier.settings.tab-width": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "2", "description": "Line length that the printer will wrap on.", "loc": ["git-hooks", "hooks", "prettier", "settings", "tab-width"], "readOnly": false, "type": "signed integer"}, "git-hooks.hooks.prettier.settings.trailing-comma": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"all\"", "description": "Print trailing commas wherever possible in multi-line comma-separated syntactic structures.", "loc": ["git-hooks", "hooks", "prettier", "settings", "trailing-comma"], "readOnly": false, "type": "one of \"all\", \"es5\", \"none\""}, "git-hooks.hooks.prettier.settings.use-tabs": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Indent with tabs instead of spaces.", "loc": ["git-hooks", "hooks", "prettier", "settings", "use-tabs"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.prettier.settings.vue-indent-script-and-style": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Indent script and style tags in Vue files.", "loc": ["git-hooks", "hooks", "prettier", "settings", "vue-indent-script-and-style"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.prettier.settings.with-node-modules": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Process files inside 'node_modules' directory.", "loc": ["git-hooks", "hooks", "prettier", "settings", "with-node-modules"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.prettier.settings.write": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "true", "description": "Edit files in-place.", "loc": ["git-hooks", "hooks", "prettier", "settings", "write"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.prettier.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "prettier", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.prettier.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "prettier", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.prettier.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "prettier", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.prettier.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "prettier", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.psalm": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "psalm hook", "loc": ["git-hooks", "hooks", "psalm"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.psalm.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "psalm", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.psalm.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "psalm", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.psalm.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "psalm", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.psalm.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "psalm", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.psalm.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "psalm", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.psalm.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "psalm", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.psalm.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "psalm", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.psalm.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "psalm", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.psalm.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "psalm", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.psalm.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "psalm", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.psalm.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "psalm", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.psalm.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "psalm", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.psalm.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "psalm", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.psalm.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "psalm", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.psalm.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "psalm", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.psalm.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "psalm", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.psalm.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "psalm", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.psalm.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "psalm", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.psalm.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "psalm", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.psalm.settings.binPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"${tools.psalm}/bin/psalm\"\n", "description": "Psalm binary path.", "loc": ["git-hooks", "hooks", "psalm", "settings", "binPath"], "readOnly": false, "type": "null or string"}, "git-hooks.hooks.psalm.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "psalm", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.psalm.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "psalm", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.psalm.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "psalm", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.psalm.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "psalm", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.pylint": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "pylint hook", "loc": ["git-hooks", "hooks", "pylint"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.pylint.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "pylint", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.pylint.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "pylint", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.pylint.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "pylint", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.pylint.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "pylint", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.pylint.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "pylint", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.pylint.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "pylint", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.pylint.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "pylint", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.pylint.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "pylint", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.pylint.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "pylint", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.pylint.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "pylint", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.pylint.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "pylint", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.pylint.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "pylint", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.pylint.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "pylint", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.pylint.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "pylint", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.pylint.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "pylint", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.pylint.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "pylint", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.pylint.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "pylint", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.pylint.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "pylint", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.pylint.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "pylint", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.pylint.settings.binPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"${tools.pylint}/bin/pylint\"\n", "description": "Pylint binary path. Should be used to specify Pylint binary from your Nix-managed Python environment.", "loc": ["git-hooks", "hooks", "pylint", "settings", "binPath"], "readOnly": false, "type": "null or string"}, "git-hooks.hooks.pylint.settings.reports": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Whether to display a full report.", "loc": ["git-hooks", "hooks", "pylint", "settings", "reports"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.pylint.settings.score": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "true", "description": "Whether to activate the evaluation score.", "loc": ["git-hooks", "hooks", "pylint", "settings", "score"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.pylint.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "pylint", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.pylint.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "pylint", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.pylint.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "pylint", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.pylint.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "pylint", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.pyright": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "pyright hook", "loc": ["git-hooks", "hooks", "pyright"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.pyright.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "pyright", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.pyright.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "pyright", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.pyright.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "pyright", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.pyright.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "pyright", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.pyright.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "pyright", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.pyright.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "pyright", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.pyright.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "pyright", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.pyright.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "pyright", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.pyright.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "pyright", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.pyright.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "pyright", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.pyright.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "pyright", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.pyright.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "pyright", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.pyright.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "pyright", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.pyright.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "pyright", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.pyright.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "pyright", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.pyright.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "pyright", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.pyright.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "pyright", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.pyright.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "pyright", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.pyright.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "pyright", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.pyright.settings.binPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"${tools.pyright}/bin/pyright\"\n", "description": "Pyright binary path. Should be used to specify the pyright executable in an environment containing your typing stubs.", "loc": ["git-hooks", "hooks", "pyright", "settings", "binPath"], "readOnly": false, "type": "null or string"}, "git-hooks.hooks.pyright.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "pyright", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.pyright.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "pyright", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.pyright.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "pyright", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.pyright.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "pyright", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.pyupgrade": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "pyupgrade hook", "loc": ["git-hooks", "hooks", "pyupgrade"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.pyupgrade.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "pyupgrade", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.pyupgrade.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "pyupgrade", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.pyupgrade.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "pyupgrade", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.pyupgrade.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "pyupgrade", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.pyupgrade.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "pyupgrade", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.pyupgrade.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "pyupgrade", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.pyupgrade.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "pyupgrade", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.pyupgrade.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "pyupgrade", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.pyupgrade.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "pyupgrade", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.pyupgrade.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "pyupgrade", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.pyupgrade.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "pyupgrade", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.pyupgrade.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "pyupgrade", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.pyupgrade.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "pyupgrade", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.pyupgrade.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "pyupgrade", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.pyupgrade.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "pyupgrade", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.pyupgrade.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "pyupgrade", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.pyupgrade.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "pyupgrade", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.pyupgrade.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "pyupgrade", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.pyupgrade.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "pyupgrade", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.pyupgrade.settings.binPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"${tools.pyupgrade}/bin/pyupgrade\"\n", "description": "pyupgrade binary path. Should be used to specify the pyupgrade binary from your Nix-managed Python environment.", "loc": ["git-hooks", "hooks", "pyupgrade", "settings", "binPath"], "readOnly": false, "type": "null or string"}, "git-hooks.hooks.pyupgrade.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "pyupgrade", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.pyupgrade.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "pyupgrade", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.pyupgrade.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "pyupgrade", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.pyupgrade.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "pyupgrade", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.reuse": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "reuse hook", "loc": ["git-hooks", "hooks", "reuse"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.reuse.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "reuse", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.reuse.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "reuse", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.reuse.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "reuse", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.reuse.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "reuse", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.reuse.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "reuse", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.reuse.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "reuse", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.reuse.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "reuse", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.reuse.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "reuse", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.reuse.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "reuse", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.reuse.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "reuse", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.reuse.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "reuse", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.reuse.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "reuse", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.reuse.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "reuse", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.reuse.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "reuse", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.reuse.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "reuse", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.reuse.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "reuse", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.reuse.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "reuse", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.reuse.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "reuse", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.reuse.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "reuse", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.reuse.settings.flags": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Flags passed to reuse. For available options run 'reuse lint --help'", "example": "\"--json\"", "loc": ["git-hooks", "hooks", "reuse", "settings", "flags"], "readOnly": false, "type": "string"}, "git-hooks.hooks.reuse.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "reuse", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.reuse.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "reuse", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.reuse.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "reuse", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.reuse.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "reuse", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.revive": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "revive hook", "loc": ["git-hooks", "hooks", "revive"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.revive.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "revive", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.revive.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "revive", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.revive.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "revive", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.revive.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "revive", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.revive.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "revive", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.revive.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "revive", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.revive.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "revive", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.revive.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "revive", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.revive.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "revive", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.revive.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "revive", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.revive.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "revive", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.revive.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "revive", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.revive.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "revive", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.revive.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "revive", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.revive.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "revive", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.revive.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "revive", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.revive.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "revive", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.revive.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "revive", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.revive.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "revive", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.revive.settings.configPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Path to the configuration TOML file.", "loc": ["git-hooks", "hooks", "revive", "settings", "configPath"], "readOnly": false, "type": "string"}, "git-hooks.hooks.revive.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "revive", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.revive.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "revive", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.revive.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "revive", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.revive.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "revive", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.ripsecrets": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "ripsecrets hook", "loc": ["git-hooks", "hooks", "ripsecrets"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.ripsecrets.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "ripsecrets", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.ripsecrets.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "ripsecrets", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.ripsecrets.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "ripsecrets", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.ripsecrets.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "ripsecrets", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.ripsecrets.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "ripsecrets", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.ripsecrets.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "ripsecrets", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.ripsecrets.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "ripsecrets", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.ripsecrets.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "ripsecrets", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.ripsecrets.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "ripsecrets", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.ripsecrets.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "ripsecrets", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.ripsecrets.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "ripsecrets", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.ripsecrets.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "ripsecrets", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.ripsecrets.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "ripsecrets", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.ripsecrets.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "ripsecrets", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.ripsecrets.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "ripsecrets", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.ripsecrets.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "ripsecrets", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.ripsecrets.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "ripsecrets", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.ripsecrets.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "ripsecrets", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.ripsecrets.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "ripsecrets", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.ripsecrets.settings.additionalPatterns": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "Additional regex patterns used to find secrets. If there is a matching group in the regex the matched group will be tested for randomness before being reported as a secret.", "loc": ["git-hooks", "hooks", "ripsecrets", "settings", "additionalPatterns"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.ripsecrets.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "ripsecrets", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.ripsecrets.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "ripsecrets", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.ripsecrets.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "ripsecrets", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.ripsecrets.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "ripsecrets", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.rustfmt": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "Additional rustfmt settings\n\nOverride the `rustfmt` and `cargo` packages by setting `hooks.rustfmt.packageOverrides`.\n\n```\nhooks.rustfmt.packageOverrides.cargo = pkgs.cargo;\nhooks.rustfmt.packageOverrides.rustfmt = pkgs.rustfmt;\n```\n", "loc": ["git-hooks", "hooks", "rustfmt"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.rustfmt.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "rustfmt", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.rustfmt.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "rustfmt", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.rustfmt.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "rustfmt", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.rustfmt.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "rustfmt", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.rustfmt.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "rustfmt", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.rustfmt.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "rustfmt", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.rustfmt.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "rustfmt", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.rustfmt.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "rustfmt", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.rustfmt.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "rustfmt", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.rustfmt.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "rustfmt", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.rustfmt.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "rustfmt", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.rustfmt.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "rustfmt", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.rustfmt.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "rustfmt", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.rustfmt.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "rustfmt", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.rustfmt.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "rustfmt", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.rustfmt.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "rustfmt", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.rustfmt.packageOverrides.cargo": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "The cargo package to use.", "loc": ["git-hooks", "hooks", "rustfmt", "packageOverrides", "cargo"], "readOnly": false, "type": "package"}, "git-hooks.hooks.rustfmt.packageOverrides.rustfmt": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "The rustfmt package to use.", "loc": ["git-hooks", "hooks", "rustfmt", "packageOverrides", "rustfmt"], "readOnly": false, "type": "package"}, "git-hooks.hooks.rustfmt.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "rustfmt", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.rustfmt.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "rustfmt", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.rustfmt.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "rustfmt", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.rustfmt.settings.all": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "true", "description": "Format all packages, and also their local path-based dependencies", "loc": ["git-hooks", "hooks", "rustfmt", "settings", "all"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.rustfmt.settings.check": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Run rustfmt in check mode", "loc": ["git-hooks", "hooks", "rustfmt", "settings", "check"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.rustfmt.settings.color": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"always\"", "description": "Coloring the output", "loc": ["git-hooks", "hooks", "rustfmt", "settings", "color"], "readOnly": false, "type": "one of \"auto\", \"always\", \"never\""}, "git-hooks.hooks.rustfmt.settings.config": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "{ }", "description": "Override configuration values", "loc": ["git-hooks", "hooks", "rustfmt", "settings", "config"], "readOnly": false, "type": "attribute set"}, "git-hooks.hooks.rustfmt.settings.config-path": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "null", "description": "Path to rustfmt.toml config file", "loc": ["git-hooks", "hooks", "rustfmt", "settings", "config-path"], "readOnly": false, "type": "null or string"}, "git-hooks.hooks.rustfmt.settings.emit": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "null", "description": "What data to emit and how", "loc": ["git-hooks", "hooks", "rustfmt", "settings", "emit"], "readOnly": false, "type": "null or one of \"files\", \"stdout\""}, "git-hooks.hooks.rustfmt.settings.files-with-diff": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "", "loc": ["git-hooks", "hooks", "rustfmt", "settings", "files-with-diff"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.rustfmt.settings.manifest-path": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "null", "description": "Path to Cargo.toml", "loc": ["git-hooks", "hooks", "rustfmt", "settings", "manifest-path"], "readOnly": false, "type": "null or string"}, "git-hooks.hooks.rustfmt.settings.message-format": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "null", "description": "The output format of diagnostic messages", "loc": ["git-hooks", "hooks", "rustfmt", "settings", "message-format"], "readOnly": false, "type": "null or one of \"human\", \"short\""}, "git-hooks.hooks.rustfmt.settings.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "Package(s) to check", "loc": ["git-hooks", "hooks", "rustfmt", "settings", "package"], "readOnly": false, "type": "list of string matching the pattern [][*?!0-9A-Za-z_-]+"}, "git-hooks.hooks.rustfmt.settings.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Use verbose output", "loc": ["git-hooks", "hooks", "rustfmt", "settings", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.rustfmt.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "rustfmt", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.rustfmt.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "rustfmt", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.rustfmt.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "rustfmt", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.rustfmt.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "rustfmt", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.shfmt": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "shfmt hook", "loc": ["git-hooks", "hooks", "shfmt"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.shfmt.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "shfmt", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.shfmt.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "shfmt", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.shfmt.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "shfmt", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.shfmt.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "shfmt", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.shfmt.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "shfmt", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.shfmt.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "shfmt", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.shfmt.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "shfmt", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.shfmt.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "shfmt", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.shfmt.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "shfmt", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.shfmt.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "shfmt", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.shfmt.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "shfmt", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.shfmt.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "shfmt", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.shfmt.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "shfmt", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.shfmt.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "shfmt", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.shfmt.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "shfmt", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.shfmt.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "shfmt", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.shfmt.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "shfmt", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.shfmt.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "shfmt", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.shfmt.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "shfmt", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.shfmt.settings.simplify": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "true", "description": "Simplify the code.", "loc": ["git-hooks", "hooks", "shfmt", "settings", "simplify"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.shfmt.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "shfmt", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.shfmt.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "shfmt", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.shfmt.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "shfmt", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.shfmt.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "shfmt", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.sort-file-contents": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "sort-file-contents-hook", "loc": ["git-hooks", "hooks", "sort-file-contents"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.sort-file-contents.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "sort-file-contents", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.sort-file-contents.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "sort-file-contents", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.sort-file-contents.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "sort-file-contents", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.sort-file-contents.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "sort-file-contents", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.sort-file-contents.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "sort-file-contents", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.sort-file-contents.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "sort-file-contents", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.sort-file-contents.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "sort-file-contents", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.sort-file-contents.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "sort-file-contents", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.sort-file-contents.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "sort-file-contents", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.sort-file-contents.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "sort-file-contents", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.sort-file-contents.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "sort-file-contents", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.sort-file-contents.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "sort-file-contents", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.sort-file-contents.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "sort-file-contents", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.sort-file-contents.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "sort-file-contents", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.sort-file-contents.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "sort-file-contents", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.sort-file-contents.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "sort-file-contents", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.sort-file-contents.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "sort-file-contents", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.sort-file-contents.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "sort-file-contents", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.sort-file-contents.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "sort-file-contents", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.sort-file-contents.settings.ignore-case": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Fold lower case to upper case characters.", "loc": ["git-hooks", "hooks", "sort-file-contents", "settings", "ignore-case"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.sort-file-contents.settings.unique": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Ensure each line is unique.", "loc": ["git-hooks", "hooks", "sort-file-contents", "settings", "unique"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.sort-file-contents.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "sort-file-contents", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.sort-file-contents.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "sort-file-contents", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.sort-file-contents.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "sort-file-contents", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.sort-file-contents.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "sort-file-contents", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.statix": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "statix hook", "loc": ["git-hooks", "hooks", "statix"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.statix.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "statix", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.statix.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "statix", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.statix.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "statix", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.statix.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "statix", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.statix.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "statix", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.statix.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "statix", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.statix.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "statix", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.statix.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "statix", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.statix.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "statix", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.statix.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "statix", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.statix.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "statix", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.statix.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "statix", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.statix.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "statix", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.statix.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "statix", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.statix.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "statix", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.statix.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "statix", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.statix.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "statix", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.statix.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "statix", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.statix.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "statix", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.statix.settings.config": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "null", "description": "Path to statix.toml or its parent directory.", "loc": ["git-hooks", "hooks", "statix", "settings", "config"], "readOnly": false, "type": "null or string"}, "git-hooks.hooks.statix.settings.format": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"errfmt\"", "description": "Error Output format.", "loc": ["git-hooks", "hooks", "statix", "settings", "format"], "readOnly": false, "type": "one of \"stderr\", \"errfmt\", \"json\""}, "git-hooks.hooks.statix.settings.ignore": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "Globs of file patterns to skip.", "example": "[\n  \"flake.nix\"\n  \"_*\"\n]", "loc": ["git-hooks", "hooks", "statix", "settings", "ignore"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.statix.settings.unrestricted": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Don't respect .gitignore files.", "example": "true", "loc": ["git-hooks", "hooks", "statix", "settings", "unrestricted"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.statix.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "statix", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.statix.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "statix", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.statix.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "statix", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.statix.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "statix", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.treefmt": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "Treefmt hook.\n\nInclude any additional formatters configured by treefmt as `hooks.treefmt.settings.formatters`.\n\n```\nhooks.treefmt.settings.formatters = [\n  pkgs.nixpkgs-fmt\n  pkgs.black\n];\n```\n\nOverride `treefmt` itself by setting `hooks.treefmt.packageOverrides.treefmt`.\n\n```\nhooks.treefmt.packageOverrides.treefmt = pkgs.treefmt;\n```\n", "loc": ["git-hooks", "hooks", "treefmt"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.treefmt.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "treefmt", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.treefmt.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "treefmt", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.treefmt.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "treefmt", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.treefmt.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "treefmt", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.treefmt.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "treefmt", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.treefmt.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "treefmt", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.treefmt.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "treefmt", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.treefmt.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "treefmt", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.treefmt.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "treefmt", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.treefmt.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "treefmt", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.treefmt.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "treefmt", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.treefmt.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "treefmt", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.treefmt.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "treefmt", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.treefmt.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "treefmt", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.treefmt.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "treefmt", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.treefmt.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "treefmt", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.treefmt.packageOverrides.treefmt": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "The treefmt package to use", "loc": ["git-hooks", "hooks", "treefmt", "packageOverrides", "treefmt"], "readOnly": false, "type": "package"}, "git-hooks.hooks.treefmt.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "treefmt", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.treefmt.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "treefmt", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.treefmt.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "treefmt", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.treefmt.settings.fail-on-change": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "true", "description": "Fail if some files require re-formatting.", "loc": ["git-hooks", "hooks", "treefmt", "settings", "fail-on-change"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.treefmt.settings.formatters": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "The formatter packages configured by treefmt", "loc": ["git-hooks", "hooks", "treefmt", "settings", "formatters"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.treefmt.settings.no-cache": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "true", "description": "Ignore the evaluation cache entirely.", "loc": ["git-hooks", "hooks", "treefmt", "settings", "no-cache"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.treefmt.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "treefmt", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.treefmt.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "treefmt", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.treefmt.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "treefmt", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.treefmt.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "treefmt", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.typos": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "typos hook", "loc": ["git-hooks", "hooks", "typos"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.typos.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "typos", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.typos.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "typos", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.typos.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "typos", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.typos.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "typos", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.typos.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "typos", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.typos.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "typos", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.typos.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "typos", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.typos.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "typos", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.typos.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "typos", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.typos.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "typos", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.typos.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "typos", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.typos.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "typos", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.typos.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "typos", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.typos.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "typos", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.typos.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "typos", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.typos.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "typos", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.typos.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "typos", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.typos.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "typos", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.typos.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "typos", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.typos.settings.binary": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Whether to search binary files.", "loc": ["git-hooks", "hooks", "typos", "settings", "binary"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.typos.settings.color": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"auto\"", "description": "When to use generate output.", "loc": ["git-hooks", "hooks", "typos", "settings", "color"], "readOnly": false, "type": "one of \"auto\", \"always\", \"never\""}, "git-hooks.hooks.typos.settings.configPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Path to a custom config file.", "example": "\".typos.toml\"", "loc": ["git-hooks", "hooks", "typos", "settings", "configPath"], "readOnly": false, "type": "string"}, "git-hooks.hooks.typos.settings.configuration": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Multiline-string configuration passed as config file. If set, config set in `typos.settings.configPath` gets ignored.", "example": "''\n  [files]\n  ignore-dot = true\n  \n  [default]\n  binary = false\n  \n  [type.py]\n  extend-glob = []\n''", "loc": ["git-hooks", "hooks", "typos", "settings", "configuration"], "readOnly": false, "type": "string"}, "git-hooks.hooks.typos.settings.diff": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Print a diff of what would change.", "loc": ["git-hooks", "hooks", "typos", "settings", "diff"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.typos.settings.exclude": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Ignore files and directories matching the glob.", "example": "\"*.nix\"", "loc": ["git-hooks", "hooks", "typos", "settings", "exclude"], "readOnly": false, "type": "string"}, "git-hooks.hooks.typos.settings.format": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"long\"", "description": "Output format to use.", "loc": ["git-hooks", "hooks", "typos", "settings", "format"], "readOnly": false, "type": "one of \"silent\", \"brief\", \"long\", \"json\""}, "git-hooks.hooks.typos.settings.hidden": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Search hidden files and directories.", "loc": ["git-hooks", "hooks", "typos", "settings", "hidden"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.typos.settings.ignored-words": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "Spellings and words to ignore.", "example": "[\n  \"MQTT\"\n  \"mosquitto\"\n]", "loc": ["git-hooks", "hooks", "typos", "settings", "ignored-words"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.typos.settings.locale": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"en\"", "description": "Which language to use for spell checking.", "loc": ["git-hooks", "hooks", "typos", "settings", "locale"], "readOnly": false, "type": "one of \"en\", \"en-us\", \"en-gb\", \"en-ca\", \"en-au\""}, "git-hooks.hooks.typos.settings.no-check-filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Skip verifying spelling in file names.", "loc": ["git-hooks", "hooks", "typos", "settings", "no-check-filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.typos.settings.no-check-files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Skip verifying spelling in files.", "loc": ["git-hooks", "hooks", "typos", "settings", "no-check-files"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.typos.settings.no-unicode": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Only allow ASCII characters in identifiers.", "loc": ["git-hooks", "hooks", "typos", "settings", "no-unicode"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.typos.settings.quiet": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Less output per occurrence.", "loc": ["git-hooks", "hooks", "typos", "settings", "quiet"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.typos.settings.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "More output per occurrence.", "loc": ["git-hooks", "hooks", "typos", "settings", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.typos.settings.write": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Fix spelling in files by writing them. Cannot be used with `typos.settings.diff`.", "loc": ["git-hooks", "hooks", "typos", "settings", "write"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.typos.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "typos", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.typos.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "typos", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.typos.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "typos", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.typos.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "typos", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.vale": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "vale hook", "loc": ["git-hooks", "hooks", "vale"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.vale.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "vale", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.vale.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "vale", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.vale.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "vale", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.vale.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "vale", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.vale.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "vale", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.vale.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "vale", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.vale.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "vale", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.vale.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "vale", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.vale.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "vale", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.vale.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "vale", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.vale.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "vale", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.vale.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "vale", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.vale.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "vale", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.vale.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "vale", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.vale.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "vale", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.vale.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "vale", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.vale.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "vale", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.vale.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "vale", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.vale.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "vale", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.vale.settings.configPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Path to the config file.", "loc": ["git-hooks", "hooks", "vale", "settings", "configPath"], "readOnly": false, "type": "string"}, "git-hooks.hooks.vale.settings.configuration": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Multiline-string configuration passed as config file.", "example": "''\n  MinAlertLevel = suggestion\n  [*]\n  BasedOnStyles = Vale\n''", "loc": ["git-hooks", "hooks", "vale", "settings", "configuration"], "readOnly": false, "type": "string"}, "git-hooks.hooks.vale.settings.flags": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Flags passed to vale.", "loc": ["git-hooks", "hooks", "vale", "settings", "flags"], "readOnly": false, "type": "string"}, "git-hooks.hooks.vale.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "vale", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.vale.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "vale", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.vale.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "vale", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.vale.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "vale", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.yamlfmt": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "yamlfmt hook", "loc": ["git-hooks", "hooks", "yamlfmt"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.yamlfmt.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "yamlfmt", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.yamlfmt.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "yamlfmt", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.yamlfmt.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "yamlfmt", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.yamlfmt.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "yamlfmt", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.yamlfmt.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "yamlfmt", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.yamlfmt.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "yamlfmt", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.yamlfmt.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "yamlfmt", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.yamlfmt.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "yamlfmt", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.yamlfmt.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "yamlfmt", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.yamlfmt.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "yamlfmt", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.yamlfmt.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "yamlfmt", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.yamlfmt.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "yamlfmt", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.yamlfmt.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "yamlfmt", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.yamlfmt.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "yamlfmt", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.yamlfmt.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "yamlfmt", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.yamlfmt.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "yamlfmt", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.yamlfmt.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "yamlfmt", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.yamlfmt.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "yamlfmt", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.yamlfmt.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "yamlfmt", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.yamlfmt.settings.configPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Path to a custom configuration file.", "example": "\".yamlfmt\"", "loc": ["git-hooks", "hooks", "yamlfmt", "settings", "configPath"], "readOnly": false, "type": "string"}, "git-hooks.hooks.yamlfmt.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "yamlfmt", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.yamlfmt.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "yamlfmt", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.yamlfmt.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "yamlfmt", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.yamlfmt.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "yamlfmt", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.yamllint": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "yamllint hook", "loc": ["git-hooks", "hooks", "yamllint"], "readOnly": false, "type": "submodule"}, "git-hooks.hooks.yamllint.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["git-hooks", "hooks", "yamllint", "after"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.yamllint.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["git-hooks", "hooks", "yamllint", "always_run"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.yamllint.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["git-hooks", "hooks", "yamllint", "args"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.yamllint.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["git-hooks", "hooks", "yamllint", "before"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.yamllint.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["git-hooks", "hooks", "yamllint", "description"], "readOnly": false, "type": "string"}, "git-hooks.hooks.yamllint.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["git-hooks", "hooks", "yamllint", "enable"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.yamllint.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["git-hooks", "hooks", "yamllint", "entry"], "readOnly": false, "type": "string"}, "git-hooks.hooks.yamllint.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "yamllint", "exclude_types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.yamllint.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["git-hooks", "hooks", "yamllint", "excludes"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.yamllint.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["git-hooks", "hooks", "yamllint", "extraPackages"], "readOnly": false, "type": "list of package"}, "git-hooks.hooks.yamllint.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["git-hooks", "hooks", "yamllint", "fail_fast"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.yamllint.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["git-hooks", "hooks", "yamllint", "files"], "readOnly": false, "type": "string"}, "git-hooks.hooks.yamllint.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["git-hooks", "hooks", "yamllint", "id"], "readOnly": false, "type": "string"}, "git-hooks.hooks.yamllint.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["git-hooks", "hooks", "yamllint", "language"], "readOnly": false, "type": "string"}, "git-hooks.hooks.yamllint.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["git-hooks", "hooks", "yamllint", "name"], "readOnly": false, "type": "string"}, "git-hooks.hooks.yamllint.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["git-hooks", "hooks", "yamllint", "package"], "readOnly": false, "type": "null or package"}, "git-hooks.hooks.yamllint.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["git-hooks", "hooks", "yamllint", "pass_filenames"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.yamllint.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["git-hooks", "hooks", "yamllint", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "git-hooks.hooks.yamllint.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["git-hooks", "hooks", "yamllint", "require_serial"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.yamllint.settings.configData": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Serialized YAML object describing the configuration.", "example": "\"{extends: relaxed, rules: {line-length: {max: 120}}}\"", "loc": ["git-hooks", "hooks", "yamllint", "settings", "configData"], "readOnly": false, "type": "string"}, "git-hooks.hooks.yamllint.settings.configPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Path to a custom configuration file.", "loc": ["git-hooks", "hooks", "yamllint", "settings", "configPath"], "readOnly": false, "type": "string"}, "git-hooks.hooks.yamllint.settings.configuration": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Multiline-string configuration passed as config file. If set, configuration file set in `yamllint.settings.configPath` gets ignored.", "example": "''\n  ---\n  \n  extends: relaxed\n  \n  rules:\n    indentation: enable\n''", "loc": ["git-hooks", "hooks", "yamllint", "settings", "configuration"], "readOnly": false, "type": "string"}, "git-hooks.hooks.yamllint.settings.format": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"auto\"", "description": "Format for parsing output.", "loc": ["git-hooks", "hooks", "yamllint", "settings", "format"], "readOnly": false, "type": "one of \"parsable\", \"standard\", \"colored\", \"github\", \"auto\""}, "git-hooks.hooks.yamllint.settings.preset": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"default\"", "description": "The configuration preset to use.", "loc": ["git-hooks", "hooks", "yamllint", "settings", "preset"], "readOnly": false, "type": "one of \"default\", \"relaxed\""}, "git-hooks.hooks.yamllint.settings.strict": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "true", "description": "Return non-zero exit code on warnings as well as errors.", "loc": ["git-hooks", "hooks", "yamllint", "settings", "strict"], "readOnly": false, "type": "boolean"}, "git-hooks.hooks.yamllint.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["git-hooks", "hooks", "yamllint", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "git-hooks.hooks.yamllint.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["git-hooks", "hooks", "yamllint", "types"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.yamllint.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["git-hooks", "hooks", "yamllint", "types_or"], "readOnly": false, "type": "list of string"}, "git-hooks.hooks.yamllint.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["git-hooks", "hooks", "yamllint", "verbose"], "readOnly": false, "type": "boolean"}, "git-hooks.installationScript": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/pre-commit.nix"], "description": "A bash snippet that installs nix-pre-commit-hooks in the current directory\n", "loc": ["git-hooks", "installationScript"], "readOnly": true, "type": "string"}, "git-hooks.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/pre-commit.nix"], "default": "pkgs.pre-commit\n", "description": "The `pre-commit` package to use.\n", "loc": ["git-hooks", "package"], "readOnly": false, "type": "package"}, "git-hooks.rootSrc": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/pre-commit.nix"], "default": "gitignoreSource config.src", "description": "The source of the project to be checked.\n\nThis is used in the derivation that performs the check.\n\nIf you use the `flakeModule`, the default is `self.outPath`; the whole flake\nsources.\n", "loc": ["git-hooks", "rootSrc"], "readOnly": false, "type": "path"}, "git-hooks.run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/pre-commit.nix"], "default": "<derivation>", "description": "A derivation that tests whether the pre-commit hooks run cleanly on\nthe entire project.\n", "loc": ["git-hooks", "run"], "readOnly": true, "type": "package"}, "git-hooks.settings.rust.cargoManifestPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "null", "description": "Path to Cargo.toml", "loc": ["git-hooks", "settings", "rust", "cargoManifestPath"], "readOnly": false, "type": "null or string"}, "git-hooks.settings.rust.check.cargoDeps": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "null", "description": "Cargo dependencies needed to run the checks.", "example": "\"pkgs.rustPlatform.importCargoLock { lockFile = ./Cargo.lock; }\"", "loc": ["git-hooks", "settings", "rust", "check", "cargoDeps"], "readOnly": false, "type": "null or (attribute set)"}, "git-hooks.src": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/pre-commit.nix"], "description": "Root of the project. By default this will be filtered with the `gitignoreSource`\nfunction later, unless `rootSrc` is specified.\n\nIf you use the `flakeModule`, the default is `self.outPath`; the whole flake\nsources.\n", "loc": ["git-hooks", "src"], "readOnly": false, "type": "path"}, "git-hooks.tools": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/pre-commit.nix"], "default": "git-hooks.nix-pkgs.callPackage tools-dot-nix { inherit (pkgs) system; }", "description": "Tool set from which `nix-pre-commit-hooks` will pick binaries.\n\n`nix-pre-commit-hooks` comes with its own set of packages for this purpose.\n", "loc": ["git-hooks", "tools"], "readOnly": false, "type": "lazy attribute set of (null or package)"}, "hosts": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/hostctl.nix"], "default": "{ }", "description": "List of hosts entries.", "example": "{\n  \"another-example.com\" = [\n    \"::1\"\n    \"127.0.0.1\"\n  ];\n  \"example.com\" = \"127.0.0.1\";\n}", "loc": ["hosts"], "readOnly": false, "type": "attribute set of (string or list of string)"}, "hostsProfileName": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/hostctl.nix"], "default": "\"devenv-<hash>\"", "description": "Profile name to use.", "loc": ["hostsProfileName"], "readOnly": false, "type": "string"}, "infoSections": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/info.nix"], "default": "{ }", "description": "Information about the environment", "loc": ["infoSections"], "readOnly": false, "type": "attribute set of list of string"}, "languages.ansible.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/ansible.nix"], "default": "false", "description": "Whether to enable tools for Ansible development.", "example": "true", "loc": ["languages", "ansible", "enable"], "readOnly": false, "type": "boolean"}, "languages.ansible.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/ansible.nix"], "default": "pkgs.ansible", "description": "The Ansible package to use.", "loc": ["languages", "ansible", "package"], "readOnly": false, "type": "package"}, "languages.c.debugger": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/c.nix"], "default": "pkgs.gdb", "description": "An optional debugger package to use with c.\nThe default is `gdb`, if supported on the current system.\n", "loc": ["languages", "c", "debugger"], "readOnly": false, "type": "null or package"}, "languages.c.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/c.nix"], "default": "false", "description": "Whether to enable tools for C development.", "example": "true", "loc": ["languages", "c", "enable"], "readOnly": false, "type": "boolean"}, "languages.clojure.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/clojure.nix"], "default": "false", "description": "Whether to enable tools for Clojure development.", "example": "true", "loc": ["languages", "clojure", "enable"], "readOnly": false, "type": "boolean"}, "languages.cplusplus.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/cplusplus.nix"], "default": "false", "description": "Whether to enable tools for C++ development.", "example": "true", "loc": ["languages", "cplusplus", "enable"], "readOnly": false, "type": "boolean"}, "languages.crystal.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/crystal.nix"], "default": "false", "description": "Whether to enable Enable tools for Crystal development..", "example": "true", "loc": ["languages", "crystal", "enable"], "readOnly": false, "type": "boolean"}, "languages.cue.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/cue.nix"], "default": "false", "description": "Whether to enable tools for Cue development.", "example": "true", "loc": ["languages", "cue", "enable"], "readOnly": false, "type": "boolean"}, "languages.cue.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/cue.nix"], "default": "pkgs.cue", "description": "The CUE package to use.", "loc": ["languages", "cue", "package"], "readOnly": false, "type": "package"}, "languages.dart.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/dart.nix"], "default": "false", "description": "Whether to enable tools for Dart development.", "example": "true", "loc": ["languages", "dart", "enable"], "readOnly": false, "type": "boolean"}, "languages.dart.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/dart.nix"], "default": "pkgs.dart", "description": "The Dart package to use.", "loc": ["languages", "dart", "package"], "readOnly": false, "type": "package"}, "languages.deno.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/deno.nix"], "default": "false", "description": "Whether to enable tools for Deno development.", "example": "true", "loc": ["languages", "deno", "enable"], "readOnly": false, "type": "boolean"}, "languages.deno.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/deno.nix"], "default": "pkgs.deno", "description": "Which package of Deno to use.", "loc": ["languages", "deno", "package"], "readOnly": false, "type": "package"}, "languages.dotnet.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/dotnet.nix"], "default": "false", "description": "Whether to enable tools for .NET development.", "example": "true", "loc": ["languages", "dotnet", "enable"], "readOnly": false, "type": "boolean"}, "languages.dotnet.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/dotnet.nix"], "default": "pkgs.dotnet-sdk", "description": "The .NET SDK package to use.", "loc": ["languages", "dotnet", "package"], "readOnly": false, "type": "package"}, "languages.elixir.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/elixir.nix"], "default": "false", "description": "Whether to enable tools for Elixir development.", "example": "true", "loc": ["languages", "elixir", "enable"], "readOnly": false, "type": "boolean"}, "languages.elixir.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/elixir.nix"], "default": "pkgs.elixir", "description": "Which package of Elixir to use.", "loc": ["languages", "elixir", "package"], "readOnly": false, "type": "package"}, "languages.elm.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/elm.nix"], "default": "false", "description": "Whether to enable tools for Elm development.", "example": "true", "loc": ["languages", "elm", "enable"], "readOnly": false, "type": "boolean"}, "languages.erlang.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/erlang.nix"], "default": "false", "description": "Whether to enable tools for Erlang development.", "example": "true", "loc": ["languages", "erlang", "enable"], "readOnly": false, "type": "boolean"}, "languages.erlang.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/erlang.nix"], "default": "pkgs.erlang", "description": "Which package of Erlang to use.", "loc": ["languages", "erlang", "package"], "readOnly": false, "type": "package"}, "languages.fortran.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/fortran.nix"], "default": "false", "description": "Whether to enable tools for Fortran Development..", "example": "true", "loc": ["languages", "fortran", "enable"], "readOnly": false, "type": "boolean"}, "languages.fortran.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/fortran.nix"], "default": "pkgs.gfortran", "description": "The Fortran package to use.", "loc": ["languages", "fortran", "package"], "readOnly": false, "type": "package"}, "languages.gawk.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/gawk.nix"], "default": "false", "description": "Whether to enable tools for GNU Awk development.", "example": "true", "loc": ["languages", "gawk", "enable"], "readOnly": false, "type": "boolean"}, "languages.gleam.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/gleam.nix"], "default": "false", "description": "Whether to enable tools for Gleam development.", "example": "true", "loc": ["languages", "gleam", "enable"], "readOnly": false, "type": "boolean"}, "languages.gleam.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/gleam.nix"], "default": "pkgs.gleam", "description": "The Gleam package to use.", "loc": ["languages", "gleam", "package"], "readOnly": false, "type": "package"}, "languages.go.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/go.nix"], "default": "false", "description": "Whether to enable tools for Go development.", "example": "true", "loc": ["languages", "go", "enable"], "readOnly": false, "type": "boolean"}, "languages.go.enableHardeningWorkaround": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/go.nix"], "default": "false", "description": "Enable hardening workaround required for Delve debugger (https://github.com/go-delve/delve/issues/3085)", "loc": ["languages", "go", "enableHardeningWorkaround"], "readOnly": false, "type": "boolean"}, "languages.go.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/go.nix"], "default": "pkgs.go", "description": "The Go package to use.", "loc": ["languages", "go", "package"], "readOnly": false, "type": "package"}, "languages.haskell.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/haskell.nix"], "default": "false", "description": "Whether to enable tools for Haskell development.", "example": "true", "loc": ["languages", "haskell", "enable"], "readOnly": false, "type": "boolean"}, "languages.haskell.languageServer": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/haskell.nix"], "default": "pkgs.haskell-language-server", "description": "Haskell language server to use.\n", "loc": ["languages", "haskell", "languageServer"], "readOnly": false, "type": "null or package"}, "languages.haskell.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/haskell.nix"], "default": "pkgs.ghc", "description": "Haskell compiler to use.\n", "loc": ["languages", "haskell", "package"], "readOnly": false, "type": "package"}, "languages.haskell.stack": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/haskell.nix"], "default": "pkgs.stack", "description": "Haskell stack to use.\n", "loc": ["languages", "haskell", "stack"], "readOnly": false, "type": "null or package"}, "languages.idris.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/idris.nix"], "default": "false", "description": "Whether to enable tools for Idris development.", "example": "true", "loc": ["languages", "idris", "enable"], "readOnly": false, "type": "boolean"}, "languages.idris.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/idris.nix"], "default": "pkgs.idris2", "description": "The Idris package to use.\n", "example": "pkgs.idris", "loc": ["languages", "idris", "package"], "readOnly": false, "type": "package"}, "languages.java.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/java.nix"], "default": "false", "description": "Whether to enable tools for Java development.", "example": "true", "loc": ["languages", "java", "enable"], "readOnly": false, "type": "boolean"}, "languages.java.gradle.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/java.nix"], "default": "false", "description": "Whether to enable gradle.", "example": "true", "loc": ["languages", "java", "gradle", "enable"], "readOnly": false, "type": "boolean"}, "languages.java.gradle.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/java.nix"], "default": "pkgs.gradle.override { java = cfg.jdk.package; }", "description": "The Gradle package to use.\nThe Gradle package by default inherits the JDK from `languages.java.jdk.package`.\n", "loc": ["languages", "java", "gradle", "package"], "readOnly": false, "type": "package"}, "languages.java.jdk.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/java.nix"], "default": "pkgs.jdk", "description": "The JDK package to use.\nThis will also become available as `JAVA_HOME`.\n", "example": "pkgs.jdk8", "loc": ["languages", "java", "jdk", "package"], "readOnly": false, "type": "package"}, "languages.java.maven.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/java.nix"], "default": "false", "description": "Whether to enable maven.", "example": "true", "loc": ["languages", "java", "maven", "enable"], "readOnly": false, "type": "boolean"}, "languages.java.maven.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/java.nix"], "default": "pkgs.maven.override { jdk_headless = cfg.jdk.package; }", "description": "The Maven package to use.\nThe Maven package by default inherits the JDK from `languages.java.jdk.package`.\n", "loc": ["languages", "java", "maven", "package"], "readOnly": false, "type": "package"}, "languages.javascript.bun.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/javascript.nix"], "default": "false", "description": "Whether to enable install bun.", "example": "true", "loc": ["languages", "javascript", "bun", "enable"], "readOnly": false, "type": "boolean"}, "languages.javascript.bun.install.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/javascript.nix"], "default": "false", "description": "Whether to enable bun install during devenv initialisation.", "example": "true", "loc": ["languages", "javascript", "bun", "install", "enable"], "readOnly": false, "type": "boolean"}, "languages.javascript.bun.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/javascript.nix"], "default": "pkgs.bun", "description": "The bun package to use.", "loc": ["languages", "javascript", "bun", "package"], "readOnly": false, "type": "package"}, "languages.javascript.corepack.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/javascript.nix"], "default": "false", "description": "Whether to enable wrappers for npm, pnpm and Yarn via Node.js Corepack.", "example": "true", "loc": ["languages", "javascript", "corepack", "enable"], "readOnly": false, "type": "boolean"}, "languages.javascript.directory": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/javascript.nix"], "default": "config.devenv.root", "description": "The JavaScript project's root directory. Defaults to the root of the devenv project.\nCan be an absolute path or one relative to the root of the devenv project.\n", "example": "\"./directory\"", "loc": ["languages", "javascript", "directory"], "readOnly": false, "type": "string"}, "languages.javascript.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/javascript.nix"], "default": "false", "description": "Whether to enable tools for JavaScript development.", "example": "true", "loc": ["languages", "javascript", "enable"], "readOnly": false, "type": "boolean"}, "languages.javascript.npm.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/javascript.nix"], "default": "false", "description": "Whether to enable install npm.", "example": "true", "loc": ["languages", "javascript", "npm", "enable"], "readOnly": false, "type": "boolean"}, "languages.javascript.npm.install.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/javascript.nix"], "default": "false", "description": "Whether to enable npm install during devenv initialisation.", "example": "true", "loc": ["languages", "javascript", "npm", "install", "enable"], "readOnly": false, "type": "boolean"}, "languages.javascript.npm.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/javascript.nix"], "default": "languages.javascript.package", "description": "The Node.js package to use.", "loc": ["languages", "javascript", "npm", "package"], "readOnly": false, "type": "package"}, "languages.javascript.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/javascript.nix"], "default": "pkgs.nodejs-slim", "description": "The Node.js package to use.", "loc": ["languages", "javascript", "package"], "readOnly": false, "type": "package"}, "languages.javascript.pnpm.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/javascript.nix"], "default": "false", "description": "Whether to enable install pnpm.", "example": "true", "loc": ["languages", "javascript", "pnpm", "enable"], "readOnly": false, "type": "boolean"}, "languages.javascript.pnpm.install.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/javascript.nix"], "default": "false", "description": "Whether to enable pnpm install during devenv initialisation.", "example": "true", "loc": ["languages", "javascript", "pnpm", "install", "enable"], "readOnly": false, "type": "boolean"}, "languages.javascript.pnpm.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/javascript.nix"], "default": "pkgs.nodePackages.pnpm", "description": "The pnpm package to use.", "loc": ["languages", "javascript", "pnpm", "package"], "readOnly": false, "type": "package"}, "languages.javascript.yarn.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/javascript.nix"], "default": "false", "description": "Whether to enable install yarn.", "example": "true", "loc": ["languages", "javascript", "yarn", "enable"], "readOnly": false, "type": "boolean"}, "languages.javascript.yarn.install.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/javascript.nix"], "default": "false", "description": "Whether to enable yarn install during devenv initialisation.", "example": "true", "loc": ["languages", "javascript", "yarn", "install", "enable"], "readOnly": false, "type": "boolean"}, "languages.javascript.yarn.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/javascript.nix"], "default": "pkgs.yarn", "description": "The yarn package to use.", "loc": ["languages", "javascript", "yarn", "package"], "readOnly": false, "type": "package"}, "languages.jsonnet.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/jsonnet.nix"], "default": "false", "description": "Whether to enable tools for jsonnet development.", "example": "true", "loc": ["languages", "jsonnet", "enable"], "readOnly": false, "type": "boolean"}, "languages.julia.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/julia.nix"], "default": "false", "description": "Whether to enable tools for Julia development.", "example": "true", "loc": ["languages", "julia", "enable"], "readOnly": false, "type": "boolean"}, "languages.julia.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/julia.nix"], "default": "pkgs.julia-bin", "description": "The Julia package to use.", "loc": ["languages", "julia", "package"], "readOnly": false, "type": "package"}, "languages.kotlin.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/kotlin.nix"], "default": "false", "description": "Whether to enable tools for Kotlin development.", "example": "true", "loc": ["languages", "kotlin", "enable"], "readOnly": false, "type": "boolean"}, "languages.lean4.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/lean4.nix"], "default": "false", "description": "Whether to enable tools for lean4 development.", "example": "true", "loc": ["languages", "lean4", "enable"], "readOnly": false, "type": "boolean"}, "languages.lean4.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/lean4.nix"], "default": "pkgs.lean4", "description": "The lean4 package to use.\n", "loc": ["languages", "lean4", "package"], "readOnly": false, "type": "package"}, "languages.lua.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/lua.nix"], "default": "false", "description": "Whether to enable tools for Lua development.", "example": "true", "loc": ["languages", "lua", "enable"], "readOnly": false, "type": "boolean"}, "languages.lua.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/lua.nix"], "default": "pkgs.lua", "description": "The Lua package to use.", "loc": ["languages", "lua", "package"], "readOnly": false, "type": "package"}, "languages.nim.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/nim.nix"], "default": "false", "description": "Whether to enable tools for Nim development.", "example": "true", "loc": ["languages", "nim", "enable"], "readOnly": false, "type": "boolean"}, "languages.nim.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/nim.nix"], "default": "pkgs.nim", "description": "The Nim package to use.", "loc": ["languages", "nim", "package"], "readOnly": false, "type": "package"}, "languages.nix.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/nix.nix"], "default": "false", "description": "Whether to enable tools for Nix development.", "example": "true", "loc": ["languages", "nix", "enable"], "readOnly": false, "type": "boolean"}, "languages.nix.lsp.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/nix.nix"], "default": "pkgs.nil", "description": "The LSP package to use", "loc": ["languages", "nix", "lsp", "package"], "readOnly": false, "type": "package"}, "languages.ocaml.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/ocaml.nix"], "default": "false", "description": "Whether to enable tools for OCaml development.", "example": "true", "loc": ["languages", "ocaml", "enable"], "readOnly": false, "type": "boolean"}, "languages.ocaml.packages": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/ocaml.nix"], "default": "pkgs.ocaml-ng.ocamlPackages_4_12", "description": "The package set of OCaml to use", "loc": ["languages", "ocaml", "packages"], "readOnly": false, "type": "attribute set"}, "languages.odin.debugger": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/odin.nix"], "default": "pkgs.gdb", "description": "An optional debugger package to use with odin.\nThe default is `gdb`, if supported on the current system.\n", "loc": ["languages", "odin", "debugger"], "readOnly": false, "type": "null or package"}, "languages.odin.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/odin.nix"], "default": "false", "description": "Whether to enable tools for Odin Language.", "example": "true", "loc": ["languages", "odin", "enable"], "readOnly": false, "type": "boolean"}, "languages.odin.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/odin.nix"], "default": "pkgs.odin", "description": "The odin package to use.", "loc": ["languages", "odin", "package"], "readOnly": false, "type": "package"}, "languages.opentofu.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/opentofu.nix"], "default": "false", "description": "Whether to enable tools for OpenTofu development.", "example": "true", "loc": ["languages", "opentofu", "enable"], "readOnly": false, "type": "boolean"}, "languages.opentofu.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/opentofu.nix"], "default": "pkgs.opentofu", "description": "The OpenTofu package to use.", "loc": ["languages", "opentofu", "package"], "readOnly": false, "type": "package"}, "languages.pascal.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/pascal.nix"], "default": "false", "description": "Whether to enable tools for Pascal development.", "example": "true", "loc": ["languages", "pascal", "enable"], "readOnly": false, "type": "boolean"}, "languages.pascal.lazarus.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/pascal.nix"], "default": "false", "description": "Whether to enable lazarus graphical IDE for the FreePascal language.", "example": "true", "loc": ["languages", "pascal", "lazarus", "enable"], "readOnly": false, "type": "boolean"}, "languages.perl.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/perl.nix"], "default": "false", "description": "Whether to enable tools for Perl development.", "example": "true", "loc": ["languages", "perl", "enable"], "readOnly": false, "type": "boolean"}, "languages.perl.packages": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/perl.nix"], "default": "[ ]", "description": "Perl packages to include", "example": "[\n  \"Mojolicious\"\n]", "loc": ["languages", "perl", "packages"], "readOnly": false, "type": "list of string"}, "languages.php.disableExtensions": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/php.nix"], "default": "[ ]", "description": "PHP extensions to disable.\n", "loc": ["languages", "php", "disableExtensions"], "readOnly": false, "type": "list of string"}, "languages.php.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/php.nix"], "default": "false", "description": "Whether to enable tools for PHP development.", "example": "true", "loc": ["languages", "php", "enable"], "readOnly": false, "type": "boolean"}, "languages.php.extensions": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/php.nix"], "default": "[ ]", "description": "PHP extensions to enable.\n", "loc": ["languages", "php", "extensions"], "readOnly": false, "type": "list of string"}, "languages.php.fpm.extraConfig": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/php.nix"], "default": "null", "description": "Extra configuration that should be put in the global section of\nthe PHP-FPM configuration file. Do not specify the options\n`error_log` or `daemonize` here, since they are generated by\nNixOS.\n", "loc": ["languages", "php", "fpm", "extraConfig"], "readOnly": false, "type": "null or strings concatenated with \"\\n\""}, "languages.php.fpm.phpOptions": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/php.nix"], "default": "\"\"", "description": "Options appended to the PHP configuration file `php.ini`.\n", "example": "''\n  date.timezone = \"CET\"\n''", "loc": ["languages", "php", "fpm", "phpOptions"], "readOnly": false, "type": "strings concatenated with \"\\n\""}, "languages.php.fpm.pools": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/php.nix"], "default": "{ }", "description": "PHP-FPM pools. If no pools are defined, the PHP-FPM\nservice is disabled.\n", "example": "{\n  mypool = {\n    user = \"php\";\n    group = \"php\";\n    phpPackage = pkgs.php;\n    settings = {\n      \"pm\" = \"dynamic\";\n      \"pm.max_children\" = 75;\n      \"pm.start_servers\" = 10;\n      \"pm.min_spare_servers\" = 5;\n      \"pm.max_spare_servers\" = 20;\n      \"pm.max_requests\" = 500;\n    };\n  }\n}", "loc": ["languages", "php", "fpm", "pools"], "readOnly": false, "type": "attribute set of (submodule)"}, "languages.php.fpm.pools.<name>.extraConfig": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/php.nix"], "default": "null", "description": "Extra lines that go into the pool configuration.\nSee the documentation on `php-fpm.conf` for\ndetails on configuration directives.\n", "loc": ["languages", "php", "fpm", "pools", "<name>", "extraConfig"], "readOnly": false, "type": "null or strings concatenated with \"\\n\""}, "languages.php.fpm.pools.<name>.listen": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/php.nix"], "default": "\"\"", "description": "The address on which to accept FastCGI requests.\n", "example": "\"/path/to/unix/socket\"", "loc": ["languages", "php", "fpm", "pools", "<name>", "listen"], "readOnly": false, "type": "string"}, "languages.php.fpm.pools.<name>.phpEnv": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/php.nix"], "default": "{ }", "description": "Environment variables used for this PHP-FPM pool.\n", "example": "{\n  HOSTNAME = \"$HOSTNAME\";\n  TMP = \"/tmp\";\n  TMPDIR = \"/tmp\";\n  TEMP = \"/tmp\";\n}\n", "loc": ["languages", "php", "fpm", "pools", "<name>", "phpEnv"], "readOnly": false, "type": "attribute set of string"}, "languages.php.fpm.pools.<name>.phpOptions": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/php.nix"], "description": "Options appended to the PHP configuration file `php.ini` used for this PHP-FPM pool.\n", "loc": ["languages", "php", "fpm", "pools", "<name>", "phpOptions"], "readOnly": false, "type": "strings concatenated with \"\\n\""}, "languages.php.fpm.pools.<name>.phpPackage": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/php.nix"], "default": "phpfpm.phpPackage", "description": "The PHP package to use for running this PHP-FPM pool.\n", "loc": ["languages", "php", "fpm", "pools", "<name>", "phpPackage"], "readOnly": false, "type": "package"}, "languages.php.fpm.pools.<name>.settings": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/php.nix"], "default": "{ }", "description": "PHP-FPM pool directives. Refer to the \"List of pool directives\" section of\n<https://www.php.net/manual/en/install.fpm.configuration.php\">\nthe manual for details. Note that settings names must be\nenclosed in quotes (e.g. `\"pm.max_children\"` instead of\n`pm.max_children`).\n", "example": "{\n  \"pm\" = \"dynamic\";\n  \"pm.max_children\" = 75;\n  \"pm.start_servers\" = 10;\n  \"pm.min_spare_servers\" = 5;\n  \"pm.max_spare_servers\" = 20;\n  \"pm.max_requests\" = 500;\n}\n", "loc": ["languages", "php", "fpm", "pools", "<name>", "settings"], "readOnly": false, "type": "attribute set of (string or signed integer or boolean)"}, "languages.php.fpm.pools.<name>.socket": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/php.nix"], "description": "Path to the Unix socket file on which to accept FastCGI requests.\n\nThis option is read-only and managed by NixOS.\n", "example": "config.env.DEVENV_STATE + \"/php-fpm/<name>.sock\"", "loc": ["languages", "php", "fpm", "pools", "<name>", "socket"], "readOnly": true, "type": "string"}, "languages.php.fpm.settings": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/php.nix"], "default": "{\n  error_log = config.env.DEVENV_STATE + \"/php-fpm/php-fpm.log\";\n}\n", "description": "PHP-FPM global directives. \n\nRefer to the \"List of global php-fpm.conf directives\" section of\n<https://www.php.net/manual/en/install.fpm.configuration.php>\nfor details. \n\nNote that settings names must be enclosed in\nquotes (e.g. `\"pm.max_children\"` instead of `pm.max_children`). \n\nYou need not specify the options `error_log` or `daemonize` here, since\nthey are already set.\n", "loc": ["languages", "php", "fpm", "settings"], "readOnly": false, "type": "attribute set of (string or signed integer or boolean)"}, "languages.php.ini": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/php.nix"], "default": "\"\"", "description": "PHP.ini directives. Refer to the \"List of php.ini directives\" of PHP's\n", "loc": ["languages", "php", "ini"], "readOnly": false, "type": "null or strings concatenated with \"\\n\""}, "languages.php.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/php.nix"], "default": "pkgs.php", "description": "Allows you to [override the default used package](https://nixos.org/manual/nixpkgs/stable/#ssec-php-user-guide)\nto adjust the settings or add more extensions. You can find the\nextensions using `devenv search 'php extensions'`\n", "example": "pkgs.php.buildEnv {\n  extensions = { all, enabled }: with all; enabled ++ [ xdebug ];\n  extraConfig = ''\n    memory_limit=1G\n  '';\n};\n", "loc": ["languages", "php", "package"], "readOnly": false, "type": "package"}, "languages.php.packages": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/php.nix"], "default": "pkgs", "description": "Attribute set of packages including composer", "loc": ["languages", "php", "packages"], "readOnly": false, "type": "submodule"}, "languages.php.packages.composer": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/php.nix"], "default": "pkgs.phpPackages.composer", "description": "composer package", "loc": ["languages", "php", "packages", "composer"], "readOnly": false, "type": "null or package"}, "languages.php.version": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/php.nix"], "default": "\"\"", "description": "The PHP version to use.", "loc": ["languages", "php", "version"], "readOnly": false, "type": "string"}, "languages.purescript.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/purescript.nix"], "default": "false", "description": "Whether to enable tools for PureScript development.", "example": "true", "loc": ["languages", "purescript", "enable"], "readOnly": false, "type": "boolean"}, "languages.purescript.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/purescript.nix"], "default": "pkgs.purescript", "description": "The PureScript package to use.", "loc": ["languages", "purescript", "package"], "readOnly": false, "type": "package"}, "languages.python.directory": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/python.nix"], "default": "config.devenv.root", "description": "The Python project's root directory. Defaults to the root of the devenv project.\nCan be an absolute path or one relative to the root of the devenv project.\n", "example": "\"./directory\"", "loc": ["languages", "python", "directory"], "readOnly": false, "type": "string"}, "languages.python.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/python.nix"], "default": "false", "description": "Whether to enable tools for Python development.", "example": "true", "loc": ["languages", "python", "enable"], "readOnly": false, "type": "boolean"}, "languages.python.libraries": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/python.nix"], "default": "[ \"${config.devenv.dotfile}/profile\" ]\n", "description": "Additional libraries to make available to the Python interpreter.\n\nThis is useful when you want to use Python wheels that depend on native libraries.\n", "loc": ["languages", "python", "libraries"], "readOnly": false, "type": "list of path"}, "languages.python.manylinux.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/python.nix"], "default": "false", "description": "Whether to install manylinux2014 libraries.\n\nEnabled by default on linux;\n\nThis is useful when you want to use Python wheels that depend on manylinux2014 libraries.\n", "loc": ["languages", "python", "manylinux", "enable"], "readOnly": false, "type": "boolean"}, "languages.python.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/python.nix"], "default": "pkgs.python3", "description": "The Python package to use.", "loc": ["languages", "python", "package"], "readOnly": false, "type": "package"}, "languages.python.poetry.activate.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/python.nix"], "default": "false", "description": "Whether to activate the poetry virtual environment automatically.", "loc": ["languages", "python", "poetry", "activate", "enable"], "readOnly": false, "type": "boolean"}, "languages.python.poetry.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/python.nix"], "default": "false", "description": "Whether to enable poetry.", "example": "true", "loc": ["languages", "python", "poetry", "enable"], "readOnly": false, "type": "boolean"}, "languages.python.poetry.install.allExtras": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/python.nix"], "default": "false", "description": "Whether to install all extras. See `--all-extras`.", "loc": ["languages", "python", "poetry", "install", "allExtras"], "readOnly": false, "type": "boolean"}, "languages.python.poetry.install.compile": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/python.nix"], "default": "false", "description": "Whether `poetry install` should compile Python source files to bytecode.", "loc": ["languages", "python", "poetry", "install", "compile"], "readOnly": false, "type": "boolean"}, "languages.python.poetry.install.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/python.nix"], "default": "false", "description": "Whether to enable poetry install during devenv initialisation.", "example": "true", "loc": ["languages", "python", "poetry", "install", "enable"], "readOnly": false, "type": "boolean"}, "languages.python.poetry.install.extras": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/python.nix"], "default": "[ ]", "description": "Which extras to install. See `--extras`.", "loc": ["languages", "python", "poetry", "install", "extras"], "readOnly": false, "type": "list of string"}, "languages.python.poetry.install.groups": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/python.nix"], "default": "[ ]", "description": "Which dependency groups to install. See `--with`.", "loc": ["languages", "python", "poetry", "install", "groups"], "readOnly": false, "type": "list of string"}, "languages.python.poetry.install.ignoredGroups": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/python.nix"], "default": "[ ]", "description": "Which dependency groups to ignore. See `--without`.", "loc": ["languages", "python", "poetry", "install", "ignoredGroups"], "readOnly": false, "type": "list of string"}, "languages.python.poetry.install.installRootPackage": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/python.nix"], "default": "false", "description": "Whether the root package (your project) should be installed. See `--no-root`", "loc": ["languages", "python", "poetry", "install", "installRootPackage"], "readOnly": false, "type": "boolean"}, "languages.python.poetry.install.onlyGroups": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/python.nix"], "default": "[ ]", "description": "Which dependency groups to exclusively install. See `--only`.", "loc": ["languages", "python", "poetry", "install", "onlyGroups"], "readOnly": false, "type": "list of string"}, "languages.python.poetry.install.onlyInstallRootPackage": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/python.nix"], "default": "false", "description": "Whether to only install the root package (your project) should be installed, but no dependencies. See `--only-root`", "loc": ["languages", "python", "poetry", "install", "onlyInstallRootPackage"], "readOnly": false, "type": "boolean"}, "languages.python.poetry.install.quiet": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/python.nix"], "default": "false", "description": "Whether `poetry install` should avoid outputting messages during devenv initialisation.", "loc": ["languages", "python", "poetry", "install", "quiet"], "readOnly": false, "type": "boolean"}, "languages.python.poetry.install.verbosity": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/python.nix"], "default": "\"no\"", "description": "What level of verbosity the output of `poetry install` should have.", "loc": ["languages", "python", "poetry", "install", "verbosity"], "readOnly": false, "type": "one of \"no\", \"little\", \"more\", \"debug\""}, "languages.python.poetry.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/python.nix"], "default": "pkgs.poetry", "description": "The Poetry package to use.", "loc": ["languages", "python", "poetry", "package"], "readOnly": false, "type": "package"}, "languages.python.uv.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/python.nix"], "default": "false", "description": "Whether to enable uv.", "example": "true", "loc": ["languages", "python", "uv", "enable"], "readOnly": false, "type": "boolean"}, "languages.python.uv.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/python.nix"], "default": "pkgs.uv", "description": "The uv package to use.", "loc": ["languages", "python", "uv", "package"], "readOnly": false, "type": "package"}, "languages.python.uv.sync.allExtras": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/python.nix"], "default": "false", "description": "Whether to install all extras. See `--all-extras`.", "loc": ["languages", "python", "uv", "sync", "allExtras"], "readOnly": false, "type": "boolean"}, "languages.python.uv.sync.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/python.nix"], "default": "false", "description": "Whether to enable uv sync during devenv initialisation.", "example": "true", "loc": ["languages", "python", "uv", "sync", "enable"], "readOnly": false, "type": "boolean"}, "languages.python.uv.sync.extras": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/python.nix"], "default": "[ ]", "description": "Which extras to install. See `--extra`.", "loc": ["languages", "python", "uv", "sync", "extras"], "readOnly": false, "type": "list of string"}, "languages.python.venv.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/python.nix"], "default": "false", "description": "Whether to enable Python virtual environment.", "example": "true", "loc": ["languages", "python", "venv", "enable"], "readOnly": false, "type": "boolean"}, "languages.python.venv.quiet": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/python.nix"], "default": "false", "description": "Whether `pip install` should avoid outputting messages during devenv initialisation.", "loc": ["languages", "python", "venv", "quiet"], "readOnly": false, "type": "boolean"}, "languages.python.venv.requirements": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/python.nix"], "default": "null", "description": "Contents of pip requirements.txt file.\nThis is passed to `pip install -r` during `devenv shell` initialisation.\n", "loc": ["languages", "python", "venv", "requirements"], "readOnly": false, "type": "null or strings concatenated with \"\\n\" or path"}, "languages.python.version": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/python.nix"], "default": "null", "description": "The Python version to use.\nThis automatically sets the `languages.python.package` using [nixpkgs-python](https://github.com/cachix/nixpkgs-python).\n", "example": "\"3.11 or 3.11.2\"", "loc": ["languages", "python", "version"], "readOnly": false, "type": "null or string"}, "languages.r.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/r.nix"], "default": "false", "description": "Whether to enable tools for R development.", "example": "true", "loc": ["languages", "r", "enable"], "readOnly": false, "type": "boolean"}, "languages.r.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/r.nix"], "default": "pkgs.R", "description": "The R package to use.", "loc": ["languages", "r", "package"], "readOnly": false, "type": "package"}, "languages.r.radian.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/r.nix"], "default": "false", "description": "Whether to enable a 21 century R console.", "example": "true", "loc": ["languages", "r", "radian", "enable"], "readOnly": false, "type": "boolean"}, "languages.r.radian.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/r.nix"], "default": "pkgs.radianWrapper", "description": "The radian package to use.", "loc": ["languages", "r", "radian", "package"], "readOnly": false, "type": "package"}, "languages.racket.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/racket.nix"], "default": "false", "description": "Whether to enable tools for Racket development.", "example": "true", "loc": ["languages", "racket", "enable"], "readOnly": false, "type": "boolean"}, "languages.racket.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/racket.nix"], "default": "pkgs.racket-minimal", "description": "The Racket package to use.", "loc": ["languages", "racket", "package"], "readOnly": false, "type": "package"}, "languages.raku.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/raku.nix"], "default": "false", "description": "Whether to enable tools for Raku development.", "example": "true", "loc": ["languages", "raku", "enable"], "readOnly": false, "type": "boolean"}, "languages.robotframework.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/robotframework.nix"], "default": "false", "description": "Whether to enable tools for Robot Framework development.", "example": "true", "loc": ["languages", "robotframework", "enable"], "readOnly": false, "type": "boolean"}, "languages.robotframework.python": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/robotframework.nix"], "default": "pkgs.python3", "description": "The Python package to use.", "loc": ["languages", "robotframework", "python"], "readOnly": false, "type": "package"}, "languages.ruby.bundler.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/ruby.nix"], "default": "false", "description": "Whether to enable bundler.", "example": "true", "loc": ["languages", "ruby", "bundler", "enable"], "readOnly": false, "type": "boolean"}, "languages.ruby.bundler.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/ruby.nix"], "default": "pkgs.bundler.override { ruby = cfg.package; }", "description": "The bundler package to use.", "loc": ["languages", "ruby", "bundler", "package"], "readOnly": false, "type": "package"}, "languages.ruby.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/ruby.nix"], "default": "false", "description": "Whether to enable tools for Ruby development.", "example": "true", "loc": ["languages", "ruby", "enable"], "readOnly": false, "type": "boolean"}, "languages.ruby.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/ruby.nix"], "default": "pkgs.ruby_3_1", "description": "The Ruby package to use.", "loc": ["languages", "ruby", "package"], "readOnly": false, "type": "package"}, "languages.ruby.version": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/ruby.nix"], "default": "null", "description": "The Ruby version to use.\nThis automatically sets the `languages.ruby.package` using [nixpkgs-ruby](https://github.com/bobvanderlinden/nixpkgs-ruby).\n", "example": "\"3.2.1\"", "loc": ["languages", "ruby", "version"], "readOnly": false, "type": "null or string"}, "languages.ruby.versionFile": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/ruby.nix"], "default": "null", "description": "The .ruby-version file path to extract the Ruby version from.\nThis automatically sets the `languages.ruby.package` using [nixpkgs-ruby](https://github.com/bobvanderlinden/nixpkgs-ruby).\nWhen the `.ruby-version` file exists in the same directory as the devenv configuration, you can use:\n\n```nix\nlanguages.ruby.versionFile = ./.ruby-version;\n```\n", "example": "./ruby-version\n", "loc": ["languages", "ruby", "versionFile"], "readOnly": false, "type": "null or path"}, "languages.rust.channel": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/rust.nix"], "default": "\"nixpkgs\"", "description": "The rustup toolchain to install.", "loc": ["languages", "rust", "channel"], "readOnly": false, "type": "one of \"nixpkgs\", \"stable\", \"beta\", \"nightly\""}, "languages.rust.components": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/rust.nix"], "default": "[ \"rustc\" \"cargo\" \"clippy\" \"rustfmt\" \"rust-analyzer\" ]", "description": "List of [Rustup components](https://rust-lang.github.io/rustup/concepts/components.html)\nto install. Defaults to those available in `nixpkgs`.\n", "loc": ["languages", "rust", "components"], "readOnly": false, "type": "list of string"}, "languages.rust.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/rust.nix"], "default": "false", "description": "Whether to enable tools for Rust development.", "example": "true", "loc": ["languages", "rust", "enable"], "readOnly": false, "type": "boolean"}, "languages.rust.mold.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/rust.nix"], "default": "pkgs.stdenv.isLinux && pkgs.stdenv.isx86_64 && languages.rust.targets == [ ]", "description": "Enable mold as the linker.\n\nEnabled by default on x86_64 Linux machines when no cross-compilation targets are specified.\n", "loc": ["languages", "rust", "mold", "enable"], "readOnly": false, "type": "boolean"}, "languages.rust.rustflags": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/rust.nix"], "default": "\"\"", "description": "Extra flags to pass to the Rust compiler.", "loc": ["languages", "rust", "rustflags"], "readOnly": false, "type": "string"}, "languages.rust.targets": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/rust.nix"], "default": "[ ]", "description": "List of extra [targets](https://github.com/nix-community/fenix#supported-platforms-and-targets)\nto install. Defaults to only the native target.\n", "loc": ["languages", "rust", "targets"], "readOnly": false, "type": "list of string"}, "languages.rust.toolchain": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/rust.nix"], "default": "nixpkgs", "description": "Rust component packages. May optionally define additional components, for example `miri`.", "loc": ["languages", "rust", "toolchain"], "readOnly": false, "type": "attribute set of package"}, "languages.rust.toolchain.cargo": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/rust.nix"], "default": "pkgs.cargo", "description": "cargo package", "loc": ["languages", "rust", "toolchain", "cargo"], "readOnly": false, "type": "null or package"}, "languages.rust.toolchain.clippy": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/rust.nix"], "default": "pkgs.clippy", "description": "clippy package", "loc": ["languages", "rust", "toolchain", "clippy"], "readOnly": false, "type": "null or package"}, "languages.rust.toolchain.rust-analyzer": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/rust.nix"], "default": "pkgs.rust-analyzer", "description": "rust-analyzer package", "loc": ["languages", "rust", "toolchain", "rust-analyzer"], "readOnly": false, "type": "null or package"}, "languages.rust.toolchain.rustc": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/rust.nix"], "default": "pkgs.rustc", "description": "rustc package", "loc": ["languages", "rust", "toolchain", "rustc"], "readOnly": false, "type": "null or package"}, "languages.rust.toolchain.rustfmt": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/rust.nix"], "default": "pkgs.rustfmt", "description": "rustfmt package", "loc": ["languages", "rust", "toolchain", "rustfmt"], "readOnly": false, "type": "null or package"}, "languages.scala.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/scala.nix"], "default": "false", "description": "Whether to enable tools for Scala development.", "example": "true", "loc": ["languages", "scala", "enable"], "readOnly": false, "type": "boolean"}, "languages.scala.mill.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/scala.nix"], "default": "false", "description": "Whether to enable mill, a simplified, fast build tool for Scala.", "example": "true", "loc": ["languages", "scala", "mill", "enable"], "readOnly": false, "type": "boolean"}, "languages.scala.mill.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/scala.nix"], "default": "pkgs.mill", "description": "The mill package to use.", "loc": ["languages", "scala", "mill", "package"], "readOnly": false, "type": "package"}, "languages.scala.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/scala.nix"], "default": "pkgs.scala_3", "description": "The Scala package to use.\n", "loc": ["languages", "scala", "package"], "readOnly": false, "type": "package"}, "languages.scala.sbt.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/scala.nix"], "default": "false", "description": "Whether to enable sbt, the standard build tool for Scala.", "example": "true", "loc": ["languages", "scala", "sbt", "enable"], "readOnly": false, "type": "boolean"}, "languages.scala.sbt.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/scala.nix"], "default": "pkgs.sbt", "description": "The sbt package to use.", "example": "sbt-with-scala-native", "loc": ["languages", "scala", "sbt", "package"], "readOnly": false, "type": "package"}, "languages.shell.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/shell.nix"], "default": "false", "description": "Whether to enable tools for shell development.", "example": "true", "loc": ["languages", "shell", "enable"], "readOnly": false, "type": "boolean"}, "languages.solidity.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/solidity.nix"], "default": "false", "description": "Whether to enable tools for Solidity development.", "example": "true", "loc": ["languages", "solidity", "enable"], "readOnly": false, "type": "boolean"}, "languages.solidity.foundry.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/solidity.nix"], "default": "false", "description": "Whether to enable install Foundry.", "example": "true", "loc": ["languages", "solidity", "foundry", "enable"], "readOnly": false, "type": "boolean"}, "languages.solidity.foundry.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/solidity.nix"], "default": "foundry.defaultPackage.$${pkgs.stdenv.system}", "description": "Which Foundry package to use.", "loc": ["languages", "solidity", "foundry", "package"], "readOnly": false, "type": "package"}, "languages.solidity.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/solidity.nix"], "default": "pkgs.solc", "description": "Which compiler of Solidity to use.", "loc": ["languages", "solidity", "package"], "readOnly": false, "type": "package"}, "languages.standardml.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/standardml.nix"], "default": "false", "description": "Whether to enable tools for Standard ML development.", "example": "true", "loc": ["languages", "standardml", "enable"], "readOnly": false, "type": "boolean"}, "languages.standardml.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/standardml.nix"], "default": "pkgs.mlton", "description": "The Standard ML package to use.\n", "loc": ["languages", "standardml", "package"], "readOnly": false, "type": "package"}, "languages.swift.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/swift.nix"], "default": "false", "description": "Whether to enable tools for Swift development.", "example": "true", "loc": ["languages", "swift", "enable"], "readOnly": false, "type": "boolean"}, "languages.swift.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/swift.nix"], "default": "pkgs.swift", "description": "The Swift package to use.\n", "loc": ["languages", "swift", "package"], "readOnly": false, "type": "package"}, "languages.terraform.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/terraform.nix"], "default": "false", "description": "Whether to enable tools for Terraform development.", "example": "true", "loc": ["languages", "terraform", "enable"], "readOnly": false, "type": "boolean"}, "languages.terraform.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/terraform.nix"], "default": "pkgs.terraform", "description": "The Terraform package to use.", "loc": ["languages", "terraform", "package"], "readOnly": false, "type": "package"}, "languages.terraform.version": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/terraform.nix"], "default": "null", "description": "The Terraform version to use.\nThis automatically sets the `languages.terraform.package` using [nixpkgs-terraform](https://github.com/stackbuilders/nixpkgs-terraform).\n", "example": "\"1.5.0 or 1.6.2\"", "loc": ["languages", "terraform", "version"], "readOnly": false, "type": "null or string"}, "languages.texlive.base": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/texlive.nix"], "default": "pkgs.texliveSmall", "description": "TeX Live package set to use", "example": "pkgs.texliveBasic", "loc": ["languages", "texlive", "base"], "readOnly": false, "type": "unspecified value"}, "languages.texlive.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/texlive.nix"], "default": "false", "description": "Whether to enable TeX Live.", "example": "true", "loc": ["languages", "texlive", "enable"], "readOnly": false, "type": "boolean"}, "languages.texlive.packages": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/texlive.nix"], "default": "[ ]", "description": "Extra packages to add to the base TeX Live set", "example": "[\n  \"algorithms\"\n  \"latexmk\"\n]", "loc": ["languages", "texlive", "packages"], "readOnly": false, "type": "list of string"}, "languages.typescript.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/typescript.nix"], "default": "false", "description": "Whether to enable tools for TypeScript development.", "example": "true", "loc": ["languages", "typescript", "enable"], "readOnly": false, "type": "boolean"}, "languages.typst.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/typst.nix"], "default": "false", "description": "Whether to enable tools for Typst development.", "example": "true", "loc": ["languages", "typst", "enable"], "readOnly": false, "type": "boolean"}, "languages.typst.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/typst.nix"], "default": "pkgs.typst", "description": "Which package of Typst to use.", "loc": ["languages", "typst", "package"], "readOnly": false, "type": "package"}, "languages.unison.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/unison.nix"], "default": "false", "description": "Whether to enable tools for Unison development.", "example": "true", "loc": ["languages", "unison", "enable"], "readOnly": false, "type": "boolean"}, "languages.unison.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/unison.nix"], "default": "pkgs.unison-ucm", "description": "Which package of Unison to use", "loc": ["languages", "unison", "package"], "readOnly": false, "type": "package"}, "languages.v.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/v.nix"], "default": "false", "description": "Whether to enable tools for V development.", "example": "true", "loc": ["languages", "v", "enable"], "readOnly": false, "type": "boolean"}, "languages.v.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/v.nix"], "default": "pkgs.vlang", "description": "The V package to use.", "loc": ["languages", "v", "package"], "readOnly": false, "type": "package"}, "languages.vala.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/vala.nix"], "default": "false", "description": "Whether to enable tools for Vala development.", "example": "true", "loc": ["languages", "vala", "enable"], "readOnly": false, "type": "boolean"}, "languages.vala.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/vala.nix"], "default": "pkgs.vala", "description": "The Vala package to use.", "example": "pkgs.vala_0_54", "loc": ["languages", "vala", "package"], "readOnly": false, "type": "package"}, "languages.zig.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/zig.nix"], "default": "false", "description": "Whether to enable tools for Zig development.", "example": "true", "loc": ["languages", "zig", "enable"], "readOnly": false, "type": "boolean"}, "languages.zig.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/languages/zig.nix"], "default": "pkgs.zig", "description": "Which package of Zig to use.", "loc": ["languages", "zig", "package"], "readOnly": false, "type": "package"}, "name": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/top-level.nix"], "default": "null", "description": "Name of the project.", "loc": ["name"], "readOnly": false, "type": "null or string"}, "outputs": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/outputs.nix"], "default": "{\n  foo = {\n    ncdu = <derivation ncdu-2.7>;\n  };\n  git = <derivation git-2.47.0>;\n}", "description": "Nix outputs for `devenv build` consumption.\n", "loc": ["outputs"], "readOnly": false, "type": "outputOf (attribute set)"}, "packages": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/top-level.nix"], "default": "[ ]", "description": "A list of packages to expose inside the developer environment. Search available packages using ``devenv search NAME``.", "loc": ["packages"], "readOnly": false, "type": "list of package"}, "pre-commit": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/git-hooks.nix"], "description": "Alias of {option}`git-hooks`.", "loc": ["pre-commit"], "readOnly": false, "type": "submodule"}, "pre-commit.addGcRoot": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/pre-commit.nix"], "default": "true", "description": "Whether to add the generated pre-commit-config.yaml to the garbage collector roots.\nThis prevents Nix from garbage-collecting the tools used by hooks.\n", "loc": ["pre-commit", "addGcRoot"], "readOnly": false, "type": "boolean"}, "pre-commit.default_stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/pre-commit.nix"], "default": "[\n  \"pre-commit\"\n]", "description": "A configuration wide option for the stages property.\nInstalls hooks to the defined stages.\nSee [https://pre-commit.com/#confining-hooks-to-run-at-certain-stages](https://pre-commit.com/#confining-hooks-to-run-at-certain-stages).\n", "loc": ["pre-commit", "default_stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.enabledPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/pre-commit.nix"], "default": "[ ]", "description": "All packages provided by hooks that are enabled.\n\nUseful for including into the developer environment.\n", "loc": ["pre-commit", "enabledPackages"], "readOnly": false, "type": "list of unspecified value"}, "pre-commit.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/pre-commit.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.gitPackage": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/pre-commit.nix"], "default": "pkgs.gitMinimal\n", "description": "The `git` package to use.\n", "loc": ["pre-commit", "gitPackage"], "readOnly": false, "type": "package"}, "pre-commit.hooks": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix", "/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/pre-commit.nix"], "default": "{ }", "description": "The hook definitions.\n\nYou can both specify your own hooks here and you can enable predefined hooks.\n\nExample of enabling a predefined hook:\n\n```nix\nhooks.nixpkgs-fmt.enable = true;\n```\n\nExample of a custom hook:\n\n```nix\nhooks.my-tool = {\n  enable = true;\n  name = \"my-tool\";\n  description = \"Run MyTool on all files in the project\";\n  files = \"\\\\.mtl$\";\n  entry = \"${pkgs.my-tool}/bin/mytoolctl\";\n};\n```\n\nThe predefined hooks are:\n\n**`actionlint`**\n\nStatic checker for GitHub Actions workflow files\n\n\n**`alejandra`**\n\nThe Uncompromising Nix Code Formatter\n\n\n**`annex`**\n\nRuns the git-annex hook for large file support\n\n\n**`ansible-lint`**\n\nAnsible linter\n\n\n**`autoflake`**\n\nRemove unused imports and variables from Python code\n\n\n**`bats`**\n\nRun bash unit tests\n\n\n**`beautysh`**\n\nFormat shell files\n\n\n**`biome`**\n\nA toolchain for web projects, aimed to provide functionalities to maintain them\n\n\n**`black`**\n\nThe uncompromising Python code formatter\n\n\n**`cabal-fmt`**\n\nFormat Cabal files\n\n\n**`cabal-gild`**\n\nFormat Cabal files\n\n\n**`cabal2nix`**\n\nRun `cabal2nix` on all `*.cabal` files to generate corresponding `default.nix` files\n\n\n**`cargo-check`**\n\nCheck the cargo package for errors\n\n\n**`check-added-large-files`**\n\nPrevent very large files to be committed (e.g. binaries).\n\n\n**`check-builtin-literals`**\n\nRequire literal syntax when initializing empty or zero builtin types in Python.\n\n\n**`check-case-conflicts`**\n\nCheck for files that would conflict in case-insensitive filesystems.\n\n\n**`check-docstring-first`**\n\nCheck that all docstrings appear above the code.\n\n\n**`check-executables-have-shebangs`**\n\nEnsure that all non-binary executables have shebangs.\n\n\n**`check-json`**\n\nCheck syntax of JSON files.\n\n\n**`check-merge-conflicts`**\n\nCheck for files that contain merge conflict strings.\n\n\n**`check-python`**\n\nCheck syntax of Python file by parsing Python abstract syntax tree.\n\n\n**`check-shebang-scripts-are-executable`**\n\nEnsure that all (non-binary) files with a shebang are executable.\n\n\n**`check-symlinks`**\n\nFind broken symlinks.\n\n\n**`check-toml`**\n\nCheck syntax of TOML files.\n\n\n**`check-vcs-permalinks`**\n\nEnsure that links to VCS websites are permalinks.\n\n\n**`check-xml`**\n\nCheck syntax of XML files.\n\n\n**`check-yaml`**\n\nCheck syntax of YAML files.\n\n\n**`checkmake`**\n\nExperimental linter/analyzer for Makefiles\n\n\n**`chktex`**\n\nLaTeX semantic checker\n\n\n**`clang-format`**\n\nFormat your code using `clang-format`.\n\n\n**`clang-tidy`**\n\nStatic analyzer for C++ code.\n\n\n**`clippy`**\n\nLint Rust code.\n\n\n**`cljfmt`**\n\nA tool for formatting Clojure code.\n\n\n**`cmake-format`**\n\nA tool for formatting CMake-files.\n\n\n**`commitizen`**\n\nCheck whether the current commit message follows committing rules.\n\n\n\n**`conform`**\n\nPolicy enforcement for commits.\n\n\n**`convco`**\n\n\n\n\n**`credo`**\n\nRuns a static code analysis using Credo\n\n\n**`crystal`**\n\nA tool that automatically formats Crystal source code\n\n\n**`cspell`**\n\nA Spell Checker for Code\n\n\n**`deadnix`**\n\nScan Nix files for dead code (unused variable bindings).\n\n\n**`denofmt`**\n\nAuto-format JavaScript, TypeScript, Markdown, and JSON files.\n\n\n**`denolint`**\n\nLint JavaScript/TypeScript source code.\n\n\n**`detect-aws-credentials`**\n\nDetect AWS credentials from the AWS cli credentials file.\n\n\n**`detect-private-keys`**\n\nDetect the presence of private keys.\n\n\n**`dhall-format`**\n\nDhall code formatter.\n\n\n**`dialyzer`**\n\nRuns a static code analysis using Dialyzer\n\n\n**`dune-fmt`**\n\nRuns Dune's formatters on the code tree.\n\n\n**`dune-opam-sync`**\n\nCheck that Dune-generated OPAM files are in sync.\n\n\n**`eclint`**\n\nEditorConfig linter written in Go.\n\n\n**`editorconfig-checker`**\n\nVerify that the files are in harmony with the `.editorconfig`.\n\n\n**`elm-format`**\n\nFormat Elm files.\n\n\n**`elm-review`**\n\nAnalyzes Elm projects, to help find mistakes before your users find them.\n\n\n**`elm-test`**\n\nRun unit tests and fuzz tests for Elm code.\n\n\n**`end-of-file-fixer`**\n\nEnsures that a file is either empty, or ends with a single newline.\n\n\n**`eslint`**\n\nFind and fix problems in your JavaScript code.\n\n\n**`fix-byte-order-marker`**\n\nRemove UTF-8 byte order marker.\n\n\n**`fix-encoding-pragma`**\n\nAdds # -*- coding: utf-8 -*- to the top of Python files.'\n\n\n**`flake-checker`**\n\nRun health checks on your flake-powered Nix projects.\n\n\n**`flake8`**\n\nCheck the style and quality of Python files.\n\n\n**`flynt`**\n\nCLI tool to convert a python project's %-formatted strings to f-strings.\n\n\n**`forbid-new-submodules`**\n\nPrevent addition of new Git submodules.\n\n\n**`fourmolu`**\n\nHaskell code prettifier.\n\n\n**`fprettify`**\n\nAuto-formatter for modern Fortran code.\n\n\n**`gofmt`**\n\nA tool that automatically formats Go source code\n\n\n**`golangci-lint`**\n\nFast linters runner for Go.\n\n\n**`golines`**\n\nA golang formatter that fixes long lines\n\n\n**`gotest`**\n\nRun go tests\n\n\n**`govet`**\n\nChecks correctness of Go programs.\n\n\n**`gptcommit`**\n\nGenerate a commit message using GPT3.\n\n\n**`hadolint`**\n\nDockerfile linter, validate inline bash.\n\n\n**`headache`**\n\nLightweight tool for managing headers in source code files.\n\n\n**`hindent`**\n\nHaskell code prettifier.\n\n\n**`hlint`**\n\nHLint gives suggestions on how to improve your source code.\n\n\n**`hpack`**\n\n`hpack` converts package definitions in the hpack format (`package.yaml`) to Cabal files.\n\n\n**`html-tidy`**\n\nHTML linter.\n\n\n**`hunspell`**\n\nSpell checker and morphological analyzer.\n\n\n**`isort`**\n\nA Python utility / library to sort imports.\n\n\n**`juliaformatter`**\n\nRun JuliaFormatter.jl against Julia source files\n\n\n**`lacheck`**\n\nA consistency checker for LaTeX documents.\n\n\n**`latexindent`**\n\nPerl script to add indentation to LaTeX files.\n\n\n**`lua-ls`**\n\nUses the lua-language-server CLI to statically type-check and lint Lua code.\n\n\n**`luacheck`**\n\nA tool for linting and static analysis of Lua code.\n\n\n**`lychee`**\n\nA fast, async, stream-based link checker that finds broken hyperlinks and mail addresses inside Markdown, HTML, reStructuredText, or any other text file or website.\n\n\n**`markdownlint`**\n\nStyle checker and linter for markdown files.\n\n\n**`mdl`**\n\nA tool to check markdown files and flag style issues.\n\n\n**`mdsh`**\n\nMarkdown shell pre-processor.\n\n\n**`mix-format`**\n\nRuns the built-in Elixir syntax formatter\n\n\n**`mix-test`**\n\nRuns the built-in Elixir test framework\n\n\n**`mixed-line-endings`**\n\nResolve mixed line endings.\n\n\n**`mkdocs-linkcheck`**\n\nValidate links associated with markdown-based, statically generated websites.\n\n\n**`mypy`**\n\nStatic type checker for Python\n\n\n**`name-tests-test`**\n\nVerify that Python test files are named correctly.\n\n\n**`nil`**\n\nIncremental analysis assistant for writing in Nix.\n\n\n**`nixfmt`**\n\nDeprecated Nix code prettifier. Use nixfmt-classic.\n\n\n**`nixfmt-classic`**\n\nNix code prettifier (classic).\n\n\n**`nixfmt-rfc-style`**\n\nNix code prettifier (RFC 166 style).\n\n\n**`nixpkgs-fmt`**\n\nNix code prettifier.\n\n\n**`no-commit-to-branch`**\n\nDisallow committing to certain branch/branches.\n\n\n**`ocp-indent`**\n\nA tool to indent OCaml code.\n\n\n**`opam-lint`**\n\nOCaml package manager configuration checker.\n\n\n**`ormolu`**\n\nHaskell code prettifier.\n\n\n**`php-cs-fixer`**\n\nLint PHP files.\n\n\n**`phpcbf`**\n\nLint PHP files.\n\n\n**`phpcs`**\n\nLint PHP files.\n\n\n**`phpstan`**\n\nStatic Analysis of PHP files.\n\n\n**`poetry-check`**\n\nCheck the Poetry config for errors\n\n\n**`poetry-lock`**\n\nUpdate the Poetry lock file\n\n\n**`pre-commit-hook-ensure-sops`**\n\n\n\n\n**`prettier`**\n\nOpinionated multi-language code formatter.\n\n\n**`pretty-format-json`**\n\nFormats JSON files.\n\n\n**`psalm`**\n\nStatic Analysis of PHP files.\n\n\n**`purs-tidy`**\n\nFormat purescript files.\n\n\n**`purty`**\n\nFormat purescript files.\n\n\n**`pylint`**\n\nLint Python files.\n\n\n**`pyright`**\n\nStatic type checker for Python\n\n\n**`python-debug-statements`**\n\nCheck for debugger imports and py37+ `breakpoint()` calls in python source.\n\n\n**`pyupgrade`**\n\nAutomatically upgrade syntax for newer versions.\n\n\n**`reuse`**\n\nreuse is a tool for compliance with the REUSE recommendations.\n\n\n**`revive`**\n\nA linter for Go source code.\n\n\n**`ripsecrets`**\n\nPrevent committing secret keys into your source code\n\n\n**`rome`**\n\n\n\n\n**`ruff`**\n\nAn extremely fast Python linter, written in Rust.\n\n\n**`ruff-format`**\n\nAn extremely fast Python code formatter, written in Rust.\n\n\n**`rustfmt`**\n\nFormat Rust code.\n\n\n**`shellcheck`**\n\nFormat shell files.\n\n\n**`shfmt`**\n\nFormat shell files.\n\n\n**`single-quoted-strings`**\n\nReplace double quoted strings with single quoted strings.\n\n\n**`sort-file-contents`**\n\nSort the lines in specified files (defaults to alphabetical).\n\n\n**`sort-requirements-txt`**\n\nSort requirements in requirements.txt and constraints.txt files.\n\n\n**`sort-simple-yaml`**\n\nSort simple YAML files which consist only of top-level keys, preserving comments and blocks.\n\n\n**`staticcheck`**\n\nState of the art linter for the Go programming language\n\n\n**`statix`**\n\nLints and suggestions for the Nix programming language.\n\n\n**`stylish-haskell`**\n\nA simple Haskell code prettifier\n\n\n**`stylua`**\n\nAn Opinionated Lua Code Formatter.\n\n\n**`tagref`**\n\nHave tagref check all references and tags.\n\n\n\n**`taplo`**\n\nFormat TOML files with taplo fmt\n\n\n**`terraform-format`**\n\nFormat terraform (`.tf`) files.\n\n\n**`terraform-validate`**\n\nValidates terraform configuration files (`.tf`).\n\n\n**`tflint`**\n\nA Pluggable Terraform Linter.\n\n\n**`topiary`**\n\nA universal formatter engine within the Tree-sitter ecosystem, with support for many languages.\n\n\n**`treefmt`**\n\nOne CLI to format the code tree.\n\n\n**`trim-trailing-whitespace`**\n\nTrim trailing whitespace.\n\n\n**`trufflehog`**\n\nSecrets scanner\n\n\n**`typos`**\n\nSource code spell checker\n\n\n**`typstfmt`**\n\nformat typst\n\n\n**`typstyle`**\n\nBeautiful and reliable typst code formatter\n\n\n**`vale`**\n\nA markup-aware linter for prose built with speed and extensibility in mind.\n\n\n**`yamlfmt`**\n\nFormatter for YAML files.\n\n\n**`yamllint`**\n\nLinter for YAML files.\n\n\n**`zprint`**\n\nBeautifully format Clojure and Clojurescript source code and s-expressions.\n\n\n", "loc": ["pre-commit", "hooks"], "readOnly": false, "type": "attribute set of (submodule)"}, "pre-commit.hooks.<name>.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "<name>", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.<name>.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "<name>", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.<name>.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "<name>", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.<name>.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "<name>", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.<name>.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "<name>", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.<name>.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "<name>", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.<name>.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "<name>", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.<name>.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "<name>", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.<name>.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "<name>", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.<name>.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "<name>", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.<name>.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "<name>", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.<name>.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "<name>", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.<name>.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "<name>", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.<name>.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "<name>", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.<name>.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "<name>", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.<name>.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "<name>", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.<name>.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "<name>", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.<name>.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "<name>", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.<name>.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "<name>", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.<name>.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "<name>", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.<name>.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "<name>", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.<name>.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "<name>", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.<name>.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "<name>", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.alejandra": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "alejandra hook", "loc": ["pre-commit", "hooks", "alejandra"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.alejandra.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "alejandra", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.alejandra.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "alejandra", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.alejandra.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "alejandra", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.alejandra.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "alejandra", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.alejandra.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "alejandra", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.alejandra.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "alejandra", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.alejandra.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "alejandra", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.alejandra.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "alejandra", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.alejandra.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "alejandra", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.alejandra.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "alejandra", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.alejandra.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "alejandra", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.alejandra.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "alejandra", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.alejandra.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "alejandra", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.alejandra.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "alejandra", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.alejandra.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "alejandra", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.alejandra.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "alejandra", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.alejandra.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "alejandra", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.alejandra.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "alejandra", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.alejandra.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "alejandra", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.alejandra.settings.check": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Check if the input is already formatted and disable writing in-place the modified content", "example": "true", "loc": ["pre-commit", "hooks", "alejandra", "settings", "check"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.alejandra.settings.exclude": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "Files or directories to exclude from formatting.", "example": "[\n  \"flake.nix\"\n  \"./templates\"\n]", "loc": ["pre-commit", "hooks", "alejandra", "settings", "exclude"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.alejandra.settings.threads": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "null", "description": "Number of formatting threads to spawn.", "example": "8", "loc": ["pre-commit", "hooks", "alejandra", "settings", "threads"], "readOnly": false, "type": "null or signed integer"}, "pre-commit.hooks.alejandra.settings.verbosity": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"normal\"", "description": "Whether informational messages or all messages should be hidden or not.", "example": "\"quiet\"", "loc": ["pre-commit", "hooks", "alejandra", "settings", "verbosity"], "readOnly": false, "type": "one of \"normal\", \"quiet\", \"silent\""}, "pre-commit.hooks.alejandra.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "alejandra", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.alejandra.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "alejandra", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.alejandra.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "alejandra", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.alejandra.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "alejandra", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.ansible-lint": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "ansible-lint hook", "loc": ["pre-commit", "hooks", "ansible-lint"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.ansible-lint.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "ansible-lint", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.ansible-lint.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "ansible-lint", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.ansible-lint.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "ansible-lint", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.ansible-lint.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "ansible-lint", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.ansible-lint.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "ansible-lint", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.ansible-lint.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "ansible-lint", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.ansible-lint.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "ansible-lint", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.ansible-lint.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "ansible-lint", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.ansible-lint.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "ansible-lint", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.ansible-lint.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "ansible-lint", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.ansible-lint.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "ansible-lint", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.ansible-lint.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "ansible-lint", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.ansible-lint.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "ansible-lint", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.ansible-lint.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "ansible-lint", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.ansible-lint.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "ansible-lint", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.ansible-lint.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "ansible-lint", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.ansible-lint.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "ansible-lint", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.ansible-lint.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "ansible-lint", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.ansible-lint.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "ansible-lint", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.ansible-lint.settings.configPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Path to the YAML configuration file.", "loc": ["pre-commit", "hooks", "ansible-lint", "settings", "configPath"], "readOnly": false, "type": "string"}, "pre-commit.hooks.ansible-lint.settings.subdir": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Path to the Ansible subdirectory.", "loc": ["pre-commit", "hooks", "ansible-lint", "settings", "subdir"], "readOnly": false, "type": "string"}, "pre-commit.hooks.ansible-lint.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "ansible-lint", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.ansible-lint.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "ansible-lint", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.ansible-lint.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "ansible-lint", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.ansible-lint.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "ansible-lint", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.autoflake": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "autoflake hook", "loc": ["pre-commit", "hooks", "autoflake"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.autoflake.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "autoflake", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.autoflake.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "autoflake", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.autoflake.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "autoflake", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.autoflake.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "autoflake", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.autoflake.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "autoflake", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.autoflake.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "autoflake", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.autoflake.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "autoflake", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.autoflake.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "autoflake", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.autoflake.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "autoflake", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.autoflake.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "autoflake", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.autoflake.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "autoflake", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.autoflake.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "autoflake", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.autoflake.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "autoflake", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.autoflake.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "autoflake", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.autoflake.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "autoflake", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.autoflake.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "autoflake", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.autoflake.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "autoflake", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.autoflake.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "autoflake", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.autoflake.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "autoflake", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.autoflake.settings.binPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"${tools.autoflake}/bin/autoflake\"\n", "description": "Path to autoflake binary.", "loc": ["pre-commit", "hooks", "autoflake", "settings", "binPath"], "readOnly": false, "type": "null or string"}, "pre-commit.hooks.autoflake.settings.flags": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"--in-place --expand-star-imports --remove-duplicate-keys --remove-unused-variables\"", "description": "Flags passed to autoflake.", "loc": ["pre-commit", "hooks", "autoflake", "settings", "flags"], "readOnly": false, "type": "string"}, "pre-commit.hooks.autoflake.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "autoflake", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.autoflake.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "autoflake", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.autoflake.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "autoflake", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.autoflake.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "autoflake", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.biome": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "biome hook", "loc": ["pre-commit", "hooks", "biome"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.biome.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "biome", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.biome.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "biome", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.biome.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "biome", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.biome.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "biome", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.biome.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "biome", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.biome.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "biome", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.biome.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "biome", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.biome.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "biome", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.biome.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "biome", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.biome.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "biome", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.biome.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "biome", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.biome.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "biome", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.biome.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "biome", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.biome.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "biome", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.biome.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "biome", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.biome.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "biome", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.biome.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "biome", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.biome.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "biome", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.biome.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "biome", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.biome.settings.binPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "null", "description": "`biome` binary path. E.g. if you want to use the `biome` in `node_modules`, use `./node_modules/.bin/biome`.", "loc": ["pre-commit", "hooks", "biome", "settings", "binPath"], "readOnly": false, "type": "null or path"}, "pre-commit.hooks.biome.settings.configPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Path to the configuration JSON file", "loc": ["pre-commit", "hooks", "biome", "settings", "configPath"], "readOnly": false, "type": "string"}, "pre-commit.hooks.biome.settings.write": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "true", "description": "Whether to edit files inplace.", "loc": ["pre-commit", "hooks", "biome", "settings", "write"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.biome.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "biome", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.biome.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "biome", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.biome.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "biome", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.biome.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "biome", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.black": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "black hook", "loc": ["pre-commit", "hooks", "black"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.black.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "black", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.black.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "black", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.black.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "black", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.black.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "black", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.black.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "black", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.black.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "black", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.black.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "black", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.black.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "black", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.black.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "black", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.black.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "black", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.black.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "black", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.black.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "black", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.black.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "black", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.black.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "black", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.black.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "black", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.black.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "black", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.black.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "black", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.black.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "black", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.black.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "black", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.black.settings.flags": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Flags passed to black. See all available [here](https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#command-line-options).", "example": "\"--skip-magic-trailing-comma\"", "loc": ["pre-commit", "hooks", "black", "settings", "flags"], "readOnly": false, "type": "string"}, "pre-commit.hooks.black.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "black", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.black.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "black", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.black.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "black", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.black.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "black", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.clippy": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "clippy hook", "loc": ["pre-commit", "hooks", "clippy"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.clippy.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "clippy", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.clippy.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "clippy", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.clippy.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "clippy", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.clippy.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "clippy", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.clippy.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "clippy", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.clippy.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "clippy", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.clippy.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "clippy", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.clippy.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "clippy", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.clippy.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "clippy", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.clippy.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "clippy", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.clippy.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "clippy", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.clippy.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "clippy", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.clippy.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "clippy", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.clippy.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "clippy", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.clippy.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "clippy", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.clippy.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "clippy", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.clippy.packageOverrides.cargo": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "The cargo package to use", "loc": ["pre-commit", "hooks", "clippy", "packageOverrides", "cargo"], "readOnly": false, "type": "package"}, "pre-commit.hooks.clippy.packageOverrides.clippy": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "The clippy package to use", "loc": ["pre-commit", "hooks", "clippy", "packageOverrides", "clippy"], "readOnly": false, "type": "package"}, "pre-commit.hooks.clippy.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "clippy", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.clippy.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "clippy", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.clippy.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "clippy", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.clippy.settings.allFeatures": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Run clippy with --all-features", "loc": ["pre-commit", "hooks", "clippy", "settings", "allFeatures"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.clippy.settings.denyWarnings": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Fail when warnings are present", "loc": ["pre-commit", "hooks", "clippy", "settings", "denyWarnings"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.clippy.settings.extraArgs": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Additional arguments to pass to clippy", "loc": ["pre-commit", "hooks", "clippy", "settings", "extraArgs"], "readOnly": false, "type": "string"}, "pre-commit.hooks.clippy.settings.offline": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "true", "description": "Run clippy offline", "loc": ["pre-commit", "hooks", "clippy", "settings", "offline"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.clippy.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "clippy", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.clippy.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "clippy", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.clippy.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "clippy", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.clippy.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "clippy", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.cmake-format": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "cmake-format hook", "loc": ["pre-commit", "hooks", "cmake-format"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.cmake-format.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "cmake-format", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.cmake-format.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "cmake-format", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.cmake-format.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "cmake-format", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.cmake-format.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "cmake-format", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.cmake-format.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "cmake-format", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.cmake-format.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "cmake-format", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.cmake-format.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "cmake-format", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.cmake-format.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "cmake-format", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.cmake-format.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "cmake-format", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.cmake-format.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "cmake-format", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.cmake-format.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "cmake-format", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.cmake-format.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "cmake-format", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.cmake-format.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "cmake-format", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.cmake-format.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "cmake-format", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.cmake-format.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "cmake-format", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.cmake-format.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "cmake-format", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.cmake-format.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "cmake-format", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.cmake-format.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "cmake-format", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.cmake-format.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "cmake-format", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.cmake-format.settings.configPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Path to the configuration file (.json,.python,.yaml)", "example": "\".cmake-format.json\"", "loc": ["pre-commit", "hooks", "cmake-format", "settings", "configPath"], "readOnly": false, "type": "string"}, "pre-commit.hooks.cmake-format.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "cmake-format", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.cmake-format.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "cmake-format", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.cmake-format.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "cmake-format", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.cmake-format.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "cmake-format", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.credo": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "credo hook", "loc": ["pre-commit", "hooks", "credo"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.credo.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "credo", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.credo.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "credo", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.credo.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "credo", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.credo.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "credo", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.credo.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "credo", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.credo.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "credo", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.credo.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "credo", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.credo.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "credo", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.credo.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "credo", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.credo.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "credo", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.credo.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "credo", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.credo.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "credo", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.credo.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "credo", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.credo.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "credo", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.credo.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "credo", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.credo.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "credo", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.credo.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "credo", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.credo.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "credo", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.credo.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "credo", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.credo.settings.strict": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "true", "description": "Whether to auto-promote the changes.", "loc": ["pre-commit", "hooks", "credo", "settings", "strict"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.credo.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "credo", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.credo.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "credo", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.credo.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "credo", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.credo.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "credo", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.deadnix": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "deadnix hook", "loc": ["pre-commit", "hooks", "deadnix"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.deadnix.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "deadnix", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.deadnix.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "deadnix", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.deadnix.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "deadnix", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.deadnix.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "deadnix", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.deadnix.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "deadnix", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.deadnix.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "deadnix", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.deadnix.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "deadnix", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.deadnix.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "deadnix", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.deadnix.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "deadnix", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.deadnix.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "deadnix", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.deadnix.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "deadnix", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.deadnix.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "deadnix", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.deadnix.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "deadnix", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.deadnix.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "deadnix", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.deadnix.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "deadnix", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.deadnix.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "deadnix", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.deadnix.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "deadnix", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.deadnix.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "deadnix", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.deadnix.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "deadnix", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.deadnix.settings.edit": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Remove unused code and write to source file.", "loc": ["pre-commit", "hooks", "deadnix", "settings", "edit"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.deadnix.settings.exclude": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "Files to exclude from analysis.", "loc": ["pre-commit", "hooks", "deadnix", "settings", "exclude"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.deadnix.settings.hidden": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Recurse into hidden subdirectories and process hidden .*.nix files.", "loc": ["pre-commit", "hooks", "deadnix", "settings", "hidden"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.deadnix.settings.noLambdaArg": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Don't check lambda parameter arguments.", "loc": ["pre-commit", "hooks", "deadnix", "settings", "noLambdaArg"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.deadnix.settings.noLambdaPatternNames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Don't check lambda pattern names (don't break nixpkgs `callPackage`).", "loc": ["pre-commit", "hooks", "deadnix", "settings", "noLambdaPatternNames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.deadnix.settings.noUnderscore": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Don't check any bindings that start with a `_`.", "loc": ["pre-commit", "hooks", "deadnix", "settings", "noUnderscore"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.deadnix.settings.quiet": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Don't print a dead code report.", "loc": ["pre-commit", "hooks", "deadnix", "settings", "quiet"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.deadnix.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "deadnix", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.deadnix.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "deadnix", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.deadnix.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "deadnix", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.deadnix.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "deadnix", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.denofmt": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "denofmt hook", "loc": ["pre-commit", "hooks", "denofmt"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.denofmt.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "denofmt", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.denofmt.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "denofmt", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.denofmt.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "denofmt", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.denofmt.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "denofmt", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.denofmt.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "denofmt", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.denofmt.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "denofmt", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.denofmt.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "denofmt", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.denofmt.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "denofmt", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.denofmt.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "denofmt", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.denofmt.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "denofmt", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.denofmt.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "denofmt", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.denofmt.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "denofmt", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.denofmt.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "denofmt", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.denofmt.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "denofmt", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.denofmt.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "denofmt", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.denofmt.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "denofmt", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.denofmt.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "denofmt", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.denofmt.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "denofmt", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.denofmt.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "denofmt", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.denofmt.settings.configPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Path to the configuration JSON file", "loc": ["pre-commit", "hooks", "denofmt", "settings", "configPath"], "readOnly": false, "type": "string"}, "pre-commit.hooks.denofmt.settings.write": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "true", "description": "Whether to edit files inplace.", "loc": ["pre-commit", "hooks", "denofmt", "settings", "write"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.denofmt.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "denofmt", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.denofmt.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "denofmt", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.denofmt.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "denofmt", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.denofmt.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "denofmt", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.denolint": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "denolint hook", "loc": ["pre-commit", "hooks", "denolint"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.denolint.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "denolint", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.denolint.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "denolint", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.denolint.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "denolint", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.denolint.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "denolint", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.denolint.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "denolint", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.denolint.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "denolint", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.denolint.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "denolint", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.denolint.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "denolint", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.denolint.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "denolint", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.denolint.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "denolint", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.denolint.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "denolint", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.denolint.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "denolint", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.denolint.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "denolint", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.denolint.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "denolint", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.denolint.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "denolint", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.denolint.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "denolint", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.denolint.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "denolint", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.denolint.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "denolint", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.denolint.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "denolint", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.denolint.settings.configPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Path to the configuration JSON file", "loc": ["pre-commit", "hooks", "denolint", "settings", "configPath"], "readOnly": false, "type": "string"}, "pre-commit.hooks.denolint.settings.format": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"default\"", "description": "Output format.", "loc": ["pre-commit", "hooks", "denolint", "settings", "format"], "readOnly": false, "type": "one of \"default\", \"compact\", \"json\""}, "pre-commit.hooks.denolint.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "denolint", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.denolint.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "denolint", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.denolint.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "denolint", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.denolint.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "denolint", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.dune-fmt": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "dune-fmt hook", "loc": ["pre-commit", "hooks", "dune-fmt"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.dune-fmt.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "dune-fmt", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.dune-fmt.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "dune-fmt", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.dune-fmt.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "dune-fmt", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.dune-fmt.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "dune-fmt", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.dune-fmt.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "dune-fmt", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.dune-fmt.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "dune-fmt", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.dune-fmt.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "dune-fmt", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.dune-fmt.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "dune-fmt", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.dune-fmt.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "dune-fmt", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.dune-fmt.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "dune-fmt", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.dune-fmt.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "dune-fmt", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.dune-fmt.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "dune-fmt", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.dune-fmt.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "dune-fmt", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.dune-fmt.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "dune-fmt", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.dune-fmt.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "dune-fmt", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.dune-fmt.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "dune-fmt", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.dune-fmt.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "dune-fmt", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.dune-fmt.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "dune-fmt", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.dune-fmt.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "dune-fmt", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.dune-fmt.settings.auto-promote": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "true", "description": "Whether to auto-promote the changes.", "loc": ["pre-commit", "hooks", "dune-fmt", "settings", "auto-promote"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.dune-fmt.settings.extraRuntimeInputs": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "Extra runtimeInputs to add to the environment, eg. `ocamlformat`.", "loc": ["pre-commit", "hooks", "dune-fmt", "settings", "extraRuntimeInputs"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.dune-fmt.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "dune-fmt", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.dune-fmt.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "dune-fmt", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.dune-fmt.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "dune-fmt", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.dune-fmt.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "dune-fmt", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.eclint": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "eclint hook", "loc": ["pre-commit", "hooks", "eclint"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.eclint.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "eclint", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.eclint.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "eclint", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.eclint.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "eclint", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.eclint.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "eclint", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.eclint.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "eclint", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.eclint.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "eclint", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.eclint.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "eclint", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.eclint.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "eclint", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.eclint.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "eclint", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.eclint.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "eclint", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.eclint.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "eclint", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.eclint.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "eclint", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.eclint.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "eclint", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.eclint.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "eclint", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.eclint.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "eclint", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.eclint.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "eclint", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.eclint.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "eclint", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.eclint.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "eclint", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.eclint.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "eclint", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.eclint.settings.color": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"auto\"", "description": "When to generate colored output.", "loc": ["pre-commit", "hooks", "eclint", "settings", "color"], "readOnly": false, "type": "one of \"auto\", \"always\", \"never\""}, "pre-commit.hooks.eclint.settings.exclude": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "Filter to exclude files.", "loc": ["pre-commit", "hooks", "eclint", "settings", "exclude"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.eclint.settings.fix": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Modify files in place rather than showing the errors.", "loc": ["pre-commit", "hooks", "eclint", "settings", "fix"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.eclint.settings.summary": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Only show number of errors per file.", "loc": ["pre-commit", "hooks", "eclint", "settings", "summary"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.eclint.settings.verbosity": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "0", "description": "Log level verbosity", "loc": ["pre-commit", "hooks", "eclint", "settings", "verbosity"], "readOnly": false, "type": "one of 0, 1, 2, 3, 4"}, "pre-commit.hooks.eclint.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "eclint", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.eclint.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "eclint", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.eclint.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "eclint", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.eclint.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "eclint", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.eslint": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "eslint hook", "loc": ["pre-commit", "hooks", "eslint"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.eslint.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "eslint", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.eslint.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "eslint", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.eslint.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "eslint", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.eslint.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "eslint", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.eslint.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "eslint", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.eslint.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "eslint", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.eslint.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "eslint", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.eslint.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "eslint", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.eslint.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "eslint", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.eslint.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "eslint", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.eslint.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "eslint", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.eslint.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "eslint", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.eslint.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "eslint", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.eslint.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "eslint", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.eslint.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "eslint", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.eslint.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "eslint", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.eslint.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "eslint", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.eslint.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "eslint", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.eslint.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "eslint", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.eslint.settings.binPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "${tools.eslint}/bin/eslint", "description": "`eslint` binary path. E.g. if you want to use the `eslint` in `node_modules`, use `./node_modules/.bin/eslint`.", "loc": ["pre-commit", "hooks", "eslint", "settings", "binPath"], "readOnly": false, "type": "null or path"}, "pre-commit.hooks.eslint.settings.extensions": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\\\\.js$\"", "description": "The pattern of files to run on, see [https://pre-commit.com/#hooks-files](https://pre-commit.com/#hooks-files).", "loc": ["pre-commit", "hooks", "eslint", "settings", "extensions"], "readOnly": false, "type": "string"}, "pre-commit.hooks.eslint.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "eslint", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.eslint.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "eslint", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.eslint.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "eslint", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.eslint.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "eslint", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.flake8": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "flake8 hook", "loc": ["pre-commit", "hooks", "flake8"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.flake8.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "flake8", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.flake8.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "flake8", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.flake8.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "flake8", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.flake8.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "flake8", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.flake8.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "flake8", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.flake8.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "flake8", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.flake8.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "flake8", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.flake8.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "flake8", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.flake8.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "flake8", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.flake8.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "flake8", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.flake8.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "flake8", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.flake8.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "flake8", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.flake8.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "flake8", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.flake8.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "flake8", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.flake8.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "flake8", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.flake8.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "flake8", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.flake8.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "flake8", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.flake8.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "flake8", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.flake8.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "flake8", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.flake8.settings.binPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"${tools.flake8}/bin/flake8\"\n", "description": "flake8 binary path. Should be used to specify flake8 binary from your Nix-managed Python environment.", "loc": ["pre-commit", "hooks", "flake8", "settings", "binPath"], "readOnly": false, "type": "null or string"}, "pre-commit.hooks.flake8.settings.extendIgnore": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "List of additional ignore codes", "example": "[\n  \"E501\"\n]", "loc": ["pre-commit", "hooks", "flake8", "settings", "extendIgnore"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.flake8.settings.format": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"default\"", "description": "Output format.", "loc": ["pre-commit", "hooks", "flake8", "settings", "format"], "readOnly": false, "type": "string"}, "pre-commit.hooks.flake8.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "flake8", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.flake8.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "flake8", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.flake8.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "flake8", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.flake8.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "flake8", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.flynt": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "flynt hook", "loc": ["pre-commit", "hooks", "flynt"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.flynt.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "flynt", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.flynt.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "flynt", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.flynt.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "flynt", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.flynt.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "flynt", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.flynt.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "flynt", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.flynt.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "flynt", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.flynt.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "flynt", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.flynt.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "flynt", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.flynt.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "flynt", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.flynt.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "flynt", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.flynt.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "flynt", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.flynt.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "flynt", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.flynt.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "flynt", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.flynt.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "flynt", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.flynt.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "flynt", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.flynt.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "flynt", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.flynt.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "flynt", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.flynt.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "flynt", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.flynt.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "flynt", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.flynt.settings.aggressive": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Include conversions with potentially changed behavior.", "loc": ["pre-commit", "hooks", "flynt", "settings", "aggressive"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.flynt.settings.binPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "null", "description": "flynt binary path. Can be used to specify the flynt binary from an existing Python environment.", "loc": ["pre-commit", "hooks", "flynt", "settings", "binPath"], "readOnly": false, "type": "null or string"}, "pre-commit.hooks.flynt.settings.dry-run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Do not change files in-place and print diff instead.", "loc": ["pre-commit", "hooks", "flynt", "settings", "dry-run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.flynt.settings.exclude": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "Ignore files with given strings in their absolute path.", "loc": ["pre-commit", "hooks", "flynt", "settings", "exclude"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.flynt.settings.fail-on-change": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "true", "description": "Fail when diff is not empty (for linting purposes).", "loc": ["pre-commit", "hooks", "flynt", "settings", "fail-on-change"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.flynt.settings.line-length": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "null", "description": "Convert expressions spanning multiple lines, only if the resulting single line will fit into this line length limit.", "loc": ["pre-commit", "hooks", "flynt", "settings", "line-length"], "readOnly": false, "type": "null or signed integer"}, "pre-commit.hooks.flynt.settings.no-multiline": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Convert only single line expressions.", "loc": ["pre-commit", "hooks", "flynt", "settings", "no-multiline"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.flynt.settings.quiet": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Run without output.", "loc": ["pre-commit", "hooks", "flynt", "settings", "quiet"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.flynt.settings.string": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Interpret the input as a Python code snippet and print the converted version.", "loc": ["pre-commit", "hooks", "flynt", "settings", "string"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.flynt.settings.transform-concats": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Replace string concatenations with f-strings.", "loc": ["pre-commit", "hooks", "flynt", "settings", "transform-concats"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.flynt.settings.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Run with verbose output.", "loc": ["pre-commit", "hooks", "flynt", "settings", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.flynt.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "flynt", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.flynt.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "flynt", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.flynt.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "flynt", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.flynt.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "flynt", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.golines": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "golines hook", "loc": ["pre-commit", "hooks", "golines"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.golines.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "golines", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.golines.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "golines", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.golines.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "golines", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.golines.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "golines", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.golines.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "golines", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.golines.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "golines", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.golines.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "golines", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.golines.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "golines", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.golines.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "golines", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.golines.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "golines", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.golines.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "golines", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.golines.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "golines", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.golines.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "golines", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.golines.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "golines", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.golines.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "golines", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.golines.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "golines", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.golines.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "golines", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.golines.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "golines", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.golines.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "golines", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.golines.settings.flags": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Flags passed to golines. See all available [here](https://github.com/segmentio/golines?tab=readme-ov-file#options)", "example": "\"-m 120\"", "loc": ["pre-commit", "hooks", "golines", "settings", "flags"], "readOnly": false, "type": "string"}, "pre-commit.hooks.golines.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "golines", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.golines.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "golines", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.golines.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "golines", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.golines.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "golines", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.headache": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "headache hook", "loc": ["pre-commit", "hooks", "headache"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.headache.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "headache", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.headache.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "headache", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.headache.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "headache", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.headache.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "headache", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.headache.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "headache", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.headache.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "headache", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.headache.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "headache", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.headache.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "headache", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.headache.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "headache", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.headache.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "headache", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.headache.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "headache", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.headache.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "headache", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.headache.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "headache", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.headache.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "headache", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.headache.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "headache", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.headache.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "headache", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.headache.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "headache", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.headache.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "headache", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.headache.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "headache", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.headache.settings.header-file": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\".header\"", "description": "Path to the header file.", "loc": ["pre-commit", "hooks", "headache", "settings", "header-file"], "readOnly": false, "type": "string"}, "pre-commit.hooks.headache.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "headache", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.headache.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "headache", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.headache.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "headache", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.headache.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "headache", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.hlint": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "hlint hook", "loc": ["pre-commit", "hooks", "hlint"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.hlint.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "hlint", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.hlint.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "hlint", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.hlint.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "hlint", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.hlint.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "hlint", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.hlint.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "hlint", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.hlint.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "hlint", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.hlint.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "hlint", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.hlint.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "hlint", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.hlint.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "hlint", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.hlint.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "hlint", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.hlint.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "hlint", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.hlint.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "hlint", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.hlint.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "hlint", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.hlint.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "hlint", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.hlint.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "hlint", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.hlint.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "hlint", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.hlint.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "hlint", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.hlint.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "hlint", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.hlint.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "hlint", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.hlint.settings.hintFile": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "null", "description": "Path to hlint.yaml. By default, hlint searches for .hlint.yaml in the project root.", "loc": ["pre-commit", "hooks", "hlint", "settings", "hintFile"], "readOnly": false, "type": "null or path"}, "pre-commit.hooks.hlint.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "hlint", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.hlint.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "hlint", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.hlint.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "hlint", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.hlint.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "hlint", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.hpack": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "hpack hook", "loc": ["pre-commit", "hooks", "hpack"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.hpack.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "hpack", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.hpack.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "hpack", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.hpack.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "hpack", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.hpack.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "hpack", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.hpack.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "hpack", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.hpack.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "hpack", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.hpack.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "hpack", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.hpack.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "hpack", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.hpack.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "hpack", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.hpack.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "hpack", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.hpack.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "hpack", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.hpack.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "hpack", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.hpack.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "hpack", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.hpack.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "hpack", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.hpack.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "hpack", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.hpack.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "hpack", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.hpack.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "hpack", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.hpack.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "hpack", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.hpack.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "hpack", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.hpack.settings.silent": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Whether generation should be silent.", "loc": ["pre-commit", "hooks", "hpack", "settings", "silent"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.hpack.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "hpack", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.hpack.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "hpack", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.hpack.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "hpack", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.hpack.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "hpack", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.isort": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "isort hook", "loc": ["pre-commit", "hooks", "isort"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.isort.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "isort", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.isort.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "isort", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.isort.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "isort", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.isort.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "isort", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.isort.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "isort", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.isort.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "isort", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.isort.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "isort", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.isort.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "isort", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.isort.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "isort", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.isort.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "isort", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.isort.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "isort", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.isort.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "isort", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.isort.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "isort", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.isort.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "isort", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.isort.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "isort", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.isort.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "isort", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.isort.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "isort", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.isort.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "isort", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.isort.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "isort", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.isort.settings.flags": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Flags passed to isort. See all available [here](https://pycqa.github.io/isort/docs/configuration/options.html).", "loc": ["pre-commit", "hooks", "isort", "settings", "flags"], "readOnly": false, "type": "string"}, "pre-commit.hooks.isort.settings.profile": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Built-in profiles to allow easy interoperability with common projects and code styles.", "loc": ["pre-commit", "hooks", "isort", "settings", "profile"], "readOnly": false, "type": "one of \"\", \"black\", \"django\", \"pycharm\", \"google\", \"open_stack\", \"plone\", \"attrs\", \"hug\", \"wemake\", \"appnexus\""}, "pre-commit.hooks.isort.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "isort", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.isort.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "isort", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.isort.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "isort", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.isort.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "isort", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.lacheck": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "lacheck hook", "loc": ["pre-commit", "hooks", "lacheck"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.lacheck.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "lacheck", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.lacheck.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "lacheck", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.lacheck.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "lacheck", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.lacheck.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "lacheck", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.lacheck.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "lacheck", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.lacheck.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "lacheck", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.lacheck.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "lacheck", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.lacheck.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "lacheck", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.lacheck.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "lacheck", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.lacheck.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "lacheck", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.lacheck.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "lacheck", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.lacheck.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "lacheck", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.lacheck.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "lacheck", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.lacheck.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "lacheck", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.lacheck.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "lacheck", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.lacheck.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "lacheck", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.lacheck.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "lacheck", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.lacheck.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "lacheck", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.lacheck.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "lacheck", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.lacheck.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "lacheck", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.lacheck.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "lacheck", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.lacheck.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "lacheck", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.lacheck.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "lacheck", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.latexindent": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "latexindent hook", "loc": ["pre-commit", "hooks", "latexindent"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.latexindent.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "latexindent", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.latexindent.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "latexindent", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.latexindent.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "latexindent", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.latexindent.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "latexindent", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.latexindent.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "latexindent", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.latexindent.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "latexindent", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.latexindent.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "latexindent", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.latexindent.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "latexindent", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.latexindent.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "latexindent", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.latexindent.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "latexindent", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.latexindent.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "latexindent", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.latexindent.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "latexindent", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.latexindent.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "latexindent", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.latexindent.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "latexindent", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.latexindent.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "latexindent", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.latexindent.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "latexindent", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.latexindent.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "latexindent", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.latexindent.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "latexindent", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.latexindent.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "latexindent", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.latexindent.settings.flags": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"--local --silent --overwriteIfDifferent\"", "description": "Flags passed to latexindent. See available flags [here](https://latexindentpl.readthedocs.io/en/latest/sec-how-to-use.html#from-the-command-line)", "loc": ["pre-commit", "hooks", "latexindent", "settings", "flags"], "readOnly": false, "type": "string"}, "pre-commit.hooks.latexindent.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "latexindent", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.latexindent.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "latexindent", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.latexindent.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "latexindent", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.latexindent.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "latexindent", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.lua-ls": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "lua-ls hook", "loc": ["pre-commit", "hooks", "lua-ls"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.lua-ls.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "lua-ls", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.lua-ls.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "lua-ls", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.lua-ls.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "lua-ls", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.lua-ls.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "lua-ls", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.lua-ls.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "lua-ls", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.lua-ls.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "lua-ls", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.lua-ls.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "lua-ls", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.lua-ls.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "lua-ls", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.lua-ls.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "lua-ls", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.lua-ls.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "lua-ls", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.lua-ls.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "lua-ls", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.lua-ls.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "lua-ls", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.lua-ls.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "lua-ls", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.lua-ls.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "lua-ls", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.lua-ls.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "lua-ls", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.lua-ls.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "lua-ls", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.lua-ls.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "lua-ls", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.lua-ls.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "lua-ls", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.lua-ls.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "lua-ls", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.lua-ls.settings.checklevel": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"Warning\"", "description": "The diagnostic check level", "loc": ["pre-commit", "hooks", "lua-ls", "settings", "checklevel"], "readOnly": false, "type": "one of \"Error\", \"Warning\", \"Information\", \"Hint\""}, "pre-commit.hooks.lua-ls.settings.configuration": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "{ }", "description": "See https://github.com/LuaLS/lua-language-server/wiki/Configuration-File#luarcjson", "loc": ["pre-commit", "hooks", "lua-ls", "settings", "configuration"], "readOnly": false, "type": "attribute set"}, "pre-commit.hooks.lua-ls.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "lua-ls", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.lua-ls.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "lua-ls", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.lua-ls.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "lua-ls", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.lua-ls.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "lua-ls", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.lychee": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "lychee hook", "loc": ["pre-commit", "hooks", "lychee"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.lychee.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "lychee", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.lychee.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "lychee", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.lychee.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "lychee", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.lychee.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "lychee", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.lychee.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "lychee", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.lychee.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "lychee", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.lychee.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "lychee", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.lychee.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "lychee", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.lychee.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "lychee", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.lychee.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "lychee", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.lychee.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "lychee", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.lychee.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "lychee", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.lychee.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "lychee", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.lychee.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "lychee", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.lychee.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "lychee", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.lychee.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "lychee", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.lychee.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "lychee", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.lychee.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "lychee", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.lychee.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "lychee", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.lychee.settings.configPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Path to the config file.", "loc": ["pre-commit", "hooks", "lychee", "settings", "configPath"], "readOnly": false, "type": "string"}, "pre-commit.hooks.lychee.settings.flags": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Flags passed to lychee. See all available [here](https://lychee.cli.rs/#/usage/cli).", "loc": ["pre-commit", "hooks", "lychee", "settings", "flags"], "readOnly": false, "type": "string"}, "pre-commit.hooks.lychee.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "lychee", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.lychee.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "lychee", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.lychee.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "lychee", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.lychee.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "lychee", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.markdownlint": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "markdownlint hook", "loc": ["pre-commit", "hooks", "markdownlint"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.markdownlint.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "markdownlint", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.markdownlint.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "markdownlint", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.markdownlint.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "markdownlint", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.markdownlint.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "markdownlint", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.markdownlint.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "markdownlint", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.markdownlint.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "markdownlint", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.markdownlint.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "markdownlint", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.markdownlint.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "markdownlint", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.markdownlint.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "markdownlint", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.markdownlint.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "markdownlint", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.markdownlint.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "markdownlint", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.markdownlint.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "markdownlint", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.markdownlint.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "markdownlint", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.markdownlint.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "markdownlint", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.markdownlint.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "markdownlint", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.markdownlint.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "markdownlint", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.markdownlint.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "markdownlint", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.markdownlint.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "markdownlint", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.markdownlint.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "markdownlint", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.markdownlint.settings.configuration": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "{ }", "description": "See https://github.com/DavidAnson/markdownlint/blob/main/schema/.markdownlint.jsonc", "loc": ["pre-commit", "hooks", "markdownlint", "settings", "configuration"], "readOnly": false, "type": "attribute set"}, "pre-commit.hooks.markdownlint.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "markdownlint", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.markdownlint.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "markdownlint", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.markdownlint.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "markdownlint", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.markdownlint.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "markdownlint", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.mdl": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "mdl hook", "loc": ["pre-commit", "hooks", "mdl"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.mdl.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "mdl", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.mdl.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "mdl", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.mdl.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "mdl", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.mdl.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "mdl", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.mdl.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "mdl", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.mdl.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "mdl", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.mdl.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "mdl", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.mdl.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "mdl", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.mdl.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "mdl", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.mdl.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "mdl", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.mdl.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "mdl", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.mdl.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "mdl", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.mdl.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "mdl", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.mdl.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "mdl", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.mdl.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "mdl", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.mdl.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "mdl", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.mdl.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "mdl", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.mdl.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "mdl", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.mdl.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "mdl", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.mdl.settings.configPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "The configuration file to use.", "loc": ["pre-commit", "hooks", "mdl", "settings", "configPath"], "readOnly": false, "type": "string"}, "pre-commit.hooks.mdl.settings.git-recurse": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Only process files known to git when given a directory.", "loc": ["pre-commit", "hooks", "mdl", "settings", "git-recurse"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.mdl.settings.ignore-front-matter": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Ignore YAML front matter.", "loc": ["pre-commit", "hooks", "mdl", "settings", "ignore-front-matter"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.mdl.settings.json": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Format output as JSON.", "loc": ["pre-commit", "hooks", "mdl", "settings", "json"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.mdl.settings.rules": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "Markdown rules to use for linting. Per default all rules are processed.", "loc": ["pre-commit", "hooks", "mdl", "settings", "rules"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.mdl.settings.rulesets": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "Specify additional ruleset files to load.", "loc": ["pre-commit", "hooks", "mdl", "settings", "rulesets"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.mdl.settings.show-aliases": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Show rule alias instead of rule ID when viewing rules.", "loc": ["pre-commit", "hooks", "mdl", "settings", "show-aliases"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.mdl.settings.skip-default-ruleset": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Do not load the default markdownlint ruleset. Use this option if you only want to load custom rulesets.", "loc": ["pre-commit", "hooks", "mdl", "settings", "skip-default-ruleset"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.mdl.settings.style": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"default\"", "description": "Select which style mdl uses.", "loc": ["pre-commit", "hooks", "mdl", "settings", "style"], "readOnly": false, "type": "string"}, "pre-commit.hooks.mdl.settings.tags": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "Markdown rules to use for linting containing the given tags. Per default all rules are processed.", "loc": ["pre-commit", "hooks", "mdl", "settings", "tags"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.mdl.settings.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Increase verbosity.", "loc": ["pre-commit", "hooks", "mdl", "settings", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.mdl.settings.warnings": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Show Kramdown warnings.", "loc": ["pre-commit", "hooks", "mdl", "settings", "warnings"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.mdl.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "mdl", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.mdl.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "mdl", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.mdl.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "mdl", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.mdl.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "mdl", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.mkdocs-linkcheck": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "mkdocs-linkcheck hook", "loc": ["pre-commit", "hooks", "mkdocs-linkcheck"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.mkdocs-linkcheck.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "mkdocs-linkcheck", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.mkdocs-linkcheck.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "mkdocs-linkcheck", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.mkdocs-linkcheck.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "mkdocs-linkcheck", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.mkdocs-linkcheck.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "mkdocs-linkcheck", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.mkdocs-linkcheck.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "mkdocs-linkcheck", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.mkdocs-linkcheck.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "mkdocs-linkcheck", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.mkdocs-linkcheck.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "mkdocs-linkcheck", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.mkdocs-linkcheck.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "mkdocs-linkcheck", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.mkdocs-linkcheck.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "mkdocs-linkcheck", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.mkdocs-linkcheck.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "mkdocs-linkcheck", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.mkdocs-linkcheck.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "mkdocs-linkcheck", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.mkdocs-linkcheck.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "mkdocs-linkcheck", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.mkdocs-linkcheck.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "mkdocs-linkcheck", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.mkdocs-linkcheck.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "mkdocs-linkcheck", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.mkdocs-linkcheck.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "mkdocs-linkcheck", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.mkdocs-linkcheck.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "mkdocs-linkcheck", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.mkdocs-linkcheck.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "mkdocs-linkcheck", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.mkdocs-linkcheck.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "mkdocs-linkcheck", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.mkdocs-linkcheck.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "mkdocs-linkcheck", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.mkdocs-linkcheck.settings.binPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"${tools.mkdocs-linkcheck}/bin/mkdocs-linkcheck\"\n", "description": "mkdocs-linkcheck binary path. Should be used to specify the mkdocs-linkcheck binary from your Nix-managed Python environment.", "loc": ["pre-commit", "hooks", "mkdocs-linkcheck", "settings", "binPath"], "readOnly": false, "type": "null or path"}, "pre-commit.hooks.mkdocs-linkcheck.settings.extension": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "File extension to scan for.", "loc": ["pre-commit", "hooks", "mkdocs-linkcheck", "settings", "extension"], "readOnly": false, "type": "string"}, "pre-commit.hooks.mkdocs-linkcheck.settings.local-only": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Whether to only check local links.", "loc": ["pre-commit", "hooks", "mkdocs-linkcheck", "settings", "local-only"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.mkdocs-linkcheck.settings.method": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"get\"", "description": "HTTP method to use when checking external links.", "loc": ["pre-commit", "hooks", "mkdocs-linkcheck", "settings", "method"], "readOnly": false, "type": "one of \"get\", \"head\""}, "pre-commit.hooks.mkdocs-linkcheck.settings.path": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Path to check", "loc": ["pre-commit", "hooks", "mkdocs-linkcheck", "settings", "path"], "readOnly": false, "type": "string"}, "pre-commit.hooks.mkdocs-linkcheck.settings.recurse": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Whether to recurse directories under path.", "loc": ["pre-commit", "hooks", "mkdocs-linkcheck", "settings", "recurse"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.mkdocs-linkcheck.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "mkdocs-linkcheck", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.mkdocs-linkcheck.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "mkdocs-linkcheck", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.mkdocs-linkcheck.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "mkdocs-linkcheck", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.mkdocs-linkcheck.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "mkdocs-linkcheck", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.mypy": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "mypy hook", "loc": ["pre-commit", "hooks", "mypy"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.mypy.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "mypy", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.mypy.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "mypy", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.mypy.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "mypy", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.mypy.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "mypy", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.mypy.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "mypy", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.mypy.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "mypy", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.mypy.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "mypy", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.mypy.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "mypy", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.mypy.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "mypy", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.mypy.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "mypy", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.mypy.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "mypy", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.mypy.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "mypy", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.mypy.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "mypy", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.mypy.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "mypy", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.mypy.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "mypy", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.mypy.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "mypy", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.mypy.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "mypy", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.mypy.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "mypy", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.mypy.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "mypy", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.mypy.settings.binPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"${tools.mypy}/bin/mypy\"\n", "description": "Mypy binary path. Should be used to specify the mypy executable in an environment containing your typing stubs.", "loc": ["pre-commit", "hooks", "mypy", "settings", "binPath"], "readOnly": false, "type": "null or string"}, "pre-commit.hooks.mypy.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "mypy", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.mypy.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "mypy", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.mypy.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "mypy", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.mypy.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "mypy", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.nixfmt-classic": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "nixfmt (classic) hook", "loc": ["pre-commit", "hooks", "nixfmt-classic"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.nixfmt-classic.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "nixfmt-classic", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.nixfmt-classic.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "nixfmt-classic", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.nixfmt-classic.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "nixfmt-classic", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.nixfmt-classic.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "nixfmt-classic", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.nixfmt-classic.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "nixfmt-classic", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.nixfmt-classic.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "nixfmt-classic", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.nixfmt-classic.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "nixfmt-classic", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.nixfmt-classic.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "nixfmt-classic", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.nixfmt-classic.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "nixfmt-classic", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.nixfmt-classic.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "nixfmt-classic", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.nixfmt-classic.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "nixfmt-classic", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.nixfmt-classic.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "nixfmt-classic", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.nixfmt-classic.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "nixfmt-classic", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.nixfmt-classic.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "nixfmt-classic", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.nixfmt-classic.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "nixfmt-classic", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.nixfmt-classic.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "nixfmt-classic", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.nixfmt-classic.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "nixfmt-classic", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.nixfmt-classic.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "nixfmt-classic", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.nixfmt-classic.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "nixfmt-classic", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.nixfmt-classic.settings.width": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "null", "description": "Line width.", "loc": ["pre-commit", "hooks", "nixfmt-classic", "settings", "width"], "readOnly": false, "type": "null or signed integer"}, "pre-commit.hooks.nixfmt-classic.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "nixfmt-classic", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.nixfmt-classic.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "nixfmt-classic", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.nixfmt-classic.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "nixfmt-classic", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.nixfmt-classic.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "nixfmt-classic", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.nixfmt-rfc-style": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "nixfmt (RFC 166 style) hook", "loc": ["pre-commit", "hooks", "nixfmt-rfc-style"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.nixfmt-rfc-style.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "nixfmt-rfc-style", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.nixfmt-rfc-style.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "nixfmt-rfc-style", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.nixfmt-rfc-style.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "nixfmt-rfc-style", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.nixfmt-rfc-style.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "nixfmt-rfc-style", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.nixfmt-rfc-style.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "nixfmt-rfc-style", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.nixfmt-rfc-style.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "nixfmt-rfc-style", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.nixfmt-rfc-style.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "nixfmt-rfc-style", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.nixfmt-rfc-style.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "nixfmt-rfc-style", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.nixfmt-rfc-style.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "nixfmt-rfc-style", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.nixfmt-rfc-style.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "nixfmt-rfc-style", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.nixfmt-rfc-style.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "nixfmt-rfc-style", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.nixfmt-rfc-style.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "nixfmt-rfc-style", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.nixfmt-rfc-style.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "nixfmt-rfc-style", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.nixfmt-rfc-style.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "nixfmt-rfc-style", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.nixfmt-rfc-style.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "nixfmt-rfc-style", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.nixfmt-rfc-style.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "nixfmt-rfc-style", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.nixfmt-rfc-style.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "nixfmt-rfc-style", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.nixfmt-rfc-style.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "nixfmt-rfc-style", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.nixfmt-rfc-style.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "nixfmt-rfc-style", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.nixfmt-rfc-style.settings.width": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "null", "description": "Line width.", "loc": ["pre-commit", "hooks", "nixfmt-rfc-style", "settings", "width"], "readOnly": false, "type": "null or signed integer"}, "pre-commit.hooks.nixfmt-rfc-style.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "nixfmt-rfc-style", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.nixfmt-rfc-style.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "nixfmt-rfc-style", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.nixfmt-rfc-style.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "nixfmt-rfc-style", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.nixfmt-rfc-style.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "nixfmt-rfc-style", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.no-commit-to-branch": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "no-commit-to-branch-hook", "loc": ["pre-commit", "hooks", "no-commit-to-branch"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.no-commit-to-branch.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "no-commit-to-branch", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.no-commit-to-branch.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "no-commit-to-branch", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.no-commit-to-branch.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "no-commit-to-branch", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.no-commit-to-branch.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "no-commit-to-branch", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.no-commit-to-branch.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "no-commit-to-branch", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.no-commit-to-branch.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "no-commit-to-branch", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.no-commit-to-branch.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "no-commit-to-branch", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.no-commit-to-branch.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "no-commit-to-branch", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.no-commit-to-branch.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "no-commit-to-branch", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.no-commit-to-branch.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "no-commit-to-branch", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.no-commit-to-branch.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "no-commit-to-branch", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.no-commit-to-branch.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "no-commit-to-branch", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.no-commit-to-branch.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "no-commit-to-branch", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.no-commit-to-branch.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "no-commit-to-branch", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.no-commit-to-branch.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "no-commit-to-branch", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.no-commit-to-branch.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "no-commit-to-branch", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.no-commit-to-branch.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "no-commit-to-branch", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.no-commit-to-branch.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "no-commit-to-branch", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.no-commit-to-branch.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "no-commit-to-branch", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.no-commit-to-branch.settings.branch": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[\n  \"main\"\n]", "description": "Branches to disallow commits to.", "example": "[\n  \"main\"\n  \"master\"\n]", "loc": ["pre-commit", "hooks", "no-commit-to-branch", "settings", "branch"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.no-commit-to-branch.settings.pattern": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "RegEx patterns for branch names to disallow commits to.", "example": "[\n  \"ma.*\"\n]", "loc": ["pre-commit", "hooks", "no-commit-to-branch", "settings", "pattern"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.no-commit-to-branch.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "no-commit-to-branch", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.no-commit-to-branch.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "no-commit-to-branch", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.no-commit-to-branch.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "no-commit-to-branch", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.no-commit-to-branch.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "no-commit-to-branch", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.ormolu": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "ormolu hook", "loc": ["pre-commit", "hooks", "ormolu"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.ormolu.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "ormolu", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.ormolu.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "ormolu", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.ormolu.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "ormolu", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.ormolu.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "ormolu", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.ormolu.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "ormolu", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.ormolu.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "ormolu", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.ormolu.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "ormolu", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.ormolu.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "ormolu", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.ormolu.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "ormolu", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.ormolu.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "ormolu", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.ormolu.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "ormolu", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.ormolu.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "ormolu", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.ormolu.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "ormolu", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.ormolu.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "ormolu", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.ormolu.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "ormolu", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.ormolu.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "ormolu", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.ormolu.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "ormolu", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.ormolu.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "ormolu", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.ormolu.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "ormolu", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.ormolu.settings.cabalDefaultExtensions": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Use `default-extensions` from `.cabal` files.", "loc": ["pre-commit", "hooks", "ormolu", "settings", "cabalDefaultExtensions"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.ormolu.settings.defaultExtensions": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "Haskell language extensions to enable.", "loc": ["pre-commit", "hooks", "ormolu", "settings", "defaultExtensions"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.ormolu.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "ormolu", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.ormolu.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "ormolu", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.ormolu.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "ormolu", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.ormolu.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "ormolu", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.php-cs-fixer": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "php-cs-fixer hook", "loc": ["pre-commit", "hooks", "php-cs-fixer"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.php-cs-fixer.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "php-cs-fixer", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.php-cs-fixer.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "php-cs-fixer", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.php-cs-fixer.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "php-cs-fixer", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.php-cs-fixer.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "php-cs-fixer", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.php-cs-fixer.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "php-cs-fixer", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.php-cs-fixer.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "php-cs-fixer", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.php-cs-fixer.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "php-cs-fixer", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.php-cs-fixer.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "php-cs-fixer", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.php-cs-fixer.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "php-cs-fixer", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.php-cs-fixer.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "php-cs-fixer", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.php-cs-fixer.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "php-cs-fixer", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.php-cs-fixer.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "php-cs-fixer", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.php-cs-fixer.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "php-cs-fixer", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.php-cs-fixer.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "php-cs-fixer", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.php-cs-fixer.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "php-cs-fixer", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.php-cs-fixer.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "php-cs-fixer", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.php-cs-fixer.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "php-cs-fixer", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.php-cs-fixer.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "php-cs-fixer", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.php-cs-fixer.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "php-cs-fixer", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.php-cs-fixer.settings.binPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"${tools.php-cs-fixer}/bin/php-cs-fixer\"\n", "description": "PHP-CS-Fixer binary path.", "loc": ["pre-commit", "hooks", "php-cs-fixer", "settings", "binPath"], "readOnly": false, "type": "null or string"}, "pre-commit.hooks.php-cs-fixer.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "php-cs-fixer", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.php-cs-fixer.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "php-cs-fixer", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.php-cs-fixer.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "php-cs-fixer", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.php-cs-fixer.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "php-cs-fixer", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.phpcbf": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "phpcbf hook", "loc": ["pre-commit", "hooks", "phpcbf"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.phpcbf.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "phpcbf", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.phpcbf.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "phpcbf", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.phpcbf.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "phpcbf", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.phpcbf.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "phpcbf", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.phpcbf.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "phpcbf", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.phpcbf.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "phpcbf", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.phpcbf.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "phpcbf", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.phpcbf.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "phpcbf", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.phpcbf.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "phpcbf", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.phpcbf.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "phpcbf", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.phpcbf.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "phpcbf", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.phpcbf.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "phpcbf", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.phpcbf.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "phpcbf", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.phpcbf.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "phpcbf", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.phpcbf.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "phpcbf", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.phpcbf.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "phpcbf", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.phpcbf.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "phpcbf", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.phpcbf.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "phpcbf", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.phpcbf.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "phpcbf", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.phpcbf.settings.binPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"${tools.phpcbf}/bin/phpcbf\"\n", "description": "PHP_CodeSniffer binary path.", "loc": ["pre-commit", "hooks", "phpcbf", "settings", "binPath"], "readOnly": false, "type": "null or string"}, "pre-commit.hooks.phpcbf.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "phpcbf", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.phpcbf.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "phpcbf", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.phpcbf.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "phpcbf", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.phpcbf.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "phpcbf", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.phpcs": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "phpcs hook", "loc": ["pre-commit", "hooks", "phpcs"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.phpcs.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "phpcs", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.phpcs.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "phpcs", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.phpcs.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "phpcs", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.phpcs.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "phpcs", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.phpcs.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "phpcs", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.phpcs.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "phpcs", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.phpcs.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "phpcs", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.phpcs.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "phpcs", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.phpcs.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "phpcs", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.phpcs.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "phpcs", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.phpcs.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "phpcs", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.phpcs.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "phpcs", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.phpcs.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "phpcs", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.phpcs.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "phpcs", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.phpcs.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "phpcs", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.phpcs.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "phpcs", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.phpcs.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "phpcs", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.phpcs.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "phpcs", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.phpcs.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "phpcs", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.phpcs.settings.binPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"${tools.phpcs}/bin/phpcs\"\n", "description": "PHP_CodeSniffer binary path.", "loc": ["pre-commit", "hooks", "phpcs", "settings", "binPath"], "readOnly": false, "type": "null or string"}, "pre-commit.hooks.phpcs.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "phpcs", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.phpcs.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "phpcs", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.phpcs.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "phpcs", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.phpcs.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "phpcs", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.phpstan": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "phpstan hook", "loc": ["pre-commit", "hooks", "phpstan"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.phpstan.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "phpstan", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.phpstan.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "phpstan", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.phpstan.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "phpstan", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.phpstan.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "phpstan", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.phpstan.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "phpstan", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.phpstan.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "phpstan", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.phpstan.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "phpstan", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.phpstan.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "phpstan", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.phpstan.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "phpstan", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.phpstan.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "phpstan", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.phpstan.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "phpstan", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.phpstan.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "phpstan", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.phpstan.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "phpstan", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.phpstan.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "phpstan", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.phpstan.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "phpstan", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.phpstan.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "phpstan", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.phpstan.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "phpstan", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.phpstan.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "phpstan", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.phpstan.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "phpstan", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.phpstan.settings.binPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"${tools.phpstan}/bin/phpstan\"\n", "description": "PHPStan binary path.", "loc": ["pre-commit", "hooks", "phpstan", "settings", "binPath"], "readOnly": false, "type": "null or string"}, "pre-commit.hooks.phpstan.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "phpstan", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.phpstan.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "phpstan", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.phpstan.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "phpstan", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.phpstan.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "phpstan", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.prettier": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "prettier hook", "loc": ["pre-commit", "hooks", "prettier"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.prettier.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "prettier", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.prettier.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "prettier", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.prettier.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "prettier", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.prettier.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "prettier", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.prettier.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "prettier", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.prettier.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "prettier", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.prettier.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "prettier", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.prettier.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "prettier", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.prettier.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "prettier", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.prettier.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "prettier", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.prettier.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "prettier", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.prettier.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "prettier", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.prettier.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "prettier", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.prettier.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "prettier", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.prettier.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "prettier", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.prettier.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "prettier", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.prettier.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "prettier", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.prettier.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "prettier", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.prettier.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "prettier", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.prettier.settings.allow-parens": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"always\"", "description": "Include parentheses around a sole arrow function parameter.", "loc": ["pre-commit", "hooks", "prettier", "settings", "allow-parens"], "readOnly": false, "type": "one of \"always\", \"avoid\""}, "pre-commit.hooks.prettier.settings.binPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"${tools.prettier}/bin/prettier\"\n", "description": "`prettier` binary path. E.g. if you want to use the `prettier` in `node_modules`, use `./node_modules/.bin/prettier`.", "loc": ["pre-commit", "hooks", "prettier", "settings", "binPath"], "readOnly": false, "type": "null or path"}, "pre-commit.hooks.prettier.settings.bracket-same-line": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Put > of opening tags on the last line instead of on a new line.", "loc": ["pre-commit", "hooks", "prettier", "settings", "bracket-same-line"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.prettier.settings.cache": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Only format changed files.", "loc": ["pre-commit", "hooks", "prettier", "settings", "cache"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.prettier.settings.cache-location": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"./node_modules/.cache/prettier/.prettier-cache\"", "description": "Path to the cache file location used by `--cache` flag.", "loc": ["pre-commit", "hooks", "prettier", "settings", "cache-location"], "readOnly": false, "type": "string"}, "pre-commit.hooks.prettier.settings.cache-strategy": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "null", "description": "Strategy for the cache to use for detecting changed files.", "loc": ["pre-commit", "hooks", "prettier", "settings", "cache-strategy"], "readOnly": false, "type": "null or one of \"metadata\", \"content\""}, "pre-commit.hooks.prettier.settings.check": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Output a human-friendly message and a list of unformatted files, if any.", "loc": ["pre-commit", "hooks", "prettier", "settings", "check"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.prettier.settings.color": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "true", "description": "Colorize error messages.", "loc": ["pre-commit", "hooks", "prettier", "settings", "color"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.prettier.settings.config-precedence": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"cli-override\"", "description": "Defines how config file should be evaluated in combination of CLI options.", "loc": ["pre-commit", "hooks", "prettier", "settings", "config-precedence"], "readOnly": false, "type": "one of \"cli-override\", \"file-override\", \"prefer-file\""}, "pre-commit.hooks.prettier.settings.configPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Path to a Prettier configuration file (.prettierrc, package.json, prettier.config.js).", "loc": ["pre-commit", "hooks", "prettier", "settings", "configPath"], "readOnly": false, "type": "string"}, "pre-commit.hooks.prettier.settings.embedded-language-formatting": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"auto\"", "description": "Control how Prettier formats quoted code embedded in the file.", "loc": ["pre-commit", "hooks", "prettier", "settings", "embedded-language-formatting"], "readOnly": false, "type": "one of \"auto\", \"off\""}, "pre-commit.hooks.prettier.settings.end-of-line": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"lf\"", "description": "Which end of line characters to apply.", "loc": ["pre-commit", "hooks", "prettier", "settings", "end-of-line"], "readOnly": false, "type": "one of \"lf\", \"crlf\", \"cr\", \"auto\""}, "pre-commit.hooks.prettier.settings.html-whitespace-sensitivity": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"css\"", "description": "How to handle whitespaces in HTML.", "loc": ["pre-commit", "hooks", "prettier", "settings", "html-whitespace-sensitivity"], "readOnly": false, "type": "one of \"css\", \"strict\", \"ignore\""}, "pre-commit.hooks.prettier.settings.ignore-path": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "Path to a file containing patterns that describe files to ignore.\n                By default, prettier looks for `./.gitignore` and `./.prettierignore`.\n                Multiple values are accepted.", "loc": ["pre-commit", "hooks", "prettier", "settings", "ignore-path"], "readOnly": false, "type": "list of path"}, "pre-commit.hooks.prettier.settings.ignore-unknown": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "true", "description": "Ignore unknown files.", "loc": ["pre-commit", "hooks", "prettier", "settings", "ignore-unknown"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.prettier.settings.insert-pragma": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Insert @format pragma into file's first docblock comment.", "loc": ["pre-commit", "hooks", "prettier", "settings", "insert-pragma"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.prettier.settings.jsx-single-quote": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Use single quotes in JSX.", "loc": ["pre-commit", "hooks", "prettier", "settings", "jsx-single-quote"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.prettier.settings.list-different": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "true", "description": "Print the filenames of files that are different from Prettier formatting.", "loc": ["pre-commit", "hooks", "prettier", "settings", "list-different"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.prettier.settings.log-level": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"log\"", "description": "What level of logs to report.", "example": "\"debug\"", "loc": ["pre-commit", "hooks", "prettier", "settings", "log-level"], "readOnly": false, "type": "one of \"silent\", \"error\", \"warn\", \"log\", \"debug\""}, "pre-commit.hooks.prettier.settings.no-bracket-spacing": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Do not print spaces between brackets.", "loc": ["pre-commit", "hooks", "prettier", "settings", "no-bracket-spacing"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.prettier.settings.no-config": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Do not look for a configuration file.", "loc": ["pre-commit", "hooks", "prettier", "settings", "no-config"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.prettier.settings.no-editorconfig": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Don't take .editorconfig into account when parsing configuration.", "loc": ["pre-commit", "hooks", "prettier", "settings", "no-editorconfig"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.prettier.settings.no-error-on-unmatched-pattern": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Prevent errors when pattern is unmatched.", "loc": ["pre-commit", "hooks", "prettier", "settings", "no-error-on-unmatched-pattern"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.prettier.settings.no-semi": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Do not print semicolons, except at the beginning of lines which may need them.", "loc": ["pre-commit", "hooks", "prettier", "settings", "no-semi"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.prettier.settings.parser": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Which parser to use.", "loc": ["pre-commit", "hooks", "prettier", "settings", "parser"], "readOnly": false, "type": "one of \"\", \"flow\", \"babel\", \"babel-flow\", \"babel-ts\", \"typescript\", \"acorn\", \"espree\", \"meriyah\", \"css\", \"less\", \"scss\", \"json\", \"json5\", \"json-stringify\", \"graphql\", \"markdown\", \"mdx\", \"vue\", \"yaml\", \"glimmer\", \"html\", \"angular\", \"lwc\""}, "pre-commit.hooks.prettier.settings.plugins": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "Add plugins from paths.", "loc": ["pre-commit", "hooks", "prettier", "settings", "plugins"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.prettier.settings.print-width": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "80", "description": "Line length that the printer will wrap on.", "loc": ["pre-commit", "hooks", "prettier", "settings", "print-width"], "readOnly": false, "type": "signed integer"}, "pre-commit.hooks.prettier.settings.prose-wrap": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"preserve\"", "description": "When to or if at all hard wrap prose to print width.", "loc": ["pre-commit", "hooks", "prettier", "settings", "prose-wrap"], "readOnly": false, "type": "one of \"always\", \"never\", \"preserve\""}, "pre-commit.hooks.prettier.settings.quote-props": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"as-needed\"", "description": "Change when properties in objects are quoted.", "loc": ["pre-commit", "hooks", "prettier", "settings", "quote-props"], "readOnly": false, "type": "one of \"as-needed\", \"consistent\", \"preserve\""}, "pre-commit.hooks.prettier.settings.require-pragma": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Require either '@prettier' or '@format' to be present in the file's first docblock comment.", "loc": ["pre-commit", "hooks", "prettier", "settings", "require-pragma"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.prettier.settings.single-attribute-per-line": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Enforce single attribute per line in HTML, Vue andJSX.", "loc": ["pre-commit", "hooks", "prettier", "settings", "single-attribute-per-line"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.prettier.settings.single-quote": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Number of spaces per indentation-level.", "loc": ["pre-commit", "hooks", "prettier", "settings", "single-quote"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.prettier.settings.tab-width": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "2", "description": "Line length that the printer will wrap on.", "loc": ["pre-commit", "hooks", "prettier", "settings", "tab-width"], "readOnly": false, "type": "signed integer"}, "pre-commit.hooks.prettier.settings.trailing-comma": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"all\"", "description": "Print trailing commas wherever possible in multi-line comma-separated syntactic structures.", "loc": ["pre-commit", "hooks", "prettier", "settings", "trailing-comma"], "readOnly": false, "type": "one of \"all\", \"es5\", \"none\""}, "pre-commit.hooks.prettier.settings.use-tabs": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Indent with tabs instead of spaces.", "loc": ["pre-commit", "hooks", "prettier", "settings", "use-tabs"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.prettier.settings.vue-indent-script-and-style": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Indent script and style tags in Vue files.", "loc": ["pre-commit", "hooks", "prettier", "settings", "vue-indent-script-and-style"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.prettier.settings.with-node-modules": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Process files inside 'node_modules' directory.", "loc": ["pre-commit", "hooks", "prettier", "settings", "with-node-modules"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.prettier.settings.write": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "true", "description": "Edit files in-place.", "loc": ["pre-commit", "hooks", "prettier", "settings", "write"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.prettier.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "prettier", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.prettier.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "prettier", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.prettier.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "prettier", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.prettier.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "prettier", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.psalm": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "psalm hook", "loc": ["pre-commit", "hooks", "psalm"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.psalm.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "psalm", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.psalm.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "psalm", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.psalm.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "psalm", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.psalm.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "psalm", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.psalm.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "psalm", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.psalm.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "psalm", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.psalm.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "psalm", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.psalm.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "psalm", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.psalm.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "psalm", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.psalm.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "psalm", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.psalm.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "psalm", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.psalm.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "psalm", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.psalm.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "psalm", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.psalm.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "psalm", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.psalm.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "psalm", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.psalm.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "psalm", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.psalm.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "psalm", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.psalm.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "psalm", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.psalm.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "psalm", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.psalm.settings.binPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"${tools.psalm}/bin/psalm\"\n", "description": "Psalm binary path.", "loc": ["pre-commit", "hooks", "psalm", "settings", "binPath"], "readOnly": false, "type": "null or string"}, "pre-commit.hooks.psalm.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "psalm", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.psalm.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "psalm", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.psalm.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "psalm", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.psalm.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "psalm", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.pylint": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "pylint hook", "loc": ["pre-commit", "hooks", "pylint"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.pylint.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "pylint", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.pylint.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "pylint", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.pylint.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "pylint", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.pylint.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "pylint", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.pylint.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "pylint", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.pylint.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "pylint", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.pylint.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "pylint", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.pylint.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "pylint", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.pylint.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "pylint", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.pylint.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "pylint", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.pylint.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "pylint", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.pylint.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "pylint", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.pylint.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "pylint", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.pylint.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "pylint", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.pylint.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "pylint", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.pylint.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "pylint", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.pylint.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "pylint", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.pylint.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "pylint", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.pylint.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "pylint", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.pylint.settings.binPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"${tools.pylint}/bin/pylint\"\n", "description": "Pylint binary path. Should be used to specify Pylint binary from your Nix-managed Python environment.", "loc": ["pre-commit", "hooks", "pylint", "settings", "binPath"], "readOnly": false, "type": "null or string"}, "pre-commit.hooks.pylint.settings.reports": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Whether to display a full report.", "loc": ["pre-commit", "hooks", "pylint", "settings", "reports"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.pylint.settings.score": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "true", "description": "Whether to activate the evaluation score.", "loc": ["pre-commit", "hooks", "pylint", "settings", "score"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.pylint.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "pylint", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.pylint.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "pylint", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.pylint.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "pylint", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.pylint.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "pylint", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.pyright": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "pyright hook", "loc": ["pre-commit", "hooks", "pyright"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.pyright.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "pyright", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.pyright.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "pyright", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.pyright.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "pyright", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.pyright.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "pyright", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.pyright.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "pyright", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.pyright.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "pyright", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.pyright.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "pyright", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.pyright.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "pyright", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.pyright.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "pyright", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.pyright.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "pyright", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.pyright.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "pyright", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.pyright.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "pyright", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.pyright.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "pyright", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.pyright.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "pyright", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.pyright.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "pyright", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.pyright.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "pyright", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.pyright.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "pyright", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.pyright.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "pyright", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.pyright.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "pyright", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.pyright.settings.binPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"${tools.pyright}/bin/pyright\"\n", "description": "Pyright binary path. Should be used to specify the pyright executable in an environment containing your typing stubs.", "loc": ["pre-commit", "hooks", "pyright", "settings", "binPath"], "readOnly": false, "type": "null or string"}, "pre-commit.hooks.pyright.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "pyright", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.pyright.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "pyright", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.pyright.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "pyright", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.pyright.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "pyright", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.pyupgrade": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "pyupgrade hook", "loc": ["pre-commit", "hooks", "pyupgrade"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.pyupgrade.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "pyupgrade", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.pyupgrade.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "pyupgrade", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.pyupgrade.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "pyupgrade", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.pyupgrade.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "pyupgrade", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.pyupgrade.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "pyupgrade", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.pyupgrade.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "pyupgrade", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.pyupgrade.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "pyupgrade", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.pyupgrade.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "pyupgrade", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.pyupgrade.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "pyupgrade", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.pyupgrade.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "pyupgrade", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.pyupgrade.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "pyupgrade", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.pyupgrade.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "pyupgrade", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.pyupgrade.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "pyupgrade", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.pyupgrade.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "pyupgrade", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.pyupgrade.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "pyupgrade", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.pyupgrade.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "pyupgrade", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.pyupgrade.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "pyupgrade", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.pyupgrade.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "pyupgrade", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.pyupgrade.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "pyupgrade", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.pyupgrade.settings.binPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"${tools.pyupgrade}/bin/pyupgrade\"\n", "description": "pyupgrade binary path. Should be used to specify the pyupgrade binary from your Nix-managed Python environment.", "loc": ["pre-commit", "hooks", "pyupgrade", "settings", "binPath"], "readOnly": false, "type": "null or string"}, "pre-commit.hooks.pyupgrade.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "pyupgrade", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.pyupgrade.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "pyupgrade", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.pyupgrade.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "pyupgrade", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.pyupgrade.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "pyupgrade", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.reuse": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "reuse hook", "loc": ["pre-commit", "hooks", "reuse"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.reuse.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "reuse", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.reuse.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "reuse", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.reuse.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "reuse", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.reuse.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "reuse", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.reuse.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "reuse", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.reuse.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "reuse", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.reuse.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "reuse", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.reuse.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "reuse", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.reuse.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "reuse", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.reuse.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "reuse", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.reuse.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "reuse", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.reuse.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "reuse", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.reuse.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "reuse", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.reuse.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "reuse", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.reuse.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "reuse", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.reuse.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "reuse", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.reuse.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "reuse", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.reuse.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "reuse", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.reuse.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "reuse", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.reuse.settings.flags": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Flags passed to reuse. For available options run 'reuse lint --help'", "example": "\"--json\"", "loc": ["pre-commit", "hooks", "reuse", "settings", "flags"], "readOnly": false, "type": "string"}, "pre-commit.hooks.reuse.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "reuse", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.reuse.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "reuse", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.reuse.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "reuse", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.reuse.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "reuse", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.revive": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "revive hook", "loc": ["pre-commit", "hooks", "revive"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.revive.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "revive", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.revive.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "revive", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.revive.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "revive", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.revive.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "revive", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.revive.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "revive", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.revive.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "revive", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.revive.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "revive", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.revive.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "revive", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.revive.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "revive", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.revive.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "revive", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.revive.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "revive", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.revive.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "revive", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.revive.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "revive", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.revive.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "revive", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.revive.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "revive", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.revive.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "revive", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.revive.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "revive", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.revive.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "revive", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.revive.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "revive", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.revive.settings.configPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Path to the configuration TOML file.", "loc": ["pre-commit", "hooks", "revive", "settings", "configPath"], "readOnly": false, "type": "string"}, "pre-commit.hooks.revive.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "revive", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.revive.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "revive", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.revive.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "revive", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.revive.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "revive", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.ripsecrets": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "ripsecrets hook", "loc": ["pre-commit", "hooks", "ripsecrets"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.ripsecrets.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "ripsecrets", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.ripsecrets.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "ripsecrets", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.ripsecrets.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "ripsecrets", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.ripsecrets.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "ripsecrets", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.ripsecrets.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "ripsecrets", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.ripsecrets.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "ripsecrets", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.ripsecrets.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "ripsecrets", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.ripsecrets.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "ripsecrets", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.ripsecrets.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "ripsecrets", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.ripsecrets.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "ripsecrets", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.ripsecrets.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "ripsecrets", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.ripsecrets.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "ripsecrets", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.ripsecrets.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "ripsecrets", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.ripsecrets.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "ripsecrets", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.ripsecrets.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "ripsecrets", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.ripsecrets.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "ripsecrets", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.ripsecrets.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "ripsecrets", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.ripsecrets.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "ripsecrets", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.ripsecrets.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "ripsecrets", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.ripsecrets.settings.additionalPatterns": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "Additional regex patterns used to find secrets. If there is a matching group in the regex the matched group will be tested for randomness before being reported as a secret.", "loc": ["pre-commit", "hooks", "ripsecrets", "settings", "additionalPatterns"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.ripsecrets.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "ripsecrets", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.ripsecrets.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "ripsecrets", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.ripsecrets.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "ripsecrets", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.ripsecrets.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "ripsecrets", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.rustfmt": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "Additional rustfmt settings\n\nOverride the `rustfmt` and `cargo` packages by setting `hooks.rustfmt.packageOverrides`.\n\n```\nhooks.rustfmt.packageOverrides.cargo = pkgs.cargo;\nhooks.rustfmt.packageOverrides.rustfmt = pkgs.rustfmt;\n```\n", "loc": ["pre-commit", "hooks", "rustfmt"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.rustfmt.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "rustfmt", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.rustfmt.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "rustfmt", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.rustfmt.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "rustfmt", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.rustfmt.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "rustfmt", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.rustfmt.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "rustfmt", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.rustfmt.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "rustfmt", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.rustfmt.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "rustfmt", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.rustfmt.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "rustfmt", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.rustfmt.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "rustfmt", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.rustfmt.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "rustfmt", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.rustfmt.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "rustfmt", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.rustfmt.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "rustfmt", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.rustfmt.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "rustfmt", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.rustfmt.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "rustfmt", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.rustfmt.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "rustfmt", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.rustfmt.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "rustfmt", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.rustfmt.packageOverrides.cargo": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "The cargo package to use.", "loc": ["pre-commit", "hooks", "rustfmt", "packageOverrides", "cargo"], "readOnly": false, "type": "package"}, "pre-commit.hooks.rustfmt.packageOverrides.rustfmt": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "The rustfmt package to use.", "loc": ["pre-commit", "hooks", "rustfmt", "packageOverrides", "rustfmt"], "readOnly": false, "type": "package"}, "pre-commit.hooks.rustfmt.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "rustfmt", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.rustfmt.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "rustfmt", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.rustfmt.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "rustfmt", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.rustfmt.settings.all": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "true", "description": "Format all packages, and also their local path-based dependencies", "loc": ["pre-commit", "hooks", "rustfmt", "settings", "all"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.rustfmt.settings.check": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Run rustfmt in check mode", "loc": ["pre-commit", "hooks", "rustfmt", "settings", "check"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.rustfmt.settings.color": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"always\"", "description": "Coloring the output", "loc": ["pre-commit", "hooks", "rustfmt", "settings", "color"], "readOnly": false, "type": "one of \"auto\", \"always\", \"never\""}, "pre-commit.hooks.rustfmt.settings.config": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "{ }", "description": "Override configuration values", "loc": ["pre-commit", "hooks", "rustfmt", "settings", "config"], "readOnly": false, "type": "attribute set"}, "pre-commit.hooks.rustfmt.settings.config-path": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "null", "description": "Path to rustfmt.toml config file", "loc": ["pre-commit", "hooks", "rustfmt", "settings", "config-path"], "readOnly": false, "type": "null or string"}, "pre-commit.hooks.rustfmt.settings.emit": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "null", "description": "What data to emit and how", "loc": ["pre-commit", "hooks", "rustfmt", "settings", "emit"], "readOnly": false, "type": "null or one of \"files\", \"stdout\""}, "pre-commit.hooks.rustfmt.settings.files-with-diff": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "", "loc": ["pre-commit", "hooks", "rustfmt", "settings", "files-with-diff"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.rustfmt.settings.manifest-path": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "null", "description": "Path to Cargo.toml", "loc": ["pre-commit", "hooks", "rustfmt", "settings", "manifest-path"], "readOnly": false, "type": "null or string"}, "pre-commit.hooks.rustfmt.settings.message-format": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "null", "description": "The output format of diagnostic messages", "loc": ["pre-commit", "hooks", "rustfmt", "settings", "message-format"], "readOnly": false, "type": "null or one of \"human\", \"short\""}, "pre-commit.hooks.rustfmt.settings.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "Package(s) to check", "loc": ["pre-commit", "hooks", "rustfmt", "settings", "package"], "readOnly": false, "type": "list of string matching the pattern [][*?!0-9A-Za-z_-]+"}, "pre-commit.hooks.rustfmt.settings.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Use verbose output", "loc": ["pre-commit", "hooks", "rustfmt", "settings", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.rustfmt.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "rustfmt", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.rustfmt.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "rustfmt", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.rustfmt.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "rustfmt", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.rustfmt.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "rustfmt", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.shfmt": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "shfmt hook", "loc": ["pre-commit", "hooks", "shfmt"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.shfmt.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "shfmt", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.shfmt.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "shfmt", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.shfmt.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "shfmt", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.shfmt.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "shfmt", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.shfmt.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "shfmt", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.shfmt.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "shfmt", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.shfmt.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "shfmt", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.shfmt.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "shfmt", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.shfmt.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "shfmt", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.shfmt.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "shfmt", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.shfmt.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "shfmt", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.shfmt.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "shfmt", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.shfmt.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "shfmt", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.shfmt.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "shfmt", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.shfmt.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "shfmt", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.shfmt.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "shfmt", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.shfmt.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "shfmt", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.shfmt.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "shfmt", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.shfmt.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "shfmt", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.shfmt.settings.simplify": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "true", "description": "Simplify the code.", "loc": ["pre-commit", "hooks", "shfmt", "settings", "simplify"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.shfmt.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "shfmt", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.shfmt.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "shfmt", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.shfmt.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "shfmt", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.shfmt.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "shfmt", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.sort-file-contents": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "sort-file-contents-hook", "loc": ["pre-commit", "hooks", "sort-file-contents"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.sort-file-contents.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "sort-file-contents", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.sort-file-contents.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "sort-file-contents", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.sort-file-contents.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "sort-file-contents", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.sort-file-contents.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "sort-file-contents", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.sort-file-contents.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "sort-file-contents", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.sort-file-contents.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "sort-file-contents", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.sort-file-contents.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "sort-file-contents", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.sort-file-contents.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "sort-file-contents", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.sort-file-contents.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "sort-file-contents", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.sort-file-contents.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "sort-file-contents", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.sort-file-contents.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "sort-file-contents", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.sort-file-contents.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "sort-file-contents", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.sort-file-contents.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "sort-file-contents", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.sort-file-contents.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "sort-file-contents", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.sort-file-contents.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "sort-file-contents", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.sort-file-contents.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "sort-file-contents", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.sort-file-contents.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "sort-file-contents", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.sort-file-contents.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "sort-file-contents", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.sort-file-contents.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "sort-file-contents", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.sort-file-contents.settings.ignore-case": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Fold lower case to upper case characters.", "loc": ["pre-commit", "hooks", "sort-file-contents", "settings", "ignore-case"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.sort-file-contents.settings.unique": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Ensure each line is unique.", "loc": ["pre-commit", "hooks", "sort-file-contents", "settings", "unique"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.sort-file-contents.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "sort-file-contents", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.sort-file-contents.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "sort-file-contents", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.sort-file-contents.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "sort-file-contents", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.sort-file-contents.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "sort-file-contents", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.statix": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "statix hook", "loc": ["pre-commit", "hooks", "statix"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.statix.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "statix", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.statix.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "statix", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.statix.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "statix", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.statix.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "statix", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.statix.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "statix", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.statix.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "statix", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.statix.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "statix", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.statix.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "statix", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.statix.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "statix", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.statix.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "statix", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.statix.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "statix", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.statix.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "statix", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.statix.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "statix", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.statix.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "statix", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.statix.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "statix", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.statix.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "statix", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.statix.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "statix", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.statix.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "statix", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.statix.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "statix", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.statix.settings.config": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "null", "description": "Path to statix.toml or its parent directory.", "loc": ["pre-commit", "hooks", "statix", "settings", "config"], "readOnly": false, "type": "null or string"}, "pre-commit.hooks.statix.settings.format": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"errfmt\"", "description": "Error Output format.", "loc": ["pre-commit", "hooks", "statix", "settings", "format"], "readOnly": false, "type": "one of \"stderr\", \"errfmt\", \"json\""}, "pre-commit.hooks.statix.settings.ignore": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "Globs of file patterns to skip.", "example": "[\n  \"flake.nix\"\n  \"_*\"\n]", "loc": ["pre-commit", "hooks", "statix", "settings", "ignore"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.statix.settings.unrestricted": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Don't respect .gitignore files.", "example": "true", "loc": ["pre-commit", "hooks", "statix", "settings", "unrestricted"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.statix.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "statix", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.statix.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "statix", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.statix.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "statix", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.statix.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "statix", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.treefmt": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "Treefmt hook.\n\nInclude any additional formatters configured by treefmt as `hooks.treefmt.settings.formatters`.\n\n```\nhooks.treefmt.settings.formatters = [\n  pkgs.nixpkgs-fmt\n  pkgs.black\n];\n```\n\nOverride `treefmt` itself by setting `hooks.treefmt.packageOverrides.treefmt`.\n\n```\nhooks.treefmt.packageOverrides.treefmt = pkgs.treefmt;\n```\n", "loc": ["pre-commit", "hooks", "treefmt"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.treefmt.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "treefmt", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.treefmt.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "treefmt", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.treefmt.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "treefmt", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.treefmt.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "treefmt", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.treefmt.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "treefmt", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.treefmt.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "treefmt", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.treefmt.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "treefmt", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.treefmt.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "treefmt", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.treefmt.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "treefmt", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.treefmt.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "treefmt", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.treefmt.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "treefmt", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.treefmt.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "treefmt", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.treefmt.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "treefmt", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.treefmt.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "treefmt", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.treefmt.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "treefmt", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.treefmt.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "treefmt", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.treefmt.packageOverrides.treefmt": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "The treefmt package to use", "loc": ["pre-commit", "hooks", "treefmt", "packageOverrides", "treefmt"], "readOnly": false, "type": "package"}, "pre-commit.hooks.treefmt.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "treefmt", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.treefmt.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "treefmt", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.treefmt.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "treefmt", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.treefmt.settings.fail-on-change": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "true", "description": "Fail if some files require re-formatting.", "loc": ["pre-commit", "hooks", "treefmt", "settings", "fail-on-change"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.treefmt.settings.formatters": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "The formatter packages configured by treefmt", "loc": ["pre-commit", "hooks", "treefmt", "settings", "formatters"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.treefmt.settings.no-cache": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "true", "description": "Ignore the evaluation cache entirely.", "loc": ["pre-commit", "hooks", "treefmt", "settings", "no-cache"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.treefmt.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "treefmt", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.treefmt.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "treefmt", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.treefmt.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "treefmt", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.treefmt.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "treefmt", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.typos": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "typos hook", "loc": ["pre-commit", "hooks", "typos"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.typos.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "typos", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.typos.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "typos", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.typos.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "typos", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.typos.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "typos", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.typos.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "typos", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.typos.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "typos", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.typos.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "typos", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.typos.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "typos", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.typos.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "typos", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.typos.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "typos", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.typos.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "typos", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.typos.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "typos", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.typos.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "typos", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.typos.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "typos", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.typos.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "typos", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.typos.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "typos", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.typos.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "typos", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.typos.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "typos", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.typos.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "typos", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.typos.settings.binary": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Whether to search binary files.", "loc": ["pre-commit", "hooks", "typos", "settings", "binary"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.typos.settings.color": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"auto\"", "description": "When to use generate output.", "loc": ["pre-commit", "hooks", "typos", "settings", "color"], "readOnly": false, "type": "one of \"auto\", \"always\", \"never\""}, "pre-commit.hooks.typos.settings.configPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Path to a custom config file.", "example": "\".typos.toml\"", "loc": ["pre-commit", "hooks", "typos", "settings", "configPath"], "readOnly": false, "type": "string"}, "pre-commit.hooks.typos.settings.configuration": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Multiline-string configuration passed as config file. If set, config set in `typos.settings.configPath` gets ignored.", "example": "''\n  [files]\n  ignore-dot = true\n  \n  [default]\n  binary = false\n  \n  [type.py]\n  extend-glob = []\n''", "loc": ["pre-commit", "hooks", "typos", "settings", "configuration"], "readOnly": false, "type": "string"}, "pre-commit.hooks.typos.settings.diff": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Print a diff of what would change.", "loc": ["pre-commit", "hooks", "typos", "settings", "diff"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.typos.settings.exclude": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Ignore files and directories matching the glob.", "example": "\"*.nix\"", "loc": ["pre-commit", "hooks", "typos", "settings", "exclude"], "readOnly": false, "type": "string"}, "pre-commit.hooks.typos.settings.format": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"long\"", "description": "Output format to use.", "loc": ["pre-commit", "hooks", "typos", "settings", "format"], "readOnly": false, "type": "one of \"silent\", \"brief\", \"long\", \"json\""}, "pre-commit.hooks.typos.settings.hidden": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Search hidden files and directories.", "loc": ["pre-commit", "hooks", "typos", "settings", "hidden"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.typos.settings.ignored-words": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "[ ]", "description": "Spellings and words to ignore.", "example": "[\n  \"MQTT\"\n  \"mosquitto\"\n]", "loc": ["pre-commit", "hooks", "typos", "settings", "ignored-words"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.typos.settings.locale": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"en\"", "description": "Which language to use for spell checking.", "loc": ["pre-commit", "hooks", "typos", "settings", "locale"], "readOnly": false, "type": "one of \"en\", \"en-us\", \"en-gb\", \"en-ca\", \"en-au\""}, "pre-commit.hooks.typos.settings.no-check-filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Skip verifying spelling in file names.", "loc": ["pre-commit", "hooks", "typos", "settings", "no-check-filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.typos.settings.no-check-files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Skip verifying spelling in files.", "loc": ["pre-commit", "hooks", "typos", "settings", "no-check-files"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.typos.settings.no-unicode": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Only allow ASCII characters in identifiers.", "loc": ["pre-commit", "hooks", "typos", "settings", "no-unicode"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.typos.settings.quiet": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Less output per occurrence.", "loc": ["pre-commit", "hooks", "typos", "settings", "quiet"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.typos.settings.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "More output per occurrence.", "loc": ["pre-commit", "hooks", "typos", "settings", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.typos.settings.write": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "false", "description": "Fix spelling in files by writing them. Cannot be used with `typos.settings.diff`.", "loc": ["pre-commit", "hooks", "typos", "settings", "write"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.typos.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "typos", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.typos.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "typos", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.typos.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "typos", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.typos.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "typos", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.vale": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "vale hook", "loc": ["pre-commit", "hooks", "vale"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.vale.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "vale", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.vale.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "vale", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.vale.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "vale", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.vale.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "vale", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.vale.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "vale", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.vale.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "vale", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.vale.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "vale", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.vale.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "vale", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.vale.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "vale", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.vale.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "vale", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.vale.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "vale", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.vale.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "vale", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.vale.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "vale", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.vale.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "vale", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.vale.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "vale", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.vale.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "vale", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.vale.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "vale", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.vale.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "vale", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.vale.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "vale", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.vale.settings.configPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Path to the config file.", "loc": ["pre-commit", "hooks", "vale", "settings", "configPath"], "readOnly": false, "type": "string"}, "pre-commit.hooks.vale.settings.configuration": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Multiline-string configuration passed as config file.", "example": "''\n  MinAlertLevel = suggestion\n  [*]\n  BasedOnStyles = Vale\n''", "loc": ["pre-commit", "hooks", "vale", "settings", "configuration"], "readOnly": false, "type": "string"}, "pre-commit.hooks.vale.settings.flags": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Flags passed to vale.", "loc": ["pre-commit", "hooks", "vale", "settings", "flags"], "readOnly": false, "type": "string"}, "pre-commit.hooks.vale.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "vale", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.vale.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "vale", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.vale.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "vale", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.vale.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "vale", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.yamlfmt": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "yamlfmt hook", "loc": ["pre-commit", "hooks", "yamlfmt"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.yamlfmt.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "yamlfmt", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.yamlfmt.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "yamlfmt", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.yamlfmt.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "yamlfmt", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.yamlfmt.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "yamlfmt", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.yamlfmt.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "yamlfmt", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.yamlfmt.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "yamlfmt", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.yamlfmt.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "yamlfmt", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.yamlfmt.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "yamlfmt", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.yamlfmt.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "yamlfmt", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.yamlfmt.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "yamlfmt", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.yamlfmt.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "yamlfmt", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.yamlfmt.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "yamlfmt", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.yamlfmt.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "yamlfmt", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.yamlfmt.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "yamlfmt", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.yamlfmt.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "yamlfmt", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.yamlfmt.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "yamlfmt", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.yamlfmt.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "yamlfmt", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.yamlfmt.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "yamlfmt", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.yamlfmt.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "yamlfmt", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.yamlfmt.settings.configPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Path to a custom configuration file.", "example": "\".yamlfmt\"", "loc": ["pre-commit", "hooks", "yamlfmt", "settings", "configPath"], "readOnly": false, "type": "string"}, "pre-commit.hooks.yamlfmt.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "yamlfmt", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.yamlfmt.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "yamlfmt", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.yamlfmt.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "yamlfmt", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.yamlfmt.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "yamlfmt", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.yamllint": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "description": "yamllint hook", "loc": ["pre-commit", "hooks", "yamllint"], "readOnly": false, "type": "submodule"}, "pre-commit.hooks.yamllint.after": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run before this hook.\n", "loc": ["pre-commit", "hooks", "yamllint", "after"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.yamllint.always_run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will run even if there are no matching files.\n", "loc": ["pre-commit", "hooks", "yamllint", "always_run"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.yamllint.args": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of additional parameters to pass to the hook.\n", "loc": ["pre-commit", "hooks", "yamllint", "args"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.yamllint.before": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of hooks that should run after this hook.\n", "loc": ["pre-commit", "hooks", "yamllint", "before"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.yamllint.description": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "Description of the hook. Used for metadata purposes only.\n", "loc": ["pre-commit", "hooks", "yamllint", "description"], "readOnly": false, "type": "string"}, "pre-commit.hooks.yamllint.enable": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "Whether to enable this pre-commit hook.", "loc": ["pre-commit", "hooks", "yamllint", "enable"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.yamllint.entry": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "The entry point - the executable to run. {option}`entry` can also contain arguments that will not be overridden, such as `entry = \"autopep8 -i\";`.\n", "loc": ["pre-commit", "hooks", "yamllint", "entry"], "readOnly": false, "type": "string"}, "pre-commit.hooks.yamllint.exclude_types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to exclude. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "yamllint", "exclude_types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.yamllint.excludes": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Exclude files that were matched by these patterns.\n", "loc": ["pre-commit", "hooks", "yamllint", "excludes"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.yamllint.extraPackages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "Additional packages required to run the hook.\n\nThese are propagated to `enabledPackages` for constructing developer\nenvironments.\n", "loc": ["pre-commit", "hooks", "yamllint", "extraPackages"], "readOnly": false, "type": "list of package"}, "pre-commit.hooks.yamllint.fail_fast": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true pre-commit will stop running hooks if this hook fails.\n", "loc": ["pre-commit", "hooks", "yamllint", "fail_fast"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.yamllint.files": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"\"", "description": "The pattern of files to run on.\n", "loc": ["pre-commit", "hooks", "yamllint", "files"], "readOnly": false, "type": "string"}, "pre-commit.hooks.yamllint.id": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"the attribute name the hook submodule is bound to\"", "description": "The unique identifier for the hook.\n\nYou do not need to set or modify this value.\n\nThe `id` is used to reference a hook when using `pre-commit run <id>`.\nIt can also be used to reference the hook in other hooks' `before` and `after` fields to define the order in which hooks run.\n\nThe `id` is set to the attribute name the hook submodule is bound to in the parent module.\nFor example, the `id` of following hook would be `my-hook`.\n\n```nix\n{\n  hooks = {\n    my-hook = {\n      enable = true;\n      entry = \"my-hook\";\n    };\n  }\n}\n```\n", "loc": ["pre-commit", "hooks", "yamllint", "id"], "readOnly": false, "type": "string"}, "pre-commit.hooks.yamllint.language": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "\"system\"", "description": "The language of the hook - tells pre-commit how to install the hook.\n", "loc": ["pre-commit", "hooks", "yamllint", "language"], "readOnly": false, "type": "string"}, "pre-commit.hooks.yamllint.name": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "the attribute name the hook submodule is bound to, same as `id`", "description": "The name of the hook. Shown during hook execution.\n", "loc": ["pre-commit", "hooks", "yamllint", "name"], "readOnly": false, "type": "string"}, "pre-commit.hooks.yamllint.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "null", "description": "An optional package that provides the hook.\n", "loc": ["pre-commit", "hooks", "yamllint", "package"], "readOnly": false, "type": "null or package"}, "pre-commit.hooks.yamllint.pass_filenames": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "true", "description": "Whether to pass filenames as arguments to the entry point.\n", "loc": ["pre-commit", "hooks", "yamllint", "pass_filenames"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.yamllint.raw": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "description": "Raw fields of a pre-commit hook. This is mostly for internal use but\nexposed in case you need to work around something.\n\nDefault: taken from the other hook options.\n", "loc": ["pre-commit", "hooks", "yamllint", "raw"], "readOnly": false, "type": "attribute set of unspecified value"}, "pre-commit.hooks.yamllint.require_serial": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "if true this hook will execute using a single process instead of in parallel.\n", "loc": ["pre-commit", "hooks", "yamllint", "require_serial"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.yamllint.settings.configData": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Serialized YAML object describing the configuration.", "example": "\"{extends: relaxed, rules: {line-length: {max: 120}}}\"", "loc": ["pre-commit", "hooks", "yamllint", "settings", "configData"], "readOnly": false, "type": "string"}, "pre-commit.hooks.yamllint.settings.configPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Path to a custom configuration file.", "loc": ["pre-commit", "hooks", "yamllint", "settings", "configPath"], "readOnly": false, "type": "string"}, "pre-commit.hooks.yamllint.settings.configuration": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"\"", "description": "Multiline-string configuration passed as config file. If set, configuration file set in `yamllint.settings.configPath` gets ignored.", "example": "''\n  ---\n  \n  extends: relaxed\n  \n  rules:\n    indentation: enable\n''", "loc": ["pre-commit", "hooks", "yamllint", "settings", "configuration"], "readOnly": false, "type": "string"}, "pre-commit.hooks.yamllint.settings.format": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"auto\"", "description": "Format for parsing output.", "loc": ["pre-commit", "hooks", "yamllint", "settings", "format"], "readOnly": false, "type": "one of \"parsable\", \"standard\", \"colored\", \"github\", \"auto\""}, "pre-commit.hooks.yamllint.settings.preset": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "\"default\"", "description": "The configuration preset to use.", "loc": ["pre-commit", "hooks", "yamllint", "settings", "preset"], "readOnly": false, "type": "one of \"default\", \"relaxed\""}, "pre-commit.hooks.yamllint.settings.strict": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "true", "description": "Return non-zero exit code on warnings as well as errors.", "loc": ["pre-commit", "hooks", "yamllint", "settings", "strict"], "readOnly": false, "type": "boolean"}, "pre-commit.hooks.yamllint.stages": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "default_stages", "description": "Confines the hook to run at a particular stage.\n", "loc": ["pre-commit", "hooks", "yamllint", "stages"], "readOnly": false, "type": "list of (one of \"commit-msg\", \"post-checkout\", \"post-commit\", \"post-merge\", \"post-rewrite\", \"pre-commit\", \"pre-merge-commit\", \"pre-push\", \"pre-rebase\", \"prepare-commit-msg\", \"manual\", \"commit\", \"push\", \"merge-commit\")"}, "pre-commit.hooks.yamllint.types": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[\n  \"file\"\n]", "description": "List of file types to run on. See [Filtering files with types](https://pre-commit.com/#filtering-files-with-types).\n", "loc": ["pre-commit", "hooks", "yamllint", "types"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.yamllint.types_or": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "[ ]", "description": "List of file types to run on, where only a single type needs to match.\n", "loc": ["pre-commit", "hooks", "yamllint", "types_or"], "readOnly": false, "type": "list of string"}, "pre-commit.hooks.yamllint.verbose": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hook.nix"], "default": "false", "description": "forces the output of the hook to be printed even when the hook passes.\n", "loc": ["pre-commit", "hooks", "yamllint", "verbose"], "readOnly": false, "type": "boolean"}, "pre-commit.installationScript": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/pre-commit.nix"], "description": "A bash snippet that installs nix-pre-commit-hooks in the current directory\n", "loc": ["pre-commit", "installationScript"], "readOnly": true, "type": "string"}, "pre-commit.package": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/pre-commit.nix"], "default": "pkgs.pre-commit\n", "description": "The `pre-commit` package to use.\n", "loc": ["pre-commit", "package"], "readOnly": false, "type": "package"}, "pre-commit.rootSrc": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/pre-commit.nix"], "default": "gitignoreSource config.src", "description": "The source of the project to be checked.\n\nThis is used in the derivation that performs the check.\n\nIf you use the `flakeModule`, the default is `self.outPath`; the whole flake\nsources.\n", "loc": ["pre-commit", "rootSrc"], "readOnly": false, "type": "path"}, "pre-commit.run": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/pre-commit.nix"], "default": "<derivation>", "description": "A derivation that tests whether the pre-commit hooks run cleanly on\nthe entire project.\n", "loc": ["pre-commit", "run"], "readOnly": true, "type": "package"}, "pre-commit.settings.rust.cargoManifestPath": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "null", "description": "Path to Cargo.toml", "loc": ["pre-commit", "settings", "rust", "cargoManifestPath"], "readOnly": false, "type": "null or string"}, "pre-commit.settings.rust.check.cargoDeps": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/hooks.nix"], "default": "null", "description": "Cargo dependencies needed to run the checks.", "example": "\"pkgs.rustPlatform.importCargoLock { lockFile = ./Cargo.lock; }\"", "loc": ["pre-commit", "settings", "rust", "check", "cargoDeps"], "readOnly": false, "type": "null or (attribute set)"}, "pre-commit.src": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/pre-commit.nix"], "description": "Root of the project. By default this will be filtered with the `gitignoreSource`\nfunction later, unless `rootSrc` is specified.\n\nIf you use the `flakeModule`, the default is `self.outPath`; the whole flake\nsources.\n", "loc": ["pre-commit", "src"], "readOnly": false, "type": "path"}, "pre-commit.tools": {"declarations": ["/nix/store/f0w1yr1i0i3gzn78758bn1mnwi462425-source/modules/pre-commit.nix"], "default": "git-hooks.nix-pkgs.callPackage tools-dot-nix { inherit (pkgs) system; }", "description": "Tool set from which `nix-pre-commit-hooks` will pick binaries.\n\n`nix-pre-commit-hooks` comes with its own set of packages for this purpose.\n", "loc": ["pre-commit", "tools"], "readOnly": false, "type": "lazy attribute set of (null or package)"}, "process.manager.after": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/processes.nix"], "default": "\"\"", "description": "Bash code to execute after stopping processes.", "loc": ["process", "manager", "after"], "readOnly": false, "type": "strings concatenated with \"\\n\""}, "process.manager.args": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/processes.nix"], "description": "Additional arguments to pass to the process manager.\n", "loc": ["process", "manager", "args"], "readOnly": false, "type": "attribute set"}, "process.manager.before": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/processes.nix"], "default": "\"\"", "description": "Bash code to execute before starting processes.", "loc": ["process", "manager", "before"], "readOnly": false, "type": "strings concatenated with \"\\n\""}, "process.manager.implementation": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/processes.nix"], "default": "\"process-compose\"", "description": "The process manager to use when running processes with ``devenv up``.", "example": "\"overmind\"", "loc": ["process", "manager", "implementation"], "readOnly": false, "type": "one of \"hivemind\", \"honcho\", \"overmind\", \"process-compose\""}, "process.managers.hivemind.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/process-managers/hivemind.nix"], "default": "pkgs.hivemind", "description": "The hivemind package to use.", "loc": ["process", "managers", "hivemind", "package"], "readOnly": false, "type": "package"}, "process.managers.honcho.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/process-managers/honcho.nix"], "default": "pkgs.honcho", "description": "The honcho package to use.", "loc": ["process", "managers", "honcho", "package"], "readOnly": false, "type": "package"}, "process.managers.overmind.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/process-managers/overmind.nix"], "default": "pkgs.overmind", "description": "The overmind package to use.", "loc": ["process", "managers", "overmind", "package"], "readOnly": false, "type": "package"}, "process.managers.process-compose.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/process-managers/process-compose.nix"], "default": "pkgs.process-compose", "description": "The process-compose package to use.", "loc": ["process", "managers", "process-compose", "package"], "readOnly": false, "type": "package"}, "process.managers.process-compose.port": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/process-managers/process-compose.nix"], "default": "8080", "description": "The port to bind the process-compose server to.\n\nNot used when `unixSocket.enable` is true.\n", "loc": ["process", "managers", "process-compose", "port"], "readOnly": false, "type": "signed integer"}, "process.managers.process-compose.settings": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/process-managers/process-compose.nix"], "default": "{ }", "description": "Top-level process-compose.yaml options\n\nExample: https://github.com/F1bonacc1/process-compose/blob/main/process-compose.yaml`\n", "example": "{\n  availability = {\n    backoff_seconds = 2;\n    max_restarts = 5;\n    restart = \"on_failure\";\n  };\n  depends_on = {\n    some-other-process = {\n      condition = \"process_completed_successfully\";\n    };\n  };\n  environment = [\n    \"ENVVAR_FOR_THIS_PROCESS_ONLY=foobar\"\n  ];\n}", "loc": ["process", "managers", "process-compose", "settings"], "readOnly": false, "type": "YAML value"}, "process.managers.process-compose.tui.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/process-managers/process-compose.nix"], "default": "true", "description": "Enable the TUI (Terminal User Interface)", "loc": ["process", "managers", "process-compose", "tui", "enable"], "readOnly": false, "type": "boolean"}, "process.managers.process-compose.unixSocket.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/process-managers/process-compose.nix"], "default": "true", "description": "Whether to enable running the process-compose server over unix domain sockets instead of tcp.", "example": "true", "loc": ["process", "managers", "process-compose", "unixSocket", "enable"], "readOnly": false, "type": "boolean"}, "process.managers.process-compose.unixSocket.path": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/process-managers/process-compose.nix"], "default": "${config.devenv.runtime}/pc.sock", "description": "Override the path to the unix socket.", "loc": ["process", "managers", "process-compose", "unixSocket", "path"], "readOnly": false, "type": "string"}, "processes": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/processes.nix"], "default": "{ }", "description": "Processes can be started with ``devenv up`` and run in the foreground.", "loc": ["processes"], "readOnly": false, "type": "attribute set of (submodule)"}, "processes.<name>.exec": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/processes.nix"], "description": "Bash code to run the process.", "loc": ["processes", "<name>", "exec"], "readOnly": false, "type": "string"}, "processes.<name>.process-compose": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/processes.nix"], "default": "{ }", "description": "process-compose.yaml specific process attributes.\n\nExample: https://github.com/F1bonacc1/process-compose/blob/main/process-compose.yaml`\n\nOnly used when using ``process.manager.implementation = \"process-compose\";``\n", "example": "{\n  availability = {\n    backoff_seconds = 2;\n    max_restarts = 5;\n    restart = \"on_failure\";\n  };\n  depends_on = {\n    some-other-process = {\n      condition = \"process_completed_successfully\";\n    };\n  };\n  environment = [\n    \"ENVVAR_FOR_THIS_PROCESS_ONLY=foobar\"\n  ];\n}", "loc": ["processes", "<name>", "process-compose"], "readOnly": false, "type": "attribute set"}, "scripts": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/scripts.nix"], "default": "{ }", "description": "A set of scripts available when the environment is active.", "loc": ["scripts"], "readOnly": false, "type": "attribute set of (submodule)"}, "scripts.<name>.binary": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/scripts.nix"], "default": "\"bash\"", "description": "Override the binary name if it doesn't match package name", "loc": ["scripts", "<name>", "binary"], "readOnly": false, "type": "string"}, "scripts.<name>.description": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/scripts.nix"], "default": "\"\"", "description": "Description of the script.", "loc": ["scripts", "<name>", "description"], "readOnly": false, "type": "string"}, "scripts.<name>.exec": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/scripts.nix"], "description": "Shell code to execute when the script is run.", "loc": ["scripts", "<name>", "exec"], "readOnly": false, "type": "string"}, "scripts.<name>.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/scripts.nix"], "default": "<derivation bash-5.2p37>", "description": "The package to use to run the script.", "loc": ["scripts", "<name>", "package"], "readOnly": false, "type": "package"}, "services.adminer.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/adminer.nix"], "default": "false", "description": "Whether to enable Adminer process.", "example": "true", "loc": ["services", "adminer", "enable"], "readOnly": false, "type": "boolean"}, "services.adminer.listen": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/adminer.nix"], "default": "\"127.0.0.1:8080\"", "description": "Listen address for the Adminer.", "loc": ["services", "adminer", "listen"], "readOnly": false, "type": "string"}, "services.adminer.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/adminer.nix"], "default": "pkgs.adminer", "description": "Which package of Adminer to use.", "loc": ["services", "adminer", "package"], "readOnly": false, "type": "package"}, "services.blackfire.client-id": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/blackfire.nix"], "default": "\"\"", "description": "Sets the client id used to authenticate with Blackfire.\nYou can find your personal client-id at <https://blackfire.io/my/settings/credentials>.\n", "loc": ["services", "blackfire", "client-id"], "readOnly": false, "type": "string"}, "services.blackfire.client-token": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/blackfire.nix"], "default": "\"\"", "description": "Sets the client token used to authenticate with Blackfire.\nYou can find your personal client-token at <https://blackfire.io/my/settings/credentials>.\n", "loc": ["services", "blackfire", "client-token"], "readOnly": false, "type": "string"}, "services.blackfire.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/blackfire.nix"], "default": "false", "description": "Whether to enable Blackfire profiler agent\n\nIt automatically installs Blackfire PHP extension.\n.", "example": "true", "loc": ["services", "blackfire", "enable"], "readOnly": false, "type": "boolean"}, "services.blackfire.enableApm": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/blackfire.nix"], "default": "false", "description": "Whether to enable Enables application performance monitoring, requires special subscription.\n.", "example": "true", "loc": ["services", "blackfire", "enableApm"], "readOnly": false, "type": "boolean"}, "services.blackfire.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/blackfire.nix"], "default": "pkgs.blackfire", "description": "Which package of blackfire to use", "loc": ["services", "blackfire", "package"], "readOnly": false, "type": "package"}, "services.blackfire.server-id": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/blackfire.nix"], "default": "\"\"", "description": "Sets the server id used to authenticate with Blackfire.\nYou can find your personal server-id at <https://blackfire.io/my/settings/credentials>.\n", "loc": ["services", "blackfire", "server-id"], "readOnly": false, "type": "string"}, "services.blackfire.server-token": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/blackfire.nix"], "default": "\"\"", "description": "Sets the server token used to authenticate with Blackfire.\nYou can find your personal server-token at <https://blackfire.io/my/settings/credentials>.\n", "loc": ["services", "blackfire", "server-token"], "readOnly": false, "type": "string"}, "services.blackfire.socket": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/blackfire.nix"], "default": "\"tcp://127.0.0.1:8307\"", "description": "Sets the server socket path\n", "loc": ["services", "blackfire", "socket"], "readOnly": false, "type": "string"}, "services.caddy.adapter": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/caddy.nix"], "default": "\"caddyfile\"", "description": "Name of the config adapter to use.\nSee <https://caddyserver.com/docs/config-adapters> for the full list.\n", "example": "\"nginx\"", "loc": ["services", "caddy", "adapter"], "readOnly": false, "type": "string"}, "services.caddy.ca": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/caddy.nix"], "default": "\"https://acme-v02.api.letsencrypt.org/directory\"", "description": "Certificate authority ACME server. The default (Let's Encrypt\nproduction server) should be fine for most people. Set it to null if\nyou don't want to include any authority (or if you want to write a more\nfine-graned configuration manually).\n", "example": "\"https://acme-staging-v02.api.letsencrypt.org/directory\"", "loc": ["services", "caddy", "ca"], "readOnly": false, "type": "null or string"}, "services.caddy.config": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/caddy.nix"], "default": "\"\"", "description": "Verbatim Caddyfile to use.\n\nRefer to [https://caddyserver.com/docs/caddyfile](https://caddyserver.com/docs/caddyfile)\nfor more information.\n\nCaddy v2 supports multiple config formats via adapters (see [`services.caddy.adapter`](#servicescaddyconfig)).\n", "example": "''\n  # Global options block\n  {\n    debug\n  }\n  \n  # Site block\n  example.com {\n    encode gzip\n    log\n    root /srv/http\n  }\n''", "loc": ["services", "caddy", "config"], "readOnly": false, "type": "strings concatenated with \"\\n\""}, "services.caddy.dataDir": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/caddy.nix"], "default": "\"${config.env.DEVENV_STATE}/caddy\"", "description": "The data directory, for storing certificates. Before 17.09, this\nwould create a .caddy directory. With 17.09 the contents of the\n.caddy directory are in the specified data directory instead.\nCaddy v2 replaced CADDYPATH with XDG directories.\nSee <https://caddyserver.com/docs/conventions#file-locations>.\n", "loc": ["services", "caddy", "dataDir"], "readOnly": false, "type": "path"}, "services.caddy.email": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/caddy.nix"], "default": "\"\"", "description": "Email address (for Let's Encrypt certificate).", "loc": ["services", "caddy", "email"], "readOnly": false, "type": "string"}, "services.caddy.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/caddy.nix"], "default": "false", "description": "Whether to enable Caddy web server.", "example": "true", "loc": ["services", "caddy", "enable"], "readOnly": false, "type": "boolean"}, "services.caddy.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/caddy.nix"], "default": "pkgs.caddy", "description": "Caddy package to use.\n", "loc": ["services", "caddy", "package"], "readOnly": false, "type": "package"}, "services.caddy.resume": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/caddy.nix"], "default": "false", "description": "Use saved config, if any (and prefer over configuration passed with [`caddy.config`](#servicescaddyconfig)).\n", "loc": ["services", "caddy", "resume"], "readOnly": false, "type": "boolean"}, "services.caddy.virtualHosts": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/caddy.nix"], "default": "{ }", "description": "Declarative vhost config.", "example": "{\n  \"hydra.example.com\" = {\n    serverAliases = [ \"www.hydra.example.com\" ];\n    extraConfig = ''''\n      encode gzip\n      log\n      root /srv/http\n    '''';\n  };\n};\n", "loc": ["services", "caddy", "virtualHosts"], "readOnly": false, "type": "attribute set of (submodule)"}, "services.caddy.virtualHosts.<name>.extraConfig": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/caddy.nix"], "default": "\"\"", "description": "These lines go into the vhost verbatim.\n", "loc": ["services", "caddy", "virtualHosts", "<name>", "extraConfig"], "readOnly": false, "type": "strings concatenated with \"\\n\""}, "services.caddy.virtualHosts.<name>.serverAliases": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/caddy.nix"], "default": "[ ]", "description": "Additional names of virtual hosts served by this virtual host configuration.\n", "example": "[\n  \"www.example.org\"\n  \"example.org\"\n]", "loc": ["services", "caddy", "virtualHosts", "<name>", "serverAliases"], "readOnly": false, "type": "list of string"}, "services.cassandra.allowClients": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/cassandra.nix"], "default": "true", "description": "Enables or disables the native transport server (CQL binary protocol)\n", "loc": ["services", "cassandra", "allowClients"], "readOnly": false, "type": "boolean"}, "services.cassandra.clusterName": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/cassandra.nix"], "default": "\"Test Cluster\"", "description": "The name of the cluster", "loc": ["services", "cassandra", "clusterName"], "readOnly": false, "type": "string"}, "services.cassandra.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/cassandra.nix"], "default": "false", "description": "Whether to enable Add Cassandra process script..", "example": "true", "loc": ["services", "cassandra", "enable"], "readOnly": false, "type": "boolean"}, "services.cassandra.extraConfig": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/cassandra.nix"], "default": "{ }", "description": "Extra options to be merged into `cassandra.yaml` as nix attribute set.\n", "example": "{\n  commitlog_sync_batch_window_in_ms = 3;\n}", "loc": ["services", "cassandra", "extraConfig"], "readOnly": false, "type": "attribute set"}, "services.cassandra.jvmOpts": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/cassandra.nix"], "default": "[ ]", "description": "Options to pass to the JVM through the JVM_OPTS environment variable", "loc": ["services", "cassandra", "jvmOpts"], "readOnly": false, "type": "list of string"}, "services.cassandra.listenAddress": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/cassandra.nix"], "default": "\"127.0.0.1\"", "description": "Listen address", "example": "\"127.0.0.1\"", "loc": ["services", "cassandra", "listenAddress"], "readOnly": false, "type": "string"}, "services.cassandra.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/cassandra.nix"], "default": "pkgs.cassandra_4", "description": "Which version of Cassandra to use", "example": "pkgs.cassandra_4;", "loc": ["services", "cassandra", "package"], "readOnly": false, "type": "package"}, "services.cassandra.seedAddresses": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/cassandra.nix"], "default": "[\n  \"127.0.0.1\"\n]", "description": "The addresses of hosts designated as contact points of the cluster", "loc": ["services", "cassandra", "seedAddresses"], "readOnly": false, "type": "list of string"}, "services.clickhouse.config": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/clickhouse.nix"], "description": "ClickHouse configuration in YAML.", "loc": ["services", "clickhouse", "config"], "readOnly": false, "type": "strings concatenated with \"\\n\""}, "services.clickhouse.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/clickhouse.nix"], "default": "false", "description": "Whether to enable clickhouse-server.", "example": "true", "loc": ["services", "clickhouse", "enable"], "readOnly": false, "type": "boolean"}, "services.clickhouse.httpPort": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/clickhouse.nix"], "default": "8123", "description": "Which http port to run clickhouse on", "loc": ["services", "clickhouse", "httpPort"], "readOnly": false, "type": "signed integer"}, "services.clickhouse.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/clickhouse.nix"], "default": "pkgs.clickhouse", "description": "Which package of clickhouse to use", "loc": ["services", "clickhouse", "package"], "readOnly": false, "type": "package"}, "services.clickhouse.port": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/clickhouse.nix"], "default": "9000", "description": "Which port to run clickhouse on", "loc": ["services", "clickhouse", "port"], "readOnly": false, "type": "signed integer"}, "services.cockroachdb.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/cockroachdb.nix"], "default": "false", "description": "Whether to enable Add CockroachDB process.\n.", "example": "true", "loc": ["services", "cockroachdb", "enable"], "readOnly": false, "type": "boolean"}, "services.cockroachdb.http_addr": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/cockroachdb.nix"], "default": "\"localhost:8080\"", "description": "The hostname or IP address to bind to for HTTP requests.\n", "loc": ["services", "cockroachdb", "http_addr"], "readOnly": false, "type": "string"}, "services.cockroachdb.listen_addr": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/cockroachdb.nix"], "default": "\"localhost:26257\"", "description": "The address/hostname and port to listen on.\n", "loc": ["services", "cockroachdb", "listen_addr"], "readOnly": false, "type": "string"}, "services.cockroachdb.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/cockroachdb.nix"], "default": "pkgs.cockroachdb-bin", "description": "The CockroachDB package to use.", "loc": ["services", "cockroachdb", "package"], "readOnly": false, "type": "unspecified value"}, "services.couchdb.baseDir": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/couchdb.nix"], "default": "config.env.DEVENV_STATE + \"/couchdb\"", "description": "The directory where CouchDB will store its data.\n", "loc": ["services", "couchdb", "baseDir"], "readOnly": true, "type": "string"}, "services.couchdb.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/couchdb.nix"], "default": "false", "description": "Whether to enable CouchDB process.", "example": "true", "loc": ["services", "couchdb", "enable"], "readOnly": false, "type": "boolean"}, "services.couchdb.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/couchdb.nix"], "default": "pkgs.couchdb3", "description": "Which version of CouchDB to use", "loc": ["services", "couchdb", "package"], "readOnly": false, "type": "package"}, "services.couchdb.settings": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/couchdb.nix"], "default": "{ }", "description": "CouchDB configuration.\nto know more about all settings, look at:\n<link\n  xlink:href=\"https://docs.couchdb.org/en/stable/config/couchdb.html\"\n/>\n", "example": "{\n  couchdb = {\n    database_dir = baseDir;\n    single_node = true;\n    view_index_dir = baseDir;\n    uri_file = \"${config.services.couchdb.baseDir}/couchdb.uri\";\n  };\n  admins = {\n    \"admin_username\" = \"pass\";\n  };\n  chttpd = {\n    bind_address = \"127.0.0.1\";\n    port = 5984;\n  };\n}\n", "loc": ["services", "couchdb", "settings"], "readOnly": false, "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))"}, "services.couchdb.settings.chttpd.bind_address": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/couchdb.nix"], "default": "\"127.0.0.1\"", "description": "Defines the IP address by which CouchDB will be accessible.\n", "loc": ["services", "couchdb", "settings", "chttpd", "bind_address"], "readOnly": false, "type": "string"}, "services.couchdb.settings.chttpd.port": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/couchdb.nix"], "default": "5984", "description": "Defined the port number to listen.\n", "loc": ["services", "couchdb", "settings", "chttpd", "port"], "readOnly": false, "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)"}, "services.couchdb.settings.couchdb.database_dir": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/couchdb.nix"], "default": "config.env.DEVENV_STATE + \"/couchdb\"", "description": "Specifies location of CouchDB database files (*.couch named). This\nlocation should be writable and readable for the user the CouchDB\nservice runs as (couchdb by default).\n", "loc": ["services", "couchdb", "settings", "couchdb", "database_dir"], "readOnly": false, "type": "path"}, "services.couchdb.settings.couchdb.single_node": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/couchdb.nix"], "default": "true", "description": "When this configuration setting is set to true, automatically create\nthe system databases on startup. Must be set false for a clustered\nCouchDB installation.\n", "loc": ["services", "couchdb", "settings", "couchdb", "single_node"], "readOnly": false, "type": "boolean"}, "services.couchdb.settings.couchdb.uri_file": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/couchdb.nix"], "default": "config.env.DEVENV_STATE + \"/couchdb\"/couchdb.uri", "description": "This file contains the full URI that can be used to access this\ninstance of CouchDB. It is used to help discover the port CouchDB is\nrunning on (if it was set to 0 (e.g. automatically assigned any free\none). This file should be writable and readable for the user that\nruns the CouchDB service (couchdb by default).\n", "loc": ["services", "couchdb", "settings", "couchdb", "uri_file"], "readOnly": false, "type": "path"}, "services.couchdb.settings.couchdb.view_index_dir": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/couchdb.nix"], "default": "config.env.DEVENV_STATE + \"/couchdb\"", "description": "Specifies location of CouchDB view index files. This location should\nbe writable and readable for the user that runs the CouchDB service\n(couchdb by default).\n", "loc": ["services", "couchdb", "settings", "couchdb", "view_index_dir"], "readOnly": false, "type": "path"}, "services.dynamodb-local.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/dynamodb-local.nix"], "default": "false", "description": "Whether to enable DynamoDB Local.", "example": "true", "loc": ["services", "dynamodb-local", "enable"], "readOnly": false, "type": "boolean"}, "services.dynamodb-local.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/dynamodb-local.nix"], "default": "pkgs.dynamodb-local", "description": "Which package of DynamoDB to use.", "loc": ["services", "dynamodb-local", "package"], "readOnly": false, "type": "package"}, "services.dynamodb-local.port": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/dynamodb-local.nix"], "default": "8000", "description": "Listen address for the Dynamodb-local.", "loc": ["services", "dynamodb-local", "port"], "readOnly": false, "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)"}, "services.elasticmq.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/elasticmq.nix"], "default": "false", "description": "Whether to enable elasticmq-server.", "example": "true", "loc": ["services", "elasticmq", "enable"], "readOnly": false, "type": "boolean"}, "services.elasticmq.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/elasticmq.nix"], "default": "pkgs.elasticmq-server-bin", "description": "Which package of elasticmq-server-bin to use", "loc": ["services", "elasticmq", "package"], "readOnly": false, "type": "package"}, "services.elasticmq.settings": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/elasticmq.nix"], "default": "\"\"", "description": "Configuration for elasticmq-server", "loc": ["services", "elasticmq", "settings"], "readOnly": false, "type": "strings concatenated with \"\\n\""}, "services.elasticsearch.cluster_name": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/elasticsearch.nix"], "default": "\"elasticsearch\"", "description": "Elasticsearch name that identifies your cluster for auto-discovery.", "loc": ["services", "elasticsearch", "cluster_name"], "readOnly": false, "type": "string"}, "services.elasticsearch.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/elasticsearch.nix"], "default": "false", "description": "Whether to enable elasticsearch.", "loc": ["services", "elasticsearch", "enable"], "readOnly": false, "type": "boolean"}, "services.elasticsearch.extraCmdLineOptions": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/elasticsearch.nix"], "default": "[ ]", "description": "Extra command line options for the elasticsearch launcher.", "loc": ["services", "elasticsearch", "extraCmdLineOptions"], "readOnly": false, "type": "list of string"}, "services.elasticsearch.extraConf": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/elasticsearch.nix"], "default": "\"\"", "description": "Extra configuration for elasticsearch.", "example": "''\n  node.name: \"elasticsearch\"\n  node.master: true\n  node.data: false\n''", "loc": ["services", "elasticsearch", "extraConf"], "readOnly": false, "type": "string"}, "services.elasticsearch.extraJavaOptions": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/elasticsearch.nix"], "default": "[ ]", "description": "Extra command line options for Java.", "example": "[\n  \"-Djava.net.preferIPv4Stack=true\"\n]", "loc": ["services", "elasticsearch", "extraJavaOptions"], "readOnly": false, "type": "list of string"}, "services.elasticsearch.listenAddress": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/elasticsearch.nix"], "default": "\"127.0.0.1\"", "description": "Elasticsearch listen address.", "loc": ["services", "elasticsearch", "listenAddress"], "readOnly": false, "type": "string"}, "services.elasticsearch.logging": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/elasticsearch.nix"], "default": "''\n  logger.action.name = org.elasticsearch.action\n  logger.action.level = info\n  appender.console.type = Console\n  appender.console.name = console\n  appender.console.layout.type = PatternLayout\n  appender.console.layout.pattern = [%d{ISO8601}][%-5p][%-25c{1.}] %marker%m%n\n  rootLogger.level = info\n  rootLogger.appenderRef.console.ref = console\n''", "description": "Elasticsearch logging configuration.", "loc": ["services", "elasticsearch", "logging"], "readOnly": false, "type": "string"}, "services.elasticsearch.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/elasticsearch.nix"], "default": "pkgs.elasticsearch7", "description": "Elasticsearch package to use.", "loc": ["services", "elasticsearch", "package"], "readOnly": false, "type": "package"}, "services.elasticsearch.plugins": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/elasticsearch.nix"], "default": "[ ]", "description": "Extra elasticsearch plugins", "example": "[ pkgs.elasticsearchPlugins.discovery-ec2 ]", "loc": ["services", "elasticsearch", "plugins"], "readOnly": false, "type": "list of package"}, "services.elasticsearch.port": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/elasticsearch.nix"], "default": "9200", "description": "Elasticsearch port to listen for HTTP traffic.", "loc": ["services", "elasticsearch", "port"], "readOnly": false, "type": "signed integer"}, "services.elasticsearch.single_node": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/elasticsearch.nix"], "default": "true", "description": "Start a single-node cluster", "loc": ["services", "elasticsearch", "single_node"], "readOnly": false, "type": "boolean"}, "services.elasticsearch.tcp_port": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/elasticsearch.nix"], "default": "9300", "description": "Elasticsearch port for the node to node communication.", "loc": ["services", "elasticsearch", "tcp_port"], "readOnly": false, "type": "signed integer"}, "services.httpbin.bind": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/httpbin.nix"], "default": "[\n  \"127.0.0.1:8080\"\n]", "description": "Addresses for httpbin to listen on.", "loc": ["services", "httpbin", "bind"], "readOnly": false, "type": "list of string"}, "services.httpbin.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/httpbin.nix"], "default": "false", "description": "Whether to enable httpbin.", "example": "true", "loc": ["services", "httpbin", "enable"], "readOnly": false, "type": "boolean"}, "services.httpbin.extraArgs": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/httpbin.nix"], "default": "[ ]", "description": "Gunicorn CLI arguments for httpbin.", "loc": ["services", "httpbin", "extraArgs"], "readOnly": false, "type": "list of string"}, "services.influxdb.config": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/influxdb.nix"], "default": "\"\"", "description": "Configuration for InfluxDB-server", "loc": ["services", "influxdb", "config"], "readOnly": false, "type": "strings concatenated with \"\\n\""}, "services.influxdb.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/influxdb.nix"], "default": "false", "description": "Whether to enable influxdb.", "example": "true", "loc": ["services", "influxdb", "enable"], "readOnly": false, "type": "boolean"}, "services.influxdb.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/influxdb.nix"], "default": "pkgs.influxdb", "description": "An open-source distributed time series database", "loc": ["services", "influxdb", "package"], "readOnly": false, "type": "package"}, "services.kafka.configFiles.log4jProperties": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/kafka.nix"], "default": "\"pkgs.writeText \\\"log4j.properties\\\" cfg.log4jProperties\"", "description": "Kafka log4j property configuration file path", "loc": ["services", "kafka", "configFiles", "log4jProperties"], "readOnly": false, "type": "path"}, "services.kafka.configFiles.serverProperties": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/kafka.nix"], "description": "Kafka server.properties configuration file path.\nDefaults to the rendered `settings`.\n", "loc": ["services", "kafka", "configFiles", "serverProperties"], "readOnly": false, "type": "path"}, "services.kafka.connect.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/kafka-connect.nix"], "default": "false", "description": "Whether to enable Kafka Connect.", "example": "true", "loc": ["services", "kafka", "connect", "enable"], "readOnly": false, "type": "boolean"}, "services.kafka.connect.initialConnectors": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/kafka-connect.nix"], "default": "[ ]", "description": "List of Kafka Connect connectors to set up initially\n", "loc": ["services", "kafka", "connect", "initialConnectors"], "readOnly": false, "type": "list of (lazy attribute set of (null or boolean or signed integer or string or list of (boolean or signed integer or string)))"}, "services.kafka.connect.initialConnectors.*.config": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/kafka-connect.nix"], "description": "Initial configuration for the connector\n", "loc": ["services", "kafka", "connect", "initialConnectors", "*", "config"], "readOnly": false, "type": "attribute set"}, "services.kafka.connect.initialConnectors.*.name": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/kafka-connect.nix"], "description": "Name of the connector\n", "loc": ["services", "kafka", "connect", "initialConnectors", "*", "name"], "readOnly": false, "type": "string"}, "services.kafka.connect.settings": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/kafka-connect.nix"], "default": "{ }", "description": "{file}`connect-standalone.properties`.\n\nNote that .properties files contain mappings from string to string.\nKeys with dots are NOT represented by nested attrs in these settings,\nbut instead as quoted strings (ie. `settings.\"broker.id\"`, NOT\n`settings.broker.id`).\n", "loc": ["services", "kafka", "connect", "settings"], "readOnly": false, "type": "lazy attribute set of (null or boolean or signed integer or string or list of (boolean or signed integer or string))"}, "services.kafka.connect.settings.\"bootstrap.servers\"": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/kafka-connect.nix"], "default": "[\n  \"localhost:9092\"\n]", "description": "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster.\n", "loc": ["services", "kafka", "connect", "settings", "bootstrap.servers"], "readOnly": false, "type": "list of string"}, "services.kafka.connect.settings.\"key.converter\"": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/kafka-connect.nix"], "default": "\"org.apache.kafka.connect.json.JsonConverter\"", "description": "The key converter to use for the connector.\n", "loc": ["services", "kafka", "connect", "settings", "key.converter"], "readOnly": false, "type": "string"}, "services.kafka.connect.settings.\"key.converter.schemas.enable\"": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/kafka-connect.nix"], "default": "true", "description": "Whether the key converter should include schema information in the message.\n", "loc": ["services", "kafka", "connect", "settings", "key.converter.schemas.enable"], "readOnly": false, "type": "boolean"}, "services.kafka.connect.settings.\"offset.flush.interval.ms\"": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/kafka-connect.nix"], "default": "10000", "description": "Interval at which to try committing offsets for tasks\n", "loc": ["services", "kafka", "connect", "settings", "offset.flush.interval.ms"], "readOnly": false, "type": "signed integer"}, "services.kafka.connect.settings.\"offset.storage.file.filename\"": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/kafka-connect.nix"], "default": "\"/Users/rishi/sandbox/cachix/issues/android_test/.devenv/state/kafka/connect/connect.offsets\"", "description": "The file to store connector offsets in. By storing offsets on disk, a standalone process can be stopped and started on a single node and resume where it previously left off.\n", "loc": ["services", "kafka", "connect", "settings", "offset.storage.file.filename"], "readOnly": false, "type": "string"}, "services.kafka.connect.settings.\"plugin.path\"": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/kafka-connect.nix"], "default": "null", "description": "The list should consist of top level directories that include any combination of:\na) directories immediately containing jars with plugins and their dependencies\nb) uber-jars with plugins and their dependencies\nc) directories immediately containing the package directory structure of classes of plugins and their dependencies\nNote: symlinks will be followed to discover dependencies or plugins.\n", "loc": ["services", "kafka", "connect", "settings", "plugin.path"], "readOnly": false, "type": "null or (list of (string or path))"}, "services.kafka.connect.settings.\"value.converter\"": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/kafka-connect.nix"], "default": "\"org.apache.kafka.connect.json.JsonConverter\"", "description": "The value converter to use for the connector.\n", "loc": ["services", "kafka", "connect", "settings", "value.converter"], "readOnly": false, "type": "string"}, "services.kafka.connect.settings.\"value.converter.schemas.enable\"": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/kafka-connect.nix"], "default": "true", "description": "Whether the value converter should include schema information in the message.\n", "loc": ["services", "kafka", "connect", "settings", "value.converter.schemas.enable"], "readOnly": false, "type": "boolean"}, "services.kafka.connect.settings.listeners": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/kafka-connect.nix"], "default": "null", "description": "List of listeners for Kafka Connect\n(By default Kafka Connect listens on http://localhost:8083)\n", "example": "[\n  \"http://localhost:8080\"\n]", "loc": ["services", "kafka", "connect", "settings", "listeners"], "readOnly": false, "type": "null or (list of string)"}, "services.kafka.defaultMode": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/kafka.nix"], "default": "\"kraft\"", "description": "Which defaults to set for the mode Kafka should run in\n- `kraft` (default): Run Kafka in KRaft mode, Which requires no extra configuration.\n- `zookeeper`: Run Kafka in Zookeeper mode, this requires more configuration.\n", "loc": ["services", "kafka", "defaultMode"], "readOnly": false, "type": "one of \"zookeeper\", \"kraft\""}, "services.kafka.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/kafka.nix"], "default": "false", "description": "Whether to enable Apache Kafka.", "example": "true", "loc": ["services", "kafka", "enable"], "readOnly": false, "type": "boolean"}, "services.kafka.formatLogDirs": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/kafka.nix"], "default": "true", "description": "Whether to format log dirs in KRaft mode if all log dirs are\nunformatted, ie. they contain no meta.properties.\n", "loc": ["services", "kafka", "formatLogDirs"], "readOnly": false, "type": "boolean"}, "services.kafka.formatLogDirsIgnoreFormatted": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/kafka.nix"], "default": "true", "description": "Whether to ignore already formatted log dirs when formatting log dirs,\ninstead of failing. Useful when replacing or adding disks.\n", "loc": ["services", "kafka", "formatLogDirsIgnoreFormatted"], "readOnly": false, "type": "boolean"}, "services.kafka.jre": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/kafka.nix"], "default": "pkgs.apacheKafka.passthru.jre", "description": "The JRE with which to run Kafka", "loc": ["services", "kafka", "jre"], "readOnly": false, "type": "package"}, "services.kafka.jvmOptions": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/kafka.nix"], "default": "[ ]", "description": "Extra command line options for the JVM running Kafka.", "example": "[\n  \"-Djava.net.preferIPv4Stack=true\"\n  \"-Dcom.sun.management.jmxremote\"\n  \"-Dcom.sun.management.jmxremote.local.only=true\"\n]", "loc": ["services", "kafka", "jvmOptions"], "readOnly": false, "type": "list of string"}, "services.kafka.log4jProperties": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/kafka.nix"], "default": "''\n  log4j.rootLogger=INFO, stdout\n  \n  log4j.appender.stdout=org.apache.log4j.ConsoleAppender\n  log4j.appender.stdout.layout=org.apache.log4j.PatternLayout\n  log4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n\n''", "description": "Kafka log4j property configuration.", "loc": ["services", "kafka", "log4jProperties"], "readOnly": false, "type": "strings concatenated with \"\\n\""}, "services.kafka.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/kafka.nix"], "default": "pkgs.apacheKafka", "description": "The apacheKafka package to use.", "loc": ["services", "kafka", "package"], "readOnly": false, "type": "package"}, "services.kafka.settings": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/kafka.nix"], "default": "{ }", "description": "[Kafka broker configuration](https://kafka.apache.org/documentation.html#brokerconfigs)\n{file}`server.properties`.\n\nNote that .properties files contain mappings from string to string.\nKeys with dots are NOT represented by nested attrs in these settings,\nbut instead as quoted strings (ie. `settings.\"broker.id\"`, NOT\n`settings.broker.id`).\n", "loc": ["services", "kafka", "settings"], "readOnly": false, "type": "lazy attribute set of (null or boolean or signed integer or string or list of (boolean or signed integer or string))"}, "services.kafka.settings.\"broker.id\"": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/kafka.nix"], "default": "null", "description": "Broker ID. -1 or null to auto-allocate in zookeeper mode.", "loc": ["services", "kafka", "settings", "broker.id"], "readOnly": false, "type": "null or signed integer"}, "services.kafka.settings.\"log.dirs\"": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/kafka.nix"], "default": "[\n  \"/Users/rishi/sandbox/cachix/issues/android_test/.devenv/state/kafka/logs\"\n]", "description": "Log file directories.", "loc": ["services", "kafka", "settings", "log.dirs"], "readOnly": false, "type": "list of path"}, "services.kafka.settings.listeners": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/kafka.nix"], "default": "[\n  \"PLAINTEXT://localhost:9092\"\n]", "description": "Kafka Listener List.\nSee [listeners](https://kafka.apache.org/documentation/#brokerconfigs_listeners).\nIf you change this, you should also update the readiness probe.\n", "loc": ["services", "kafka", "settings", "listeners"], "readOnly": false, "type": "list of string"}, "services.mailhog.additionalArgs": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/mailhog.nix"], "default": "[ ]", "description": "Additional arguments passed to `mailhog`.\n", "example": "[\n  \"-invite-jim\"\n]", "loc": ["services", "mailhog", "additionalArgs"], "readOnly": false, "type": "list of strings concatenated with \"\\n\""}, "services.mailhog.apiListenAddress": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/mailhog.nix"], "default": "\"127.0.0.1:8025\"", "description": "Listen address for API.", "loc": ["services", "mailhog", "apiListenAddress"], "readOnly": false, "type": "string"}, "services.mailhog.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/mailhog.nix"], "default": "false", "description": "Whether to enable mailhog process.", "example": "true", "loc": ["services", "mailhog", "enable"], "readOnly": false, "type": "boolean"}, "services.mailhog.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/mailhog.nix"], "default": "pkgs.mailhog", "description": "Which package of mailhog to use", "loc": ["services", "mailhog", "package"], "readOnly": false, "type": "package"}, "services.mailhog.smtpListenAddress": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/mailhog.nix"], "default": "\"127.0.0.1:1025\"", "description": "Listen address for SMTP.", "loc": ["services", "mailhog", "smtpListenAddress"], "readOnly": false, "type": "string"}, "services.mailhog.uiListenAddress": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/mailhog.nix"], "default": "\"127.0.0.1:8025\"", "description": "Listen address for UI.", "loc": ["services", "mailhog", "uiListenAddress"], "readOnly": false, "type": "string"}, "services.mailpit.additionalArgs": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/mailpit.nix"], "default": "[ ]", "description": "Additional arguments passed to `mailpit`.\n", "example": "[\n  \"--max=500\"\n]", "loc": ["services", "mailpit", "additionalArgs"], "readOnly": false, "type": "list of strings concatenated with \"\\n\""}, "services.mailpit.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/mailpit.nix"], "default": "false", "description": "Whether to enable mailpit process.", "example": "true", "loc": ["services", "mailpit", "enable"], "readOnly": false, "type": "boolean"}, "services.mailpit.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/mailpit.nix"], "default": "pkgs.mailpit", "description": "Which package of mailpit to use", "loc": ["services", "mailpit", "package"], "readOnly": false, "type": "package"}, "services.mailpit.smtpListenAddress": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/mailpit.nix"], "default": "\"127.0.0.1:1025\"", "description": "Listen address for SMTP.", "loc": ["services", "mailpit", "smtpListenAddress"], "readOnly": false, "type": "string"}, "services.mailpit.uiListenAddress": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/mailpit.nix"], "default": "\"127.0.0.1:8025\"", "description": "Listen address for UI.", "loc": ["services", "mailpit", "uiListenAddress"], "readOnly": false, "type": "string"}, "services.meilisearch.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/meilisearch.nix"], "default": "false", "description": "Whether to enable Meilisearch.", "example": "true", "loc": ["services", "meilisearch", "enable"], "readOnly": false, "type": "boolean"}, "services.meilisearch.environment": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/meilisearch.nix"], "default": "\"development\"", "description": "Defines the running environment of Meilisearch.", "loc": ["services", "meilisearch", "environment"], "readOnly": false, "type": "one of \"development\", \"production\""}, "services.meilisearch.listenAddress": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/meilisearch.nix"], "default": "\"127.0.0.1\"", "description": "Meilisearch listen address.", "loc": ["services", "meilisearch", "listenAddress"], "readOnly": false, "type": "string"}, "services.meilisearch.listenPort": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/meilisearch.nix"], "default": "7700", "description": "Meilisearch port to listen on.", "loc": ["services", "meilisearch", "listenPort"], "readOnly": false, "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)"}, "services.meilisearch.logLevel": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/meilisearch.nix"], "default": "\"INFO\"", "description": "Defines how much detail should be present in Meilisearch's logs.\nMeilisearch currently supports four log levels, listed in order of increasing verbosity:\n- 'ERROR': only log unexpected events indicating Meilisearch is not functioning as expected\n- 'WARN:' log all unexpected events, regardless of their severity\n- 'INFO:' log all events. This is the default value\n- 'DEBUG': log all events and including detailed information on Meilisearch's internal processes.\n  Useful when diagnosing issues and debugging\n", "loc": ["services", "meilisearch", "logLevel"], "readOnly": false, "type": "string"}, "services.meilisearch.maxIndexSize": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/meilisearch.nix"], "default": "\"107374182400\"", "description": "Sets the maximum size of the index.\nValue must be given in bytes or explicitly stating a base unit.\nFor example, the default value can be written as 107374182400, '107.7Gb', or '107374 Mb'.\nDefault is 100 GiB\n", "loc": ["services", "meilisearch", "maxIndexSize"], "readOnly": false, "type": "string"}, "services.meilisearch.noAnalytics": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/meilisearch.nix"], "default": "true", "description": "Deactivates analytics.\nAnalytics allow Meilisearch to know how many users are using Meilisearch,\nwhich versions and which platforms are used.\nThis process is entirely anonymous.\n", "loc": ["services", "meilisearch", "noAnalytics"], "readOnly": false, "type": "boolean"}, "services.meilisearch.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/meilisearch.nix"], "default": "\"pkgs.meilisearch\"", "description": "Which Meilisearch package to use", "loc": ["services", "meilisearch", "package"], "readOnly": false, "type": "package"}, "services.memcached.bind": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/memcached.nix"], "default": "\"127.0.0.1\"", "description": "The IP interface to bind to.\n`null` means \"all interfaces\".\n", "example": "\"127.0.0.1\"", "loc": ["services", "memcached", "bind"], "readOnly": false, "type": "null or string"}, "services.memcached.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/memcached.nix"], "default": "false", "description": "Whether to enable memcached process.", "example": "true", "loc": ["services", "memcached", "enable"], "readOnly": false, "type": "boolean"}, "services.memcached.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/memcached.nix"], "default": "pkgs.memcached", "description": "Which package of memcached to use", "loc": ["services", "memcached", "package"], "readOnly": false, "type": "package"}, "services.memcached.port": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/memcached.nix"], "default": "11211", "description": "The TCP port to accept connections.\nIf port 0 is specified memcached will not listen on a TCP socket.\n", "loc": ["services", "memcached", "port"], "readOnly": false, "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)"}, "services.memcached.startArgs": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/memcached.nix"], "default": "[ ]", "description": "Additional arguments passed to `memcached` during startup.\n", "example": "[\n  \"--memory-limit=100M\"\n]", "loc": ["services", "memcached", "startArgs"], "readOnly": false, "type": "list of strings concatenated with \"\\n\""}, "services.minio.accessKey": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/minio.nix"], "default": "\"minioadmin\"", "description": "Access key of 5 to 20 characters in length that clients use to access the server.\n", "loc": ["services", "minio", "accessKey"], "readOnly": false, "type": "string"}, "services.minio.afterStart": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/minio.nix"], "default": "\"\"", "description": "Bash code to execute after minio is running.", "example": "''\n  mc anonymous set download local/mybucket\n''", "loc": ["services", "minio", "afterStart"], "readOnly": false, "type": "strings concatenated with \"\\n\""}, "services.minio.browser": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/minio.nix"], "default": "true", "description": "Enable or disable access to web UI.", "loc": ["services", "minio", "browser"], "readOnly": false, "type": "boolean"}, "services.minio.buckets": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/minio.nix"], "default": "[ ]", "description": "List of buckets to ensure exist on startup.\n", "loc": ["services", "minio", "buckets"], "readOnly": false, "type": "list of string"}, "services.minio.clientConfig": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/minio.nix"], "description": "Contents of the mc `config.json`, as a nix attribute set.\n\nBy default, `local` is configured to connect to the devenv minio service.\nUse `lib.mkForce null` to use your regular mc configuration from `$HOME/.mc` instead.\n", "loc": ["services", "minio", "clientConfig"], "readOnly": false, "type": "null or JSON value"}, "services.minio.clientPackage": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/minio.nix"], "default": "pkgs.minio-client", "description": "MinIO client package to use.", "loc": ["services", "minio", "clientPackage"], "readOnly": false, "type": "package"}, "services.minio.consoleAddress": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/minio.nix"], "default": "\"127.0.0.1:9001\"", "description": "IP address and port of the web UI (console).", "loc": ["services", "minio", "consoleAddress"], "readOnly": false, "type": "string"}, "services.minio.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/minio.nix"], "default": "false", "description": "Whether to enable MinIO Object Storage.", "example": "true", "loc": ["services", "minio", "enable"], "readOnly": false, "type": "boolean"}, "services.minio.listenAddress": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/minio.nix"], "default": "\"127.0.0.1:9000\"", "description": "IP address and port of the server.", "loc": ["services", "minio", "listenAddress"], "readOnly": false, "type": "string"}, "services.minio.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/minio.nix"], "default": "pkgs.minio", "description": "MinIO package to use.", "loc": ["services", "minio", "package"], "readOnly": false, "type": "package"}, "services.minio.region": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/minio.nix"], "default": "\"us-east-1\"", "description": "The physical location of the server. By default it is set to us-east-1, which is same as AWS S3's and MinIO's default region.\n", "loc": ["services", "minio", "region"], "readOnly": false, "type": "string"}, "services.minio.secretKey": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/minio.nix"], "default": "\"minioadmin\"", "description": "Specify the Secret key of 8 to 40 characters in length that clients use to access the server.\n", "loc": ["services", "minio", "secretKey"], "readOnly": false, "type": "string"}, "services.mongodb.additionalArgs": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/mongodb.nix"], "default": "[\n  \"--noauth\"\n]", "description": "Additional arguments passed to `mongod`.\n", "example": "[\n  \"--port\"\n  \"27017\"\n  \"--noauth\"\n]", "loc": ["services", "mongodb", "additionalArgs"], "readOnly": false, "type": "list of strings concatenated with \"\\n\""}, "services.mongodb.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/mongodb.nix"], "default": "false", "description": "Whether to enable MongoDB process and expose utilities.", "example": "true", "loc": ["services", "mongodb", "enable"], "readOnly": false, "type": "boolean"}, "services.mongodb.initDatabasePassword": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/mongodb.nix"], "default": "\"\"", "description": "This used in conjunction with initDatabaseUsername, create a new user and set that user's password. This user is created in the admin authentication database and given the role of root, which is a \"superuser\" role.\n", "example": "\"secret\"", "loc": ["services", "mongodb", "initDatabasePassword"], "readOnly": false, "type": "string"}, "services.mongodb.initDatabaseUsername": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/mongodb.nix"], "default": "\"\"", "description": "This used in conjunction with initDatabasePassword, create a new user and set that user's password. This user is created in the admin authentication database and given the role of root, which is a \"superuser\" role.\n", "example": "\"mongoadmin\"", "loc": ["services", "mongodb", "initDatabaseUsername"], "readOnly": false, "type": "string"}, "services.mongodb.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/mongodb.nix"], "default": "pkgs.mongodb-ce", "description": "Which MongoDB package to use.", "loc": ["services", "mongodb", "package"], "readOnly": false, "type": "package"}, "services.mysql.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/mysql.nix"], "default": "false", "description": "Whether to enable MySQL process and expose utilities.", "example": "true", "loc": ["services", "mysql", "enable"], "readOnly": false, "type": "boolean"}, "services.mysql.ensureUsers": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/mysql.nix"], "default": "[ ]", "description": "Ensures that the specified users exist and have at least the ensured permissions.\nThe MySQL users will be identified using Unix socket authentication. This authenticates the Unix user with the\nsame name only, and that without the need for a password.\nThis option will never delete existing users or remove permissions, especially not when the value of this\noption is changed. This means that users created and permissions assigned once through this option or\notherwise have to be removed manually.\n", "example": "[\n  {\n    name = \"devenv\";\n    ensurePermissions = {\n      \"devenv.*\" = \"ALL PRIVILEGES\";\n    };\n  }\n]\n", "loc": ["services", "mysql", "ensureUsers"], "readOnly": false, "type": "list of (submodule)"}, "services.mysql.ensureUsers.*.ensurePermissions": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/mysql.nix"], "default": "{ }", "description": "Permissions to ensure for the user, specified as attribute set.\nThe attribute names specify the database and tables to grant the permissions for,\nseparated by a dot. You may use wildcards here.\nThe attribute values specfiy the permissions to grant.\nYou may specify one or multiple comma-separated SQL privileges here.\nFor more information on how to specify the target\nand on which privileges exist, see the\n[GRANT syntax](https://mariadb.com/kb/en/library/grant/).\nThe attributes are used as `GRANT ${attrName} ON ${attrValue}`.\n", "example": "{\n  \"database.*\" = \"ALL PRIVILEGES\";\n  \"*.*\" = \"SELECT, LOCK TABLES\";\n}\n", "loc": ["services", "mysql", "ensureUsers", "*", "ensurePermissions"], "readOnly": false, "type": "attribute set of string"}, "services.mysql.ensureUsers.*.name": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/mysql.nix"], "description": "Name of the user to ensure.\n", "loc": ["services", "mysql", "ensureUsers", "*", "name"], "readOnly": false, "type": "string"}, "services.mysql.ensureUsers.*.password": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/mysql.nix"], "default": "null", "description": "Password of the user to ensure.\n", "loc": ["services", "mysql", "ensureUsers", "*", "password"], "readOnly": false, "type": "null or string"}, "services.mysql.importTimeZones": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/mysql.nix"], "default": "null", "description": "Whether to import tzdata on the first startup of the mysql server\n", "loc": ["services", "mysql", "importTimeZones"], "readOnly": false, "type": "null or boolean"}, "services.mysql.initialDatabases": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/mysql.nix"], "default": "[ ]", "description": "List of database names and their initial schemas that should be used to create databases on the first startup\nof MySQL. The schema attribute is optional: If not specified, an empty database is created.\n", "example": "[\n  { name = \"foodatabase\"; schema = ./foodatabase.sql; }\n  { name = \"bardatabase\"; }\n]\n", "loc": ["services", "mysql", "initialDatabases"], "readOnly": false, "type": "list of (submodule)"}, "services.mysql.initialDatabases.*.name": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/mysql.nix"], "description": "The name of the database to create.\n", "loc": ["services", "mysql", "initialDatabases", "*", "name"], "readOnly": false, "type": "string"}, "services.mysql.initialDatabases.*.schema": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/mysql.nix"], "default": "null", "description": "The initial schema of the database; if null (the default),\nan empty database is created.\n", "loc": ["services", "mysql", "initialDatabases", "*", "schema"], "readOnly": false, "type": "null or path"}, "services.mysql.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/mysql.nix"], "default": "pkgs.mariadb", "description": "Which package of MySQL to use", "loc": ["services", "mysql", "package"], "readOnly": false, "type": "package"}, "services.mysql.settings": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/mysql.nix"], "default": "{ }", "description": "MySQL configuration.\n", "example": "{\n  mysqld = {\n    key_buffer_size = \"6G\";\n    table_cache = 1600;\n    log-error = \"/var/log/mysql_err.log\";\n    plugin-load-add = [ \"server_audit\" \"ed25519=auth_ed25519\" ];\n  };\n  mysqldump = {\n    quick = true;\n    max_allowed_packet = \"16M\";\n  };\n}\n", "loc": ["services", "mysql", "settings"], "readOnly": false, "type": "lazy attribute set of lazy attribute set of anything"}, "services.mysql.useDefaultsExtraFile": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/mysql.nix"], "default": "false", "description": "Whether to use defaults-exta-file for the mysql command instead of defaults-file.\nThis is useful if you want to provide a config file on the command line.\nHowever this can problematic if you have MySQL installed globaly because its config might leak into your environment.\nThis option does not affect the mysqld command.\n", "loc": ["services", "mysql", "useDefaultsExtraFile"], "readOnly": false, "type": "boolean"}, "services.nginx.defaultMimeTypes": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/nginx.nix"], "default": "${pkgs.mailcap}/etc/nginx/mime.types", "description": "Default MIME types for NGINX, as MIME types definitions from NGINX are very incomplete,\nwe use by default the ones bundled in the mailcap package, used by most of the other\nLinux distributions.\n", "example": "${pkgs.nginx}/conf/mime.types", "loc": ["services", "nginx", "defaultMimeTypes"], "readOnly": false, "type": "path"}, "services.nginx.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/nginx.nix"], "default": "false", "description": "Whether to enable nginx.", "example": "true", "loc": ["services", "nginx", "enable"], "readOnly": false, "type": "boolean"}, "services.nginx.eventsConfig": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/nginx.nix"], "default": "\"\"", "description": "The nginx events configuration.", "loc": ["services", "nginx", "eventsConfig"], "readOnly": false, "type": "strings concatenated with \"\\n\""}, "services.nginx.httpConfig": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/nginx.nix"], "default": "\"\"", "description": "The nginx configuration.", "loc": ["services", "nginx", "httpConfig"], "readOnly": false, "type": "strings concatenated with \"\\n\""}, "services.nginx.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/nginx.nix"], "default": "pkgs.nginx", "description": "The nginx package to use.", "loc": ["services", "nginx", "package"], "readOnly": false, "type": "package"}, "services.opensearch.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/opensearch.nix"], "default": "false", "description": "Whether to enable OpenSearch.", "example": "true", "loc": ["services", "opensearch", "enable"], "readOnly": false, "type": "boolean"}, "services.opensearch.extraCmdLineOptions": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/opensearch.nix"], "default": "[ ]", "description": "Extra command line options for the OpenSearch launcher.", "loc": ["services", "opensearch", "extraCmdLineOptions"], "readOnly": false, "type": "list of string"}, "services.opensearch.extraJavaOptions": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/opensearch.nix"], "default": "[ ]", "description": "Extra command line options for Java.", "example": "[\n  \"-Djava.net.preferIPv4Stack=true\"\n]", "loc": ["services", "opensearch", "extraJavaOptions"], "readOnly": false, "type": "list of string"}, "services.opensearch.logging": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/opensearch.nix"], "default": "''\n  logger.action.name = org.opensearch.action\n  logger.action.level = info\n  appender.console.type = Console\n  appender.console.name = console\n  appender.console.layout.type = PatternLayout\n  appender.console.layout.pattern = [%d{ISO8601}][%-5p][%-25c{1.}] %marker%m%n\n  rootLogger.level = info\n  rootLogger.appenderRef.console.ref = console\n''", "description": "OpenSearch logging configuration.", "loc": ["services", "opensearch", "logging"], "readOnly": false, "type": "string"}, "services.opensearch.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/opensearch.nix"], "default": "pkgs.opensearch", "description": "The OpenSearch package to use.", "loc": ["services", "opensearch", "package"], "readOnly": false, "type": "package"}, "services.opensearch.settings": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/opensearch.nix"], "default": "{ }", "description": "OpenSearch configuration.\n", "loc": ["services", "opensearch", "settings"], "readOnly": false, "type": "YAML value"}, "services.opensearch.settings.\"cluster.name\"": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/opensearch.nix"], "default": "\"opensearch\"", "description": "The name of the cluster.\n", "loc": ["services", "opensearch", "settings", "cluster.name"], "readOnly": false, "type": "string"}, "services.opensearch.settings.\"discovery.type\"": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/opensearch.nix"], "default": "\"single-node\"", "description": "The type of discovery to use.\n", "loc": ["services", "opensearch", "settings", "discovery.type"], "readOnly": false, "type": "string"}, "services.opensearch.settings.\"http.port\"": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/opensearch.nix"], "default": "9200", "description": "The port to listen on for HTTP traffic.\n", "loc": ["services", "opensearch", "settings", "http.port"], "readOnly": false, "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)"}, "services.opensearch.settings.\"network.host\"": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/opensearch.nix"], "default": "\"127.0.0.1\"", "description": "Which port this service should listen on.\n", "loc": ["services", "opensearch", "settings", "network.host"], "readOnly": false, "type": "string"}, "services.opensearch.settings.\"transport.port\"": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/opensearch.nix"], "default": "9300", "description": "The port to listen on for transport traffic.\n", "loc": ["services", "opensearch", "settings", "transport.port"], "readOnly": false, "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)"}, "services.opentelemetry-collector.configFile": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/opentelemetry-collector.nix"], "default": "null", "description": "Override the configuration file used by OpenTelemetry Collector.\nBy default, a configuration is generated from `services.opentelemetry-collector.settings`.\n\nIf overriding, enable the `health_check` extension to allow process-compose to check whether the Collector is ready.\nOtherwise, disable the readiness probe by setting `processes.opentelemetry-collector.process-compose.readiness_probe = {};`.\n", "example": "pkgs.writeTextFile { name = \"otel-config.yaml\"; text = \"...\"; }\n", "loc": ["services", "opentelemetry-collector", "configFile"], "readOnly": false, "type": "null or path"}, "services.opentelemetry-collector.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/opentelemetry-collector.nix"], "default": "false", "description": "Whether to enable opentelemetry-collector.", "example": "true", "loc": ["services", "opentelemetry-collector", "enable"], "readOnly": false, "type": "boolean"}, "services.opentelemetry-collector.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/opentelemetry-collector.nix"], "default": "pkgs.opentelemetry-collector-contrib", "description": "The OpenTelemetry Collector package to use", "loc": ["services", "opentelemetry-collector", "package"], "readOnly": false, "type": "package"}, "services.opentelemetry-collector.settings": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/opentelemetry-collector.nix"], "default": "{\n  extensions = {\n    health_check = {\n      endpoint = \"localhost:13133\";\n    };\n  };\n  service = {\n    extensions = [\n      \"health_check\"\n    ];\n  };\n}", "description": "OpenTelemetry Collector configuration.\nRefer to https://opentelemetry.io/docs/collector/configuration/\nfor more information on how to configure the Collector.\n", "loc": ["services", "opentelemetry-collector", "settings"], "readOnly": false, "type": "YAML value"}, "services.postgres.createDatabase": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/postgres.nix"], "default": "true", "description": "Create a database named like current user on startup. Only applies when initialDatabases is an empty list.\n", "loc": ["services", "postgres", "createDatabase"], "readOnly": false, "type": "boolean"}, "services.postgres.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/postgres.nix"], "default": "false", "description": "Whether to enable Add PostgreSQL process.\n.", "example": "true", "loc": ["services", "postgres", "enable"], "readOnly": false, "type": "boolean"}, "services.postgres.extensions": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/postgres.nix"], "default": "null", "description": "Additional PostgreSQL extensions to install.\n\nThe available extensions are:\n\n- age\n- anonymizer\n- apache_datasketches\n- citus\n- cstore_fdw\n- h3-pg\n- hypopg\n- jsonb_deep_sum\n- lantern\n- periods\n- pg-gvm\n- pg-semver\n- pg_auto_failover\n- pg_bigm\n- pg_cron\n- pg_ed25519\n- pg_embedding\n- pg_hint_plan\n- pg_hll\n- pg_ivm\n- pg_libversion\n- pg_net\n- pg_partman\n- pg_rational\n- pg_relusage\n- pg_repack\n- pg_roaringbitmap\n- pg_safeupdate\n- pg_similarity\n- pg_squeeze\n- pg_topn\n- pg_uuidv7\n- pgaudit\n- pgjwt\n- pgmq\n- pgroonga\n- pgrouting\n- pgsodium\n- pgsql-http\n- pgtap\n- pgvecto-rs\n- pgvector\n- plpgsql_check\n- plr\n- plv8\n- postgis\n- repmgr\n- rum\n- smlar\n- sqlite_fdw\n- system_stats\n- tds_fdw\n- temporal_tables\n- timescaledb\n- timescaledb-apache\n- timescaledb_toolkit\n- tsearch_extras\n- tsja\n- wal2json\n\n", "example": "extensions: [\n  extensions.pg_cron\n  extensions.postgis\n  extensions.timescaledb\n];\n", "loc": ["services", "postgres", "extensions"], "readOnly": false, "type": "null or (function that evaluates to a(n) list of package)"}, "services.postgres.hbaConf": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/postgres.nix"], "default": "null", "description": "The contents of a custom pg_hba.conf file to copy into the postgres installation.\nThis allows for custom connection rules that you want to establish on the server.\n", "example": "builtins.readFile ./my-custom/directory/to/pg_hba.conf\n", "loc": ["services", "postgres", "hbaConf"], "readOnly": false, "type": "null or string"}, "services.postgres.initdbArgs": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/postgres.nix"], "default": "[\n  \"--locale=C\"\n  \"--encoding=UTF8\"\n]", "description": "Additional arguments passed to `initdb` during data dir\ninitialisation.\n", "example": "[\n  \"--data-checksums\"\n  \"--allow-group-access\"\n]", "loc": ["services", "postgres", "initdbArgs"], "readOnly": false, "type": "list of strings concatenated with \"\\n\""}, "services.postgres.initialDatabases": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/postgres.nix"], "default": "[ ]", "description": "List of database names and their initial schemas that should be used to create databases on the first startup\nof Postgres. The schema attribute is optional: If not specified, an empty database is created.\n", "example": "[\n  {\n    name = \"foodatabase\";\n    schema = ./foodatabase.sql;\n  }\n  { name = \"bardatabase\"; }\n]\n", "loc": ["services", "postgres", "initialDatabases"], "readOnly": false, "type": "list of (submodule)"}, "services.postgres.initialDatabases.*.name": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/postgres.nix"], "description": "The name of the database to create.\n", "loc": ["services", "postgres", "initialDatabases", "*", "name"], "readOnly": false, "type": "string"}, "services.postgres.initialDatabases.*.pass": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/postgres.nix"], "default": "null", "description": "Password of owner of the database (only takes effect if `user` is not `null`).\n", "loc": ["services", "postgres", "initialDatabases", "*", "pass"], "readOnly": false, "type": "null or string"}, "services.postgres.initialDatabases.*.schema": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/postgres.nix"], "default": "null", "description": "The initial schema of the database; if null (the default),\nan empty database is created.\n", "loc": ["services", "postgres", "initialDatabases", "*", "schema"], "readOnly": false, "type": "null or path"}, "services.postgres.initialDatabases.*.user": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/postgres.nix"], "default": "null", "description": "Username of owner of the database (if null, the default $USER is used).\n", "loc": ["services", "postgres", "initialDatabases", "*", "user"], "readOnly": false, "type": "null or string"}, "services.postgres.initialScript": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/postgres.nix"], "default": "null", "description": "Initial SQL commands to run during database initialization. This can be multiple\nSQL expressions separated by a semi-colon.\n", "example": "CREATE ROLE postgres SUPERUSER;\nCREATE ROLE bar;\n", "loc": ["services", "postgres", "initialScript"], "readOnly": false, "type": "null or string"}, "services.postgres.listen_addresses": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/postgres.nix"], "default": "\"\"", "description": "Listen address", "example": "\"127.0.0.1\"", "loc": ["services", "postgres", "listen_addresses"], "readOnly": false, "type": "string"}, "services.postgres.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/postgres.nix"], "default": "pkgs.postgresql", "description": "The PostgreSQL package to use. Use this to override the default with a specific version.\n", "example": "pkgs.postgresql_15\n", "loc": ["services", "postgres", "package"], "readOnly": false, "type": "package"}, "services.postgres.port": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/postgres.nix"], "default": "5432", "description": "The TCP port to accept connections.\n", "loc": ["services", "postgres", "port"], "readOnly": false, "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)"}, "services.postgres.settings": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/postgres.nix"], "default": "{ }", "description": "PostgreSQL configuration. Refer to\n<https://www.postgresql.org/docs/11/config-setting.html#CONFIG-SETTING-CONFIGURATION-FILE>\nfor an overview of `postgresql.conf`.\n\nString values will automatically be enclosed in single quotes. Single quotes will be\nescaped with two single quotes as described by the upstream documentation linked above.\n", "example": "{\n  log_connections = true;\n  log_statement = \"all\";\n  logging_collector = true\n  log_disconnections = true\n  log_destination = lib.mkForce \"syslog\";\n}\n", "loc": ["services", "postgres", "settings"], "readOnly": false, "type": "attribute set of (boolean or floating point number or signed integer or string)"}, "services.rabbitmq.configItems": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/rabbitmq.nix"], "default": "{ }", "description": "Configuration options in RabbitMQ's new config file format,\nwhich is a simple key-value format that can not express nested\ndata structures. This is known as the `rabbitmq.conf` file,\nalthough outside NixOS that filename may have Erlang syntax, particularly\nprior to RabbitMQ 3.7.0.\nIf you do need to express nested data structures, you can use\n`config` option. Configuration from `config`\nwill be merged into these options by RabbitMQ at runtime to\nform the final configuration.\nSee <https://www.rabbitmq.com/configure.html#config-items>\nFor the distinct formats, see <https://www.rabbitmq.com/configure.html#config-file-formats>\n", "example": "{\n  \"auth_backends.1.authn\" = \"rabbit_auth_backend_ldap\";\n  \"auth_backends.1.authz\" = \"rabbit_auth_backend_internal\";\n}\n", "loc": ["services", "rabbitmq", "configItems"], "readOnly": false, "type": "attribute set of string"}, "services.rabbitmq.cookie": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/rabbitmq.nix"], "default": "\"\"", "description": "Erlang cookie is a string of arbitrary length which must\nbe the same for several nodes to be allowed to communicate.\nLeave empty to generate automatically.\n", "loc": ["services", "rabbitmq", "cookie"], "readOnly": false, "type": "string"}, "services.rabbitmq.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/rabbitmq.nix"], "default": "false", "description": "Whether to enable the RabbitMQ server, an Advanced Message\nQueuing Protocol (AMQP) broker.\n", "loc": ["services", "rabbitmq", "enable"], "readOnly": false, "type": "boolean"}, "services.rabbitmq.listenAddress": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/rabbitmq.nix"], "default": "\"127.0.0.1\"", "description": "IP address on which RabbitMQ will listen for AMQP\nconnections.  Set to the empty string to listen on all\ninterfaces.  Note that RabbitMQ creates a user named\n`guest` with password\n`guest` by default, so you should delete\nthis user if you intend to allow external access.\nTogether with 'port' setting it's mostly an alias for\nconfigItems.\"listeners.tcp.1\" and it's left for backwards\ncompatibility with previous version of this module.\n", "example": "\"\"", "loc": ["services", "rabbitmq", "listenAddress"], "readOnly": false, "type": "string"}, "services.rabbitmq.managementPlugin.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/rabbitmq.nix"], "default": "false", "description": "Whether to enable the management plugin.", "example": "true", "loc": ["services", "rabbitmq", "managementPlugin", "enable"], "readOnly": false, "type": "boolean"}, "services.rabbitmq.managementPlugin.port": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/rabbitmq.nix"], "default": "15672", "description": "On which port to run the management plugin\n", "loc": ["services", "rabbitmq", "managementPlugin", "port"], "readOnly": false, "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)"}, "services.rabbitmq.nodeName": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/rabbitmq.nix"], "default": "\"rabbit@localhost\"", "description": "The name of the RabbitMQ node.  This is used to identify\nthe node in a cluster.  If you are running multiple\nRabbitMQ nodes on the same machine, you must give each\nnode a unique name.  The name must be of the form\n`name@host`, where `name` is an arbitrary name and\n`host` is the domain name of the host.\n", "loc": ["services", "rabbitmq", "nodeName"], "readOnly": false, "type": "string"}, "services.rabbitmq.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/rabbitmq.nix"], "default": "pkgs.rabbitmq-server", "description": "Which rabbitmq package to use.\n", "loc": ["services", "rabbitmq", "package"], "readOnly": false, "type": "package"}, "services.rabbitmq.pluginDirs": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/rabbitmq.nix"], "default": "[ ]", "description": "The list of directories containing external plugins", "loc": ["services", "rabbitmq", "pluginDirs"], "readOnly": false, "type": "list of path"}, "services.rabbitmq.plugins": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/rabbitmq.nix"], "default": "[ ]", "description": "The names of plugins to enable", "loc": ["services", "rabbitmq", "plugins"], "readOnly": false, "type": "list of string"}, "services.rabbitmq.port": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/rabbitmq.nix"], "default": "5672", "description": "Port on which RabbitMQ will listen for AMQP connections.\n", "loc": ["services", "rabbitmq", "port"], "readOnly": false, "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)"}, "services.redis.bind": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/redis.nix"], "default": "\"127.0.0.1\"", "description": "The IP interface to bind to.\n`null` means \"all interfaces\".\n", "example": "\"127.0.0.1\"", "loc": ["services", "redis", "bind"], "readOnly": false, "type": "null or string"}, "services.redis.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/redis.nix"], "default": "false", "description": "Whether to enable Redis process and expose utilities.", "example": "true", "loc": ["services", "redis", "enable"], "readOnly": false, "type": "boolean"}, "services.redis.extraConfig": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/redis.nix"], "default": "\"locale-collate C\"", "description": "Additional text to be appended to `redis.conf`.", "loc": ["services", "redis", "extraConfig"], "readOnly": false, "type": "strings concatenated with \"\\n\""}, "services.redis.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/redis.nix"], "default": "pkgs.redis", "description": "Which package of Redis to use", "loc": ["services", "redis", "package"], "readOnly": false, "type": "package"}, "services.redis.port": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/redis.nix"], "default": "6379", "description": "The TCP port to accept connections.\nIf port 0 is specified Redis, will not listen on a TCP socket and a unix socket file will be found at $REDIS_UNIX_SOCKET.\n", "loc": ["services", "redis", "port"], "readOnly": false, "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)"}, "services.sqld.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/sqld.nix"], "default": "false", "description": "Whether to enable sqld.", "example": "true", "loc": ["services", "sqld", "enable"], "readOnly": false, "type": "boolean"}, "services.sqld.extraArgs": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/sqld.nix"], "default": "[ ]", "description": "Add other sqld flags.", "loc": ["services", "sqld", "extraArgs"], "readOnly": false, "type": "list of string"}, "services.sqld.port": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/sqld.nix"], "default": "8080", "description": "Port number to listen on", "loc": ["services", "sqld", "port"], "readOnly": false, "type": "signed integer"}, "services.tailscale.funnel.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/tailscale.nix"], "default": "false", "description": "Whether to enable Tailscale funnel.", "example": "true", "loc": ["services", "tailscale", "funnel", "enable"], "readOnly": false, "type": "boolean"}, "services.tailscale.funnel.target": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/tailscale.nix"], "description": "Target host or host:port for Tailscale funnel", "loc": ["services", "tailscale", "funnel", "target"], "readOnly": false, "type": "string"}, "services.temporal.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/temporal.nix"], "default": "false", "description": "Whether to enable Temporal process.", "example": "true", "loc": ["services", "temporal", "enable"], "readOnly": false, "type": "boolean"}, "services.temporal.ip": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/temporal.nix"], "default": "\"127.0.0.1\"", "description": "IPv4 address to bind the frontend service to.", "loc": ["services", "temporal", "ip"], "readOnly": false, "type": "string"}, "services.temporal.namespaces": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/temporal.nix"], "default": "[ ]", "description": "Specify namespaces that should be pre-created (namespace \"default\" is always created).", "example": "[\n  \"my-namespace\"\n  \"my-other-namespace\"\n]", "loc": ["services", "temporal", "namespaces"], "readOnly": false, "type": "list of string"}, "services.temporal.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/temporal.nix"], "default": "pkgs.temporal-cli", "description": "Which package of Temporal to use.", "loc": ["services", "temporal", "package"], "readOnly": false, "type": "package"}, "services.temporal.port": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/temporal.nix"], "default": "7233", "description": "Port for the frontend gRPC service.", "loc": ["services", "temporal", "port"], "readOnly": false, "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)"}, "services.temporal.state": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/temporal.nix"], "default": "{ }", "description": "State configuration.", "loc": ["services", "temporal", "state"], "readOnly": false, "type": "submodule"}, "services.temporal.state.ephemeral": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/temporal.nix"], "default": "true", "description": "When enabled, the Temporal state gets lost when the process exists.", "loc": ["services", "temporal", "state", "ephemeral"], "readOnly": false, "type": "boolean"}, "services.temporal.state.sqlite-pragma": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/temporal.nix"], "default": "{ }", "description": "Sqlite pragma statements", "example": "{\n  journal_mode = \"wal\";\n  synchronous = \"2\";\n}", "loc": ["services", "temporal", "state", "sqlite-pragma"], "readOnly": false, "type": "attribute set of string"}, "services.temporal.ui": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/temporal.nix"], "default": "{ }", "description": "UI configuration.", "loc": ["services", "temporal", "ui"], "readOnly": false, "type": "submodule"}, "services.temporal.ui.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/temporal.nix"], "default": "true", "description": "Enable the Web UI.", "loc": ["services", "temporal", "ui", "enable"], "readOnly": false, "type": "boolean"}, "services.temporal.ui.ip": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/temporal.nix"], "default": "\"127.0.0.1\"", "description": "IPv4 address to bind the Web UI to.", "loc": ["services", "temporal", "ui", "ip"], "readOnly": false, "type": "string"}, "services.temporal.ui.port": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/temporal.nix"], "default": "[`services.temporal.port`](#servicestemporalport) + 1000", "description": "Port for the Web UI.", "loc": ["services", "temporal", "ui", "port"], "readOnly": false, "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)"}, "services.tideways.apiKey": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/tideways.nix"], "default": "\"\"", "description": "Sets the API-Key for the Tideways Daemon.\n", "loc": ["services", "tideways", "apiKey"], "readOnly": false, "type": "string"}, "services.tideways.cliPackage": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/tideways.nix"], "default": "pkgs.tideways-cli", "description": "Which package of tideways-cli to use", "loc": ["services", "tideways", "cliPackage"], "readOnly": false, "type": "package"}, "services.tideways.daemonPackage": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/tideways.nix"], "default": "pkgs.tideways-daemon", "description": "Which package of tideways-daemon to use", "loc": ["services", "tideways", "daemonPackage"], "readOnly": false, "type": "package"}, "services.tideways.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/tideways.nix"], "default": "false", "description": "Whether to enable Tideways profiler daemon\n\nIt automatically installs Tideways PHP extension.\n.", "example": "true", "loc": ["services", "tideways", "enable"], "readOnly": false, "type": "boolean"}, "services.tideways.environment": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/tideways.nix"], "default": "\"devenv\"", "description": "Sets the Environment for Tideways Daemon.\n", "loc": ["services", "tideways", "environment"], "readOnly": false, "type": "string"}, "services.tideways.profilingSpace": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/tideways.nix"], "default": "true", "description": "When the profiling space is enabled, the default monitoring will be disabled.\n", "loc": ["services", "tideways", "profilingSpace"], "readOnly": false, "type": "boolean"}, "services.tideways.service": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/tideways.nix"], "default": "\"\"", "description": "Sets the Service name for Tideways Daemon.\n", "loc": ["services", "tideways", "service"], "readOnly": false, "type": "string"}, "services.trafficserver.cache": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/trafficserver"], "default": "\"\"", "description": "Caching rules that overrule the origin's caching policy.\n\nConsult the [upstream documentation](https://docs.trafficserver.apache.org/en/latest/admin-guide/files/cache.config.en.html)\nfor more details.\n", "example": "\"dest_domain=example.com suffix=js action=never-cache\"", "loc": ["services", "trafficserver", "cache"], "readOnly": false, "type": "strings concatenated with \"\\n\""}, "services.trafficserver.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/trafficserver"], "default": "false", "description": "Whether to enable Apache Traffic Server.", "example": "true", "loc": ["services", "trafficserver", "enable"], "readOnly": false, "type": "boolean"}, "services.trafficserver.hosting": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/trafficserver"], "default": "\"\"", "description": "Partition the cache according to origin server or domain\n\nConsult the [upstream documentation](https://docs.trafficserver.apache.org/en/latest/admin-guide/files/hosting.config.en.html)\nfor more details.\n", "example": "\"domain=example.com volume=1\"", "loc": ["services", "trafficserver", "hosting"], "readOnly": false, "type": "strings concatenated with \"\\n\""}, "services.trafficserver.ipAllow": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/trafficserver"], "default": "upstream defaults", "description": "Control client access to Traffic Server and Traffic Server connections\nto upstream servers.\n\nConsult the [upstream documentation](https://docs.trafficserver.apache.org/en/latest/admin-guide/files/ip_allow.yaml.en.html)\nfor more details.\n", "example": "{\n  ip_allow = [{\n    apply = \"in\";\n    ip_addrs = \"127.0.0.1\";\n    action = \"allow\";\n    methods = \"ALL\";\n  }];\n}\n", "loc": ["services", "trafficserver", "ipAllow"], "readOnly": false, "type": "null or YAML value"}, "services.trafficserver.logging": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/trafficserver"], "default": "upstream defaults", "description": "Configure logs.\n\nConsult the [upstream documentation](https://docs.trafficserver.apache.org/en/latest/admin-guide/files/logging.yaml.en.html)\nfor more details.\n", "example": "{ }", "loc": ["services", "trafficserver", "logging"], "readOnly": false, "type": "null or YAML value"}, "services.trafficserver.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/trafficserver"], "default": "pkgs.trafficserver", "description": "Apache Traffic Server package", "loc": ["services", "trafficserver", "package"], "readOnly": false, "type": "package"}, "services.trafficserver.parent": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/trafficserver"], "default": "\"\"", "description": "Identify the parent proxies used in an cache hierarchy.\n\nConsult the [upstream documentation](https://docs.trafficserver.apache.org/en/latest/admin-guide/files/parent.config.en.html)\nfor more details.\n", "example": "''\n  dest_domain=. method=get parent=\"p1.example:8080; p2.example:8080\" round_robin=true\n''", "loc": ["services", "trafficserver", "parent"], "readOnly": false, "type": "strings concatenated with \"\\n\""}, "services.trafficserver.plugins": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/trafficserver"], "default": "[ ]", "description": "Controls run-time loadable plugins available to Traffic Server, as\nwell as their configuration.\n\nConsult the [upstream documentation](https://docs.trafficserver.apache.org/en/latest/admin-guide/files/plugin.config.en.html)\nfor more details.\n", "loc": ["services", "trafficserver", "plugins"], "readOnly": false, "type": "list of (submodule)"}, "services.trafficserver.plugins.*.arg": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/trafficserver"], "default": "\"\"", "description": "arguments to pass to the plugin", "example": "\"--header=ATS-My-Debug\"", "loc": ["services", "trafficserver", "plugins", "*", "arg"], "readOnly": false, "type": "string"}, "services.trafficserver.plugins.*.path": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/trafficserver"], "description": "Path to plugin. The path can either be absolute, or relative to\nthe plugin directory.\n", "example": "\"xdebug.so\"", "loc": ["services", "trafficserver", "plugins", "*", "path"], "readOnly": false, "type": "string"}, "services.trafficserver.records": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/trafficserver"], "default": "{ }", "description": "List of configurable variables used by Traffic Server.\n\nConsult the [upstream documentation](https://docs.trafficserver.apache.org/en/latest/admin-guide/files/records.config.en.html)\nfor more details.\n\nWhen defining the values for the option `x.y`, a nested attribute should\nbe used. Using a flat attribute set with the attribute name `x.y` will\nresult in an error.\n\nIf options for both `x.y` and `x.y.z` needs to be set, you can set\n`x.y._` as `x.y`. This only applies to Traffic Server versions prior to\n10. Traffic Server 10 and onwards uses YAML configuration, which doesn't\nhave this kind of problem.\n", "example": "{\n  proxy = {\n    config = {\n      proxy_name = \"my_server\";\n    };\n  };\n}", "loc": ["services", "trafficserver", "records"], "readOnly": false, "type": "Traffic Server records value"}, "services.trafficserver.remap": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/trafficserver"], "default": "\"\"", "description": "URL remapping rules used by Traffic Server.\n\nConsult the [upstream documentation](https://docs.trafficserver.apache.org/en/latest/admin-guide/files/remap.config.en.html)\nfor more details.\n", "example": "\"map http://from.example http://origin.example\"", "loc": ["services", "trafficserver", "remap"], "readOnly": false, "type": "strings concatenated with \"\\n\""}, "services.trafficserver.runroot": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/trafficserver"], "description": "File layout used by Traffic Server", "loc": ["services", "trafficserver", "runroot"], "readOnly": true, "type": "unspecified value"}, "services.trafficserver.sni": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/trafficserver"], "default": "null", "description": "Configure aspects of TLS connection handling for both inbound and\noutbound connections.\n\nConsult the [upstream documentation](https://docs.trafficserver.apache.org/en/latest/admin-guide/files/sni.yaml.en.html)\nfor more details.\n", "example": "{\n  sni = [{\n    fqdn = \"no-http2.example.com\";\n    https = \"off\";\n  }];\n}\n", "loc": ["services", "trafficserver", "sni"], "readOnly": false, "type": "null or YAML value"}, "services.trafficserver.splitDns": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/trafficserver"], "default": "\"\"", "description": "Specify the DNS server that Traffic Server should use under specific\nconditions.\n\nConsult the [upstream documentation](https://docs.trafficserver.apache.org/en/latest/admin-guide/files/splitdns.config.en.html)\nfor more details.\n", "example": "''\n  dest_domain=internal.corp.example named=\"255.255.255.255:212 255.255.255.254\" def_domain=corp.example search_list=\"corp.example corp1.example\"\n  dest_domain=!internal.corp.example named=255.255.255.253\n''", "loc": ["services", "trafficserver", "splitDns"], "readOnly": false, "type": "strings concatenated with \"\\n\""}, "services.trafficserver.sslMulticert": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/trafficserver"], "default": "\"\"", "description": "Configure SSL server certificates to terminate the SSL sessions.\n\nConsult the [upstream documentation](https://docs.trafficserver.apache.org/en/latest/admin-guide/files/ssl_multicert.config.en.html)\nfor more details.\n", "example": "\"dest_ip=* ssl_cert_name=default.pem\"", "loc": ["services", "trafficserver", "sslMulticert"], "readOnly": false, "type": "strings concatenated with \"\\n\""}, "services.trafficserver.storage": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/trafficserver"], "default": "\"${config.services.traffic-server.runroot.cachedir} 256M\"", "description": "List all the storage that make up the Traffic Server cache.\n\nConsult the [upstream documentation](https://docs.trafficserver.apache.org/en/latest/admin-guide/files/storage.config.en.html)\nfor more details.\n", "example": "\"/dev/disk/by-id/XXXXX volume=1\"", "loc": ["services", "trafficserver", "storage"], "readOnly": false, "type": "strings concatenated with \"\\n\""}, "services.trafficserver.strategies": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/trafficserver"], "default": "null", "description": "Specify the next hop proxies used in an cache hierarchy and the\nalgorithms used to select the next proxy.\n\nConsult the [upstream documentation](https://docs.trafficserver.apache.org/en/latest/admin-guide/files/strategies.yaml.en.html)\nfor more details.\n", "loc": ["services", "trafficserver", "strategies"], "readOnly": false, "type": "null or YAML value"}, "services.trafficserver.volume": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/trafficserver"], "default": "\"\"", "description": "Manage cache space more efficiently and restrict disk usage by\ncreating cache volumes of different sizes.\n\nConsult the [upstream documentation](https://docs.trafficserver.apache.org/en/latest/admin-guide/files/volume.config.en.html)\nfor more details.\n", "example": "\"volume=1 scheme=http size=20%\"", "loc": ["services", "trafficserver", "volume"], "readOnly": false, "type": "null or YAML value"}, "services.typesense.additionalArgs": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/typesense.nix"], "default": "[ ]", "description": "Additional arguments passed to `typesense`.\n", "example": "[ ]", "loc": ["services", "typesense", "additionalArgs"], "readOnly": false, "type": "list of strings concatenated with \"\\n\""}, "services.typesense.apiKey": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/typesense.nix"], "default": "\"example\"", "description": "API Key.", "loc": ["services", "typesense", "apiKey"], "readOnly": false, "type": "string"}, "services.typesense.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/typesense.nix"], "default": "false", "description": "Whether to enable typesense process.", "example": "true", "loc": ["services", "typesense", "enable"], "readOnly": false, "type": "boolean"}, "services.typesense.host": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/typesense.nix"], "default": "\"127.0.0.1\"", "description": "The HTTP host to accept connections.\n", "loc": ["services", "typesense", "host"], "readOnly": false, "type": "string"}, "services.typesense.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/typesense.nix"], "default": "pkgs.typesense", "description": "Which package of typesense to use", "loc": ["services", "typesense", "package"], "readOnly": false, "type": "package"}, "services.typesense.port": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/typesense.nix"], "default": "8108", "description": "The HTTP port to accept connections.\n", "loc": ["services", "typesense", "port"], "readOnly": false, "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)"}, "services.typesense.searchOnlyKey": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/typesense.nix"], "default": "null", "description": "Search Only Key.", "loc": ["services", "typesense", "searchOnlyKey"], "readOnly": false, "type": "null or string"}, "services.varnish.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/varnish.nix"], "default": "false", "description": "Whether to enable Varnish process and expose utilities.", "example": "true", "loc": ["services", "varnish", "enable"], "readOnly": false, "type": "boolean"}, "services.varnish.extraModules": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/varnish.nix"], "default": "[ ]", "description": "Varnish modules (except 'std').\n", "example": "[ pkgs.varnish73Packages.modules ]", "loc": ["services", "varnish", "extraModules"], "readOnly": false, "type": "list of package"}, "services.varnish.listen": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/varnish.nix"], "default": "\"127.0.0.1:6081\"", "description": "Which address to listen on.", "loc": ["services", "varnish", "listen"], "readOnly": false, "type": "string"}, "services.varnish.memorySize": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/varnish.nix"], "default": "\"64M\"", "description": "How much memory to allocate to Varnish.", "loc": ["services", "varnish", "memorySize"], "readOnly": false, "type": "string"}, "services.varnish.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/varnish.nix"], "default": "pkgs.varnish", "description": "Which Varnish package to use.", "loc": ["services", "varnish", "package"], "readOnly": false, "type": "package"}, "services.varnish.vcl": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/varnish.nix"], "default": "''\n  vcl 4.0;\n  \n  backend default {\n    .host = \"127.0.0.1\";\n    .port = \"80\";\n  }\n''", "description": "Varnish VCL configuration.", "loc": ["services", "varnish", "vcl"], "readOnly": false, "type": "strings concatenated with \"\\n\""}, "services.vault.address": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/vault.nix"], "default": "\"127.0.0.1:8200\"", "description": "Specifies the address to bind to for listening\n", "loc": ["services", "vault", "address"], "readOnly": false, "type": "string"}, "services.vault.disableClustering": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/vault.nix"], "default": "true", "description": "Specifies whether clustering features such as request forwarding are enabled\n", "loc": ["services", "vault", "disableClustering"], "readOnly": false, "type": "boolean"}, "services.vault.disableMlock": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/vault.nix"], "default": "true", "description": "Disables the server from executing the mlock syscall\n", "loc": ["services", "vault", "disableMlock"], "readOnly": false, "type": "boolean"}, "services.vault.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/vault.nix"], "default": "false", "description": "Whether to enable vault process.", "example": "true", "loc": ["services", "vault", "enable"], "readOnly": false, "type": "boolean"}, "services.vault.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/vault.nix"], "default": "pkgs.vault-bin", "description": "Which package of Vault to use.", "loc": ["services", "vault", "package"], "readOnly": false, "type": "package"}, "services.vault.ui": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/vault.nix"], "default": "true", "description": "Enables the built-in web UI\n", "loc": ["services", "vault", "ui"], "readOnly": false, "type": "boolean"}, "services.wiremock.disableBanner": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/wiremock.nix"], "default": "false", "description": "Whether to disable print banner logo.\n", "loc": ["services", "wiremock", "disableBanner"], "readOnly": false, "type": "boolean"}, "services.wiremock.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/wiremock.nix"], "default": "false", "description": "Whether to enable WireMock.", "example": "true", "loc": ["services", "wiremock", "enable"], "readOnly": false, "type": "boolean"}, "services.wiremock.mappings": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/wiremock.nix"], "default": "[ ]", "description": "The mappings to mock.\nSee the JSON examples on <https://wiremock.org/docs/stubbing/> for more information.\n", "example": "[\n  {\n    request = {\n      method = \"GET\";\n      url = \"/body\";\n    };\n    response = {\n      body = \"Literal text to put in the body\";\n      headers = {\n        Content-Type = \"text/plain\";\n      };\n      status = 200;\n    };\n  }\n  {\n    request = {\n      method = \"GET\";\n      url = \"/json\";\n    };\n    response = {\n      jsonBody = {\n        someField = \"someValue\";\n      };\n      status = 200;\n    };\n  }\n]", "loc": ["services", "wiremock", "mappings"], "readOnly": false, "type": "JSON value"}, "services.wiremock.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/wiremock.nix"], "default": "pkgs.wiremock", "description": "Which package of WireMock to use.\n", "loc": ["services", "wiremock", "package"], "readOnly": false, "type": "package"}, "services.wiremock.port": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/wiremock.nix"], "default": "8080", "description": "The port number for the HTTP server to listen on.\n", "loc": ["services", "wiremock", "port"], "readOnly": false, "type": "signed integer"}, "services.wiremock.verbose": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/services/wiremock.nix"], "default": "false", "description": "Whether to log verbosely to stdout.\n", "loc": ["services", "wiremock", "verbose"], "readOnly": false, "type": "boolean"}, "starship.config.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/starship.nix"], "default": "false", "description": "Whether to enable Starship config override.", "example": "true", "loc": ["starship", "config", "enable"], "readOnly": false, "type": "boolean"}, "starship.config.path": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/starship.nix"], "default": "${config.env.DEVENV_ROOT}/starship.toml", "description": "The Starship configuration file to use.", "loc": ["starship", "config", "path"], "readOnly": false, "type": "path"}, "starship.enable": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/starship.nix"], "default": "false", "description": "Whether to enable the Starship.rs command prompt.", "example": "true", "loc": ["starship", "enable"], "readOnly": false, "type": "boolean"}, "starship.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/integrations/starship.nix"], "default": "pkgs.starship", "description": "The Starship package to use.", "loc": ["starship", "package"], "readOnly": false, "type": "package"}, "stdenv": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/top-level.nix"], "default": "<derivation stdenv-darwin>", "description": "The stdenv to use for the developer environment.", "loc": ["stdenv"], "readOnly": false, "type": "package"}, "tasks": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/tasks.nix"], "description": "A set of tasks.", "loc": ["tasks"], "readOnly": false, "type": "attribute set of (submodule)"}, "tasks.<name>.after": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/tasks.nix"], "default": "[ ]", "description": "List of tasks to run after this task.", "loc": ["tasks", "<name>", "after"], "readOnly": false, "type": "list of string"}, "tasks.<name>.before": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/tasks.nix"], "default": "[ ]", "description": "List of tasks to run before this task.", "loc": ["tasks", "<name>", "before"], "readOnly": false, "type": "list of string"}, "tasks.<name>.binary": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/tasks.nix"], "default": "\"bash\"", "description": "Override the binary name if it doesn't match package name", "loc": ["tasks", "<name>", "binary"], "readOnly": false, "type": "string"}, "tasks.<name>.description": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/tasks.nix"], "default": "\"\"", "description": "Description of the task.", "loc": ["tasks", "<name>", "description"], "readOnly": false, "type": "string"}, "tasks.<name>.exec": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/tasks.nix"], "default": "null", "description": "Command to execute the task.", "loc": ["tasks", "<name>", "exec"], "readOnly": false, "type": "null or string"}, "tasks.<name>.exports": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/tasks.nix"], "default": "[ ]", "description": "List of environment variables to export.", "loc": ["tasks", "<name>", "exports"], "readOnly": false, "type": "list of string"}, "tasks.<name>.input": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/tasks.nix"], "default": "{ }", "description": "Input values for the task, encoded as JSON.", "loc": ["tasks", "<name>", "input"], "readOnly": false, "type": "attribute set of anything"}, "tasks.<name>.package": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/tasks.nix"], "default": "<derivation bash-5.2p37>", "description": "Package to install for this task.", "loc": ["tasks", "<name>", "package"], "readOnly": false, "type": "package"}, "tasks.<name>.status": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/tasks.nix"], "default": "null", "description": "Check if the command should be ran", "loc": ["tasks", "<name>", "status"], "readOnly": false, "type": "null or string"}, "unsetEnvVars": {"declarations": ["/nix/store/ibi7jclm8va2i85br5h7bdpbq4nkxrsh-source/src/modules/top-level.nix"], "default": "[\n  \"HOST_PATH\"\n  \"NIX_BUILD_CORES\"\n  \"__structuredAttrs\"\n  \"buildInputs\"\n  \"buildPhase\"\n  \"builder\"\n  \"depsBuildBuild\"\n  \"depsBuildBuildPropagated\"\n  \"depsBuildTarget\"\n  \"depsBuildTargetPropagated\"\n  \"depsHostHost\"\n  \"depsHostHostPropagated\"\n  \"depsTargetTarget\"\n  \"depsTargetTargetPropagated\"\n  \"dontAddDisableDepTrack\"\n  \"doCheck\"\n  \"doInstallCheck\"\n  \"nativeBuildInputs\"\n  \"out\"\n  \"outputs\"\n  \"patches\"\n  \"phases\"\n  \"preferLocalBuild\"\n  \"propagatedBuildInputs\"\n  \"propagatedNativeBuildInputs\"\n  \"shell\"\n  \"shellHook\"\n  \"stdenv\"\n  \"strictDeps\"\n]", "description": "A list of removed environment variables to make the shell/direnv more lean.", "loc": ["unsetEnvVars"], "readOnly": false, "type": "list of string"}}
